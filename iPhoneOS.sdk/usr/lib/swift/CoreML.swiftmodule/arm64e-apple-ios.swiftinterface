// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.24.14 clang-1205.0.19.54)
// swift-module-flags: -target arm64e-apple-ios14.5 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreML -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreML
@_exported import CoreML
import Swift
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension MLModel {
  public class func load(contentsOf url: Foundation.URL, configuration: CoreML.MLModelConfiguration = MLModelConfiguration(), completionHandler handler: @escaping (Swift.Result<CoreML.MLModel, Swift.Error>) -> ())
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension MLMultiArray {
  @inlinable convenience public init<C>(_ data: C) throws where C : Swift.Collection, C.Element : Swift.FixedWidthInteger {
        let count = data.count
        try self.init(shape: [NSNumber(value: count)], dataType: .int32)
        let buffer = self.dataPointer
        let stride = MemoryLayout<Int32>.stride
        var i = 0
        for elt in data {
            buffer.storeBytes(
              of: Int32(elt), toByteOffset: i&*stride, as: Int32.self
            )
            i += 1
        }
    }
  @inlinable convenience public init<C>(_ data: C) throws where C : Swift.Collection, C.Element == Swift.Float {
        let count = data.count
        try self.init(shape: [NSNumber(value: count)], dataType: .float32)
        let buffer = self.dataPointer
        let stride = MemoryLayout<Float>.stride
        var i = 0
        for elt in data {
            buffer.storeBytes(
              of: elt, toByteOffset: i&*stride, as: Float.self
            )
            i += 1
        }
    }
  @inlinable convenience public init<C>(_ data: C) throws where C : Swift.Collection, C.Element == Swift.Double {
        let count = data.count
        try self.init(shape: [NSNumber(value: count)], dataType: .double)
        let buffer = self.dataPointer
        let stride = MemoryLayout<Double>.stride
        var i = 0
        for elt in data {
            buffer.storeBytes(
              of: elt, toByteOffset: i&*stride, as: Double.self
            )
            i += 1
        }
    }
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension UnsafeBufferPointer {
  public init(_ multiArray: CoreML.MLMultiArray) throws
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension UnsafeMutableBufferPointer {
  public init(_ multiArray: CoreML.MLMultiArray) throws
}
@available(macOS 11.0, iOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension MLModelCollection {
  public class func beginAccessing(identifier: Swift.String, completionHandler handler: @escaping (Swift.Result<CoreML.MLModelCollection, Swift.Error>) -> ()) -> Foundation.Progress
  public class func endAccessing(identifier: Swift.String, completionHandler handler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> ())
}
