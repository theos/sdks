// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.24.14 clang-1205.0.19.54)
// swift-module-flags: -target arm64-apple-ios14.5 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreData -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreData
import Combine
@_exported import CoreData
import Foundation
import Swift
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension NSManagedObject : Combine.ObservableObject {
  public var objectWillChange: Combine.ObservableObjectPublisher {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension CocoaError.Code {
  public static var managedObjectValidation: Foundation.CocoaError.Code {
    get
  }
  public static var validationMultipleErrors: Foundation.CocoaError.Code {
    get
  }
  public static var validationMissingMandatoryProperty: Foundation.CocoaError.Code {
    get
  }
  public static var validationRelationshipLacksMinimumCount: Foundation.CocoaError.Code {
    get
  }
  public static var validationRelationshipExceedsMaximumCount: Foundation.CocoaError.Code {
    get
  }
  public static var validationRelationshipDeniedDelete: Foundation.CocoaError.Code {
    get
  }
  public static var validationNumberTooLarge: Foundation.CocoaError.Code {
    get
  }
  public static var validationNumberTooSmall: Foundation.CocoaError.Code {
    get
  }
  public static var validationDateTooLate: Foundation.CocoaError.Code {
    get
  }
  public static var validationDateTooSoon: Foundation.CocoaError.Code {
    get
  }
  public static var validationInvalidDate: Foundation.CocoaError.Code {
    get
  }
  public static var validationStringTooLong: Foundation.CocoaError.Code {
    get
  }
  public static var validationStringTooShort: Foundation.CocoaError.Code {
    get
  }
  public static var validationStringPatternMatching: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectContextLocking: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreCoordinatorLocking: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectReferentialIntegrity: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectExternalRelationship: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectMerge: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectConstraintMerge: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreInvalidType: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreTypeMismatch: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreIncompatibleSchema: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreSave: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreIncompleteSave: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreSaveConflicts: Foundation.CocoaError.Code {
    get
  }
  public static var coreData: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreOperation: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreOpen: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreTimeout: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreUnsupportedRequestType: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreIncompatibleVersionHash: Foundation.CocoaError.Code {
    get
  }
  public static var migration: Foundation.CocoaError.Code {
    get
  }
  public static var migrationCancelled: Foundation.CocoaError.Code {
    get
  }
  public static var migrationMissingSourceModel: Foundation.CocoaError.Code {
    get
  }
  public static var migrationMissingMappingModel: Foundation.CocoaError.Code {
    get
  }
  public static var migrationManagerSourceStore: Foundation.CocoaError.Code {
    get
  }
  public static var migrationManagerDestinationStore: Foundation.CocoaError.Code {
    get
  }
  public static var entityMigrationPolicy: Foundation.CocoaError.Code {
    get
  }
  public static var sqlite: Foundation.CocoaError.Code {
    get
  }
  public static var inferredMappingModel: Foundation.CocoaError.Code {
    get
  }
  public static var externalRecordImport: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError.Code {
  @available(*, deprecated, renamed: "managedObjectValidation")
  public static var managedObjectValidationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationMultipleErrors")
  public static var validationMultipleErrorsError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationMissingMandatoryProperty")
  public static var validationMissingMandatoryPropertyError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationRelationshipLacksMinimumCount")
  public static var validationRelationshipLacksMinimumCountError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationRelationshipExceedsMaximumCount")
  public static var validationRelationshipExceedsMaximumCountError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationRelationshipDeniedDelete")
  public static var validationRelationshipDeniedDeleteError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationNumberTooLarge")
  public static var validationNumberTooLargeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationNumberTooSmall")
  public static var validationNumberTooSmallError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationDateTooLate")
  public static var validationDateTooLateError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationDateTooSoon")
  public static var validationDateTooSoonError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationInvalidDate")
  public static var validationInvalidDateError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationStringTooLong")
  public static var validationStringTooLongError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationStringTooShort")
  public static var validationStringTooShortError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationStringPatternMatching")
  public static var validationStringPatternMatchingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectContextLocking")
  public static var managedObjectContextLockingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreCoordinatorLocking")
  public static var persistentStoreCoordinatorLockingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectReferentialIntegrity")
  public static var managedObjectReferentialIntegrityError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectExternalRelationship")
  public static var managedObjectExternalRelationshipError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectMerge")
  public static var managedObjectMergeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectConstraintMerge")
  public static var managedObjectConstraintMergeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreInvalidType")
  public static var persistentStoreInvalidTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreTypeMismatch")
  public static var persistentStoreTypeMismatchError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreIncompatibleSchema")
  public static var persistentStoreIncompatibleSchemaError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreSave")
  public static var persistentStoreSaveError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreIncompleteSave")
  public static var persistentStoreIncompleteSaveError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreSaveConflicts")
  public static var persistentStoreSaveConflictsError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "coreData")
  public static var coreDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreOperation")
  public static var persistentStoreOperationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreOpen")
  public static var persistentStoreOpenError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreTimeout")
  public static var persistentStoreTimeoutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreUnsupportedRequestType")
  public static var persistentStoreUnsupportedRequestTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreIncompatibleVersionHash")
  public static var persistentStoreIncompatibleVersionHashError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migration")
  public static var migrationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationCancelled")
  public static var migrationCancelledError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationMissingSourceModel")
  public static var migrationMissingSourceModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationMissingMappingModel")
  public static var migrationMissingMappingModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationManagerSourceStore")
  public static var migrationManagerSourceStoreError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationManagerDestinationStore")
  public static var migrationManagerDestinationStoreError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "entityMigrationPolicy")
  public static var entityMigrationPolicyError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sqlite")
  public static var sqliteError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "inferredMappingModel")
  public static var inferredMappingModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "externalRecordImport")
  public static var externalRecordImportError: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError {
  public static var managedObjectValidation: Foundation.CocoaError.Code {
    get
  }
  public static var validationMultipleErrors: Foundation.CocoaError.Code {
    get
  }
  public static var validationMissingMandatoryProperty: Foundation.CocoaError.Code {
    get
  }
  public static var validationRelationshipLacksMinimumCount: Foundation.CocoaError.Code {
    get
  }
  public static var validationRelationshipExceedsMaximumCount: Foundation.CocoaError.Code {
    get
  }
  public static var validationRelationshipDeniedDelete: Foundation.CocoaError.Code {
    get
  }
  public static var validationNumberTooLarge: Foundation.CocoaError.Code {
    get
  }
  public static var validationNumberTooSmall: Foundation.CocoaError.Code {
    get
  }
  public static var validationDateTooLate: Foundation.CocoaError.Code {
    get
  }
  public static var validationDateTooSoon: Foundation.CocoaError.Code {
    get
  }
  public static var validationInvalidDate: Foundation.CocoaError.Code {
    get
  }
  public static var validationStringTooLong: Foundation.CocoaError.Code {
    get
  }
  public static var validationStringTooShort: Foundation.CocoaError.Code {
    get
  }
  public static var validationStringPatternMatching: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectContextLocking: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreCoordinatorLocking: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectReferentialIntegrity: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectExternalRelationship: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectMerge: Foundation.CocoaError.Code {
    get
  }
  public static var managedObjectConstraintMerge: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreInvalidType: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreTypeMismatch: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreIncompatibleSchema: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreSave: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreIncompleteSave: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreSaveConflicts: Foundation.CocoaError.Code {
    get
  }
  public static var coreData: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreOperation: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreOpen: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreTimeout: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreUnsupportedRequestType: Foundation.CocoaError.Code {
    get
  }
  public static var persistentStoreIncompatibleVersionHash: Foundation.CocoaError.Code {
    get
  }
  public static var migration: Foundation.CocoaError.Code {
    get
  }
  public static var migrationCancelled: Foundation.CocoaError.Code {
    get
  }
  public static var migrationMissingSourceModel: Foundation.CocoaError.Code {
    get
  }
  public static var migrationMissingMappingModel: Foundation.CocoaError.Code {
    get
  }
  public static var migrationManagerSourceStore: Foundation.CocoaError.Code {
    get
  }
  public static var migrationManagerDestinationStore: Foundation.CocoaError.Code {
    get
  }
  public static var entityMigrationPolicy: Foundation.CocoaError.Code {
    get
  }
  public static var sqlite: Foundation.CocoaError.Code {
    get
  }
  public static var inferredMappingModel: Foundation.CocoaError.Code {
    get
  }
  public static var externalRecordImport: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError {
  @available(*, deprecated, renamed: "managedObjectValidation")
  public static var managedObjectValidationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationMultipleErrors")
  public static var validationMultipleErrorsError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationMissingMandatoryProperty")
  public static var validationMissingMandatoryPropertyError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationRelationshipLacksMinimumCount")
  public static var validationRelationshipLacksMinimumCountError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationRelationshipExceedsMaximumCount")
  public static var validationRelationshipExceedsMaximumCountError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationRelationshipDeniedDelete")
  public static var validationRelationshipDeniedDeleteError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationNumberTooLarge")
  public static var validationNumberTooLargeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationNumberTooSmall")
  public static var validationNumberTooSmallError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationDateTooLate")
  public static var validationDateTooLateError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationDateTooSoon")
  public static var validationDateTooSoonError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationInvalidDate")
  public static var validationInvalidDateError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationStringTooLong")
  public static var validationStringTooLongError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationStringTooShort")
  public static var validationStringTooShortError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "validationStringPatternMatching")
  public static var validationStringPatternMatchingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectContextLocking")
  public static var managedObjectContextLockingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreCoordinatorLocking")
  public static var persistentStoreCoordinatorLockingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectReferentialIntegrity")
  public static var managedObjectReferentialIntegrityError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectExternalRelationship")
  public static var managedObjectExternalRelationshipError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectMerge")
  public static var managedObjectMergeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "managedObjectConstraintMerge")
  public static var managedObjectConstraintMergeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreInvalidType")
  public static var persistentStoreInvalidTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreTypeMismatch")
  public static var persistentStoreTypeMismatchError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreIncompatibleSchema")
  public static var persistentStoreIncompatibleSchemaError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreSave")
  public static var persistentStoreSaveError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreIncompleteSave")
  public static var persistentStoreIncompleteSaveError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreSaveConflicts")
  public static var persistentStoreSaveConflictsError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "coreData")
  public static var coreDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreOperation")
  public static var persistentStoreOperationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreOpen")
  public static var persistentStoreOpenError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreTimeout")
  public static var persistentStoreTimeoutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreUnsupportedRequestType")
  public static var persistentStoreUnsupportedRequestTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "persistentStoreIncompatibleVersionHash")
  public static var persistentStoreIncompatibleVersionHashError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migration")
  public static var migrationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationCancelled")
  public static var migrationCancelledError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationMissingSourceModel")
  public static var migrationMissingSourceModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationMissingMappingModel")
  public static var migrationMissingMappingModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationManagerSourceStore")
  public static var migrationManagerSourceStoreError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "migrationManagerDestinationStore")
  public static var migrationManagerDestinationStoreError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "entityMigrationPolicy")
  public static var entityMigrationPolicyError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sqlite")
  public static var sqliteError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "inferredMappingModel")
  public static var inferredMappingModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "externalRecordImport")
  public static var externalRecordImportError: Foundation.CocoaError.Code {
    get
  }
}
extension CocoaError {
  public var validationObject: Any? {
    get
  }
  public var validationKey: Swift.String? {
    get
  }
  public var validationPredicate: Foundation.NSPredicate? {
    get
  }
  public var validationValue: Any? {
    get
  }
  public var affectedStores: [Swift.AnyObject]? {
    get
  }
  public var affectedObjects: [Swift.AnyObject]? {
    get
  }
  public var persistentStoreSaveConflicts: [CoreData.NSMergeConflict]? {
    get
  }
}
extension CocoaError {
  @available(*, unavailable, renamed: "managedObjectValidation")
  public static var ManagedObjectValidationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationMultipleErrors")
  public static var ValidationMultipleErrorsError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationMissingMandatoryProperty")
  public static var ValidationMissingMandatoryPropertyError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationRelationshipLacksMinimumCount")
  public static var ValidationRelationshipLacksMinimumCountError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationRelationshipExceedsMaximumCount")
  public static var ValidationRelationshipExceedsMaximumCountError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationRelationshipDeniedDelete")
  public static var ValidationRelationshipDeniedDeleteError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationNumberTooLarge")
  public static var ValidationNumberTooLargeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationNumberTooSmall")
  public static var ValidationNumberTooSmallError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationDateTooLate")
  public static var ValidationDateTooLateError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationDateTooSoon")
  public static var ValidationDateTooSoonError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationInvalidDate")
  public static var ValidationInvalidDateError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationStringTooLong")
  public static var ValidationStringTooLongError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationStringTooShort")
  public static var ValidationStringTooShortError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "validationStringPatternMatching")
  public static var ValidationStringPatternMatchingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "managedObjectContextLocking")
  public static var ManagedObjectContextLockingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreCoordinatorLocking")
  public static var PersistentStoreCoordinatorLockingError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "managedObjectReferentialIntegrity")
  public static var ManagedObjectReferentialIntegrityError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "managedObjectExternalRelationship")
  public static var ManagedObjectExternalRelationshipError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "managedObjectMerge")
  public static var ManagedObjectMergeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "managedObjectConstraintMerge")
  public static var ManagedObjectConstraintMergeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreInvalidType")
  public static var PersistentStoreInvalidTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreTypeMismatch")
  public static var PersistentStoreTypeMismatchError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreIncompatibleSchema")
  public static var PersistentStoreIncompatibleSchemaError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreSave")
  public static var PersistentStoreSaveError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreIncompleteSave")
  public static var PersistentStoreIncompleteSaveError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreSaveConflicts")
  public static var PersistentStoreSaveConflictsError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "coreData")
  public static var CoreDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreOperation")
  public static var PersistentStoreOperationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreOpen")
  public static var PersistentStoreOpenError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreTimeout")
  public static var PersistentStoreTimeoutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreUnsupportedRequestType")
  public static var PersistentStoreUnsupportedRequestTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "persistentStoreIncompatibleVersionHash")
  public static var PersistentStoreIncompatibleVersionHashError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "migration")
  public static var MigrationError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "migrationCancelled")
  public static var MigrationCancelledError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "migrationMissingSourceModel")
  public static var MigrationMissingSourceModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "migrationMissingMappingModel")
  public static var MigrationMissingMappingModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "migrationManagerSourceStore")
  public static var MigrationManagerSourceStoreError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "migrationManagerDestinationStore")
  public static var MigrationManagerDestinationStoreError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "entityMigrationPolicy")
  public static var EntityMigrationPolicyError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "sqlite")
  public static var SQLiteError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "inferredMappingModel")
  public static var InferredMappingModelError: Foundation.CocoaError.Code {
    get
  }
  @available(*, unavailable, renamed: "externalRecordImport")
  public static var ExternalRecordImportError: Foundation.CocoaError.Code {
    get
  }
}
extension NSManagedObjectContext {
  public func fetch<T>(_ request: CoreData.NSFetchRequest<T>) throws -> [T] where T : CoreData.NSFetchRequestResult
  public func count<T>(for request: CoreData.NSFetchRequest<T>) throws -> Swift.Int where T : CoreData.NSFetchRequestResult
}
@available(iOS 14.0, *)
extension NSManagedObjectContext {
  public static let willSaveObjectsNotification: Foundation.Notification.Name
  public static let didSaveObjectsNotification: Foundation.Notification.Name
  public static let didChangeObjectsNotification: Foundation.Notification.Name
  public static let didSaveObjectIDsNotification: Foundation.Notification.Name
  public static let didMergeChangesObjectIDsNotification: Foundation.Notification.Name
  public enum NotificationKey : Swift.String {
    case queryGeneration
    case invalidatedAllObjects
    case insertedObjects
    case updatedObjects
    case deletedObjects
    case refreshedObjects
    case invalidatedObjects
    case insertedObjectIDs
    case updatedObjectIDs
    case deletedObjectIDs
    case refreshedObjectIDs
    case invalidatedObjectIDs
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@available(iOS 14.0, *)
extension CoreData.NSManagedObjectContext.NotificationKey : Swift.Equatable {}
@available(iOS 14.0, *)
extension CoreData.NSManagedObjectContext.NotificationKey : Swift.Hashable {}
@available(iOS 14.0, *)
extension CoreData.NSManagedObjectContext.NotificationKey : Swift.RawRepresentable {}
