// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.24.14 clang-1205.0.19.54)
// swift-module-flags: -target arm64e-apple-ios14.5 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftUniformTypeIdentifiers -swift-version 5 -enforce-exclusivity=checked -O -module-name UniformTypeIdentifiers
import Foundation
import Swift
@_exported import UniformTypeIdentifiers
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension URLResourceValues {
  public var contentType: UniformTypeIdentifiers.UTType? {
    get
  }
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension URL {
  public func appendingPathComponent(_ partialName: Swift.String, conformingTo contentType: UniformTypeIdentifiers.UTType) -> Foundation.URL
  public mutating func appendPathComponent(_ partialName: Swift.String, conformingTo contentType: UniformTypeIdentifiers.UTType)
  public func appendingPathExtension(for contentType: UniformTypeIdentifiers.UTType) -> Foundation.URL
  public mutating func appendPathExtension(for contentType: UniformTypeIdentifiers.UTType)
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension String {
  @available(*, unavailable, message: "Use appendingPathExtension(for:) on URL instead.")
  public func appendingPathExtension(for contentType: UniformTypeIdentifiers.UTType) -> Swift.Never
  @available(*, unavailable, message: "Use appendingPathComponent(_:conformingTo:) on URL instead.")
  public func appendingPathComponent(_ partialName: Swift.String, conformingTo contentType: UniformTypeIdentifiers.UTType) -> Swift.Never
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
public struct UTType {
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType {
  public init?(_ identifier: Swift.String)
  public init?(filenameExtension: Swift.String, conformingTo supertype: UniformTypeIdentifiers.UTType = .data)
  public init?(mimeType: Swift.String, conformingTo supertype: UniformTypeIdentifiers.UTType = .data)
  public var identifier: Swift.String {
    get
  }
  public var preferredFilenameExtension: Swift.String? {
    get
  }
  public var preferredMIMEType: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String? {
    get
  }
  public var version: Swift.Int? {
    get
  }
  public var referenceURL: Foundation.URL? {
    get
  }
  public var isDynamic: Swift.Bool {
    get
  }
  public var isDeclared: Swift.Bool {
    get
  }
  public var isPublic: Swift.Bool {
    get
  }
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType {
  public func conforms(to type: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public func isSupertype(of type: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public func isSubtype(of type: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public var supertypes: Swift.Set<UniformTypeIdentifiers.UTType> {
    get
  }
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType {
  public init?(tag: Swift.String, tagClass: UniformTypeIdentifiers.UTTagClass, conformingTo supertype: UniformTypeIdentifiers.UTType?)
  public static func types(tag: Swift.String, tagClass: UniformTypeIdentifiers.UTTagClass, conformingTo supertype: UniformTypeIdentifiers.UTType?) -> [UniformTypeIdentifiers.UTType]
  public var tags: [UniformTypeIdentifiers.UTTagClass : [Swift.String]] {
    get
  }
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType {
  public init(exportedAs identifier: Swift.String, conformingTo parentType: UniformTypeIdentifiers.UTType? = nil)
  public init(importedAs identifier: Swift.String, conformingTo parentType: UniformTypeIdentifiers.UTType? = nil)
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: UniformTypeIdentifiers.UTType, rhs: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType : Foundation.ReferenceConvertible {
  public typealias ReferenceType = UniformTypeIdentifiers.UTTypeReference
  public func _bridgeToObjectiveC() -> UniformTypeIdentifiers.UTTypeReference
  public static func _forceBridgeFromObjectiveC(_ source: UniformTypeIdentifiers.UTTypeReference, result: inout UniformTypeIdentifiers.UTType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: UniformTypeIdentifiers.UTTypeReference, result: inout UniformTypeIdentifiers.UTType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: UniformTypeIdentifiers.UTTypeReference?) -> UniformTypeIdentifiers.UTType
  public typealias _ObjectiveCType = UniformTypeIdentifiers.UTTypeReference
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTType {
  public static let item: UniformTypeIdentifiers.UTType
  public static let content: UniformTypeIdentifiers.UTType
  public static let compositeContent: UniformTypeIdentifiers.UTType
  public static let diskImage: UniformTypeIdentifiers.UTType
  public static let data: UniformTypeIdentifiers.UTType
  public static let directory: UniformTypeIdentifiers.UTType
  public static let resolvable: UniformTypeIdentifiers.UTType
  public static let symbolicLink: UniformTypeIdentifiers.UTType
  public static let executable: UniformTypeIdentifiers.UTType
  public static let mountPoint: UniformTypeIdentifiers.UTType
  public static let aliasFile: UniformTypeIdentifiers.UTType
  public static let urlBookmarkData: UniformTypeIdentifiers.UTType
  public static let url: UniformTypeIdentifiers.UTType
  public static let fileURL: UniformTypeIdentifiers.UTType
  public static let text: UniformTypeIdentifiers.UTType
  public static let plainText: UniformTypeIdentifiers.UTType
  public static let utf8PlainText: UniformTypeIdentifiers.UTType
  public static let utf16ExternalPlainText: UniformTypeIdentifiers.UTType
  public static let utf16PlainText: UniformTypeIdentifiers.UTType
  public static let delimitedText: UniformTypeIdentifiers.UTType
  public static let commaSeparatedText: UniformTypeIdentifiers.UTType
  public static let tabSeparatedText: UniformTypeIdentifiers.UTType
  public static let utf8TabSeparatedText: UniformTypeIdentifiers.UTType
  public static let rtf: UniformTypeIdentifiers.UTType
  public static let html: UniformTypeIdentifiers.UTType
  public static let xml: UniformTypeIdentifiers.UTType
  public static let yaml: UniformTypeIdentifiers.UTType
  public static let sourceCode: UniformTypeIdentifiers.UTType
  public static let assemblyLanguageSource: UniformTypeIdentifiers.UTType
  public static let cSource: UniformTypeIdentifiers.UTType
  public static let objectiveCSource: UniformTypeIdentifiers.UTType
  public static let swiftSource: UniformTypeIdentifiers.UTType
  public static let cPlusPlusSource: UniformTypeIdentifiers.UTType
  public static let objectiveCPlusPlusSource: UniformTypeIdentifiers.UTType
  public static let cHeader: UniformTypeIdentifiers.UTType
  public static let cPlusPlusHeader: UniformTypeIdentifiers.UTType
  public static let script: UniformTypeIdentifiers.UTType
  public static let appleScript: UniformTypeIdentifiers.UTType
  public static let osaScript: UniformTypeIdentifiers.UTType
  public static let osaScriptBundle: UniformTypeIdentifiers.UTType
  public static let javaScript: UniformTypeIdentifiers.UTType
  public static let shellScript: UniformTypeIdentifiers.UTType
  public static let perlScript: UniformTypeIdentifiers.UTType
  public static let pythonScript: UniformTypeIdentifiers.UTType
  public static let rubyScript: UniformTypeIdentifiers.UTType
  public static let phpScript: UniformTypeIdentifiers.UTType
  public static let json: UniformTypeIdentifiers.UTType
  public static let propertyList: UniformTypeIdentifiers.UTType
  public static let xmlPropertyList: UniformTypeIdentifiers.UTType
  public static let binaryPropertyList: UniformTypeIdentifiers.UTType
  public static let pdf: UniformTypeIdentifiers.UTType
  public static let rtfd: UniformTypeIdentifiers.UTType
  public static let flatRTFD: UniformTypeIdentifiers.UTType
  public static let webArchive: UniformTypeIdentifiers.UTType
  public static let image: UniformTypeIdentifiers.UTType
  public static let jpeg: UniformTypeIdentifiers.UTType
  public static let tiff: UniformTypeIdentifiers.UTType
  public static let gif: UniformTypeIdentifiers.UTType
  public static let png: UniformTypeIdentifiers.UTType
  public static let icns: UniformTypeIdentifiers.UTType
  public static let bmp: UniformTypeIdentifiers.UTType
  public static let ico: UniformTypeIdentifiers.UTType
  public static let rawImage: UniformTypeIdentifiers.UTType
  public static let svg: UniformTypeIdentifiers.UTType
  public static let livePhoto: UniformTypeIdentifiers.UTType
  public static let heif: UniformTypeIdentifiers.UTType
  public static let heic: UniformTypeIdentifiers.UTType
  public static let webP: UniformTypeIdentifiers.UTType
  public static let threeDContent: UniformTypeIdentifiers.UTType
  public static let usd: UniformTypeIdentifiers.UTType
  public static let usdz: UniformTypeIdentifiers.UTType
  public static let realityFile: UniformTypeIdentifiers.UTType
  public static let sceneKitScene: UniformTypeIdentifiers.UTType
  public static let arReferenceObject: UniformTypeIdentifiers.UTType
  public static let audiovisualContent: UniformTypeIdentifiers.UTType
  public static let movie: UniformTypeIdentifiers.UTType
  public static let video: UniformTypeIdentifiers.UTType
  public static let audio: UniformTypeIdentifiers.UTType
  public static let quickTimeMovie: UniformTypeIdentifiers.UTType
  public static let mpeg: UniformTypeIdentifiers.UTType
  public static let mpeg2Video: UniformTypeIdentifiers.UTType
  public static let mpeg2TransportStream: UniformTypeIdentifiers.UTType
  public static let mp3: UniformTypeIdentifiers.UTType
  public static let mpeg4Movie: UniformTypeIdentifiers.UTType
  public static let mpeg4Audio: UniformTypeIdentifiers.UTType
  public static let appleProtectedMPEG4Audio: UniformTypeIdentifiers.UTType
  public static let appleProtectedMPEG4Video: UniformTypeIdentifiers.UTType
  public static let avi: UniformTypeIdentifiers.UTType
  public static let aiff: UniformTypeIdentifiers.UTType
  public static let wav: UniformTypeIdentifiers.UTType
  public static let midi: UniformTypeIdentifiers.UTType
  public static let playlist: UniformTypeIdentifiers.UTType
  public static let m3uPlaylist: UniformTypeIdentifiers.UTType
  public static let folder: UniformTypeIdentifiers.UTType
  public static let volume: UniformTypeIdentifiers.UTType
  public static let package: UniformTypeIdentifiers.UTType
  public static let bundle: UniformTypeIdentifiers.UTType
  public static let pluginBundle: UniformTypeIdentifiers.UTType
  public static let spotlightImporter: UniformTypeIdentifiers.UTType
  public static let quickLookGenerator: UniformTypeIdentifiers.UTType
  public static let xpcService: UniformTypeIdentifiers.UTType
  public static let framework: UniformTypeIdentifiers.UTType
  public static let application: UniformTypeIdentifiers.UTType
  public static let applicationBundle: UniformTypeIdentifiers.UTType
  public static let applicationExtension: UniformTypeIdentifiers.UTType
  public static let unixExecutable: UniformTypeIdentifiers.UTType
  public static let exe: UniformTypeIdentifiers.UTType
  public static let systemPreferencesPane: UniformTypeIdentifiers.UTType
  public static let archive: UniformTypeIdentifiers.UTType
  public static let gzip: UniformTypeIdentifiers.UTType
  public static let bz2: UniformTypeIdentifiers.UTType
  public static let zip: UniformTypeIdentifiers.UTType
  public static let appleArchive: UniformTypeIdentifiers.UTType
  public static let spreadsheet: UniformTypeIdentifiers.UTType
  public static let presentation: UniformTypeIdentifiers.UTType
  public static let database: UniformTypeIdentifiers.UTType
  public static let message: UniformTypeIdentifiers.UTType
  public static let contact: UniformTypeIdentifiers.UTType
  public static let vCard: UniformTypeIdentifiers.UTType
  public static let toDoItem: UniformTypeIdentifiers.UTType
  public static let calendarEvent: UniformTypeIdentifiers.UTType
  public static let emailMessage: UniformTypeIdentifiers.UTType
  public static let internetLocation: UniformTypeIdentifiers.UTType
  public static let internetShortcut: UniformTypeIdentifiers.UTType
  public static let font: UniformTypeIdentifiers.UTType
  public static let bookmark: UniformTypeIdentifiers.UTType
  public static let pkcs12: UniformTypeIdentifiers.UTType
  public static let x509Certificate: UniformTypeIdentifiers.UTType
  public static let epub: UniformTypeIdentifiers.UTType
  public static let log: UniformTypeIdentifiers.UTType
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
public struct UTTagClass : Swift.RawRepresentable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTTagClass {
  public static let filenameExtension: UniformTypeIdentifiers.UTTagClass
  public static let mimeType: UniformTypeIdentifiers.UTTagClass
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTTagClass : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: UniformTypeIdentifiers.UTTagClass, rhs: UniformTypeIdentifiers.UTTagClass) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTTagClass : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UTTagClass : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
