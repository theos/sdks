// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.24.14 clang-1205.0.19.54)
// swift-module-flags: -target armv7s-apple-ios10.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreNFC -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreNFC
@_exported import CoreNFC
import Swift
@available(iOS 14.0, *)
public struct NFCISO15693SystemInfo {
  public var uniqueIdentifier: Foundation.Data
  public var dataStorageFormatIdentifier: Swift.Int
  public var applicationFamilyIdentifier: Swift.Int
  public var blockSize: Swift.Int
  public var totalBlocks: Swift.Int
  public var icReference: Swift.Int
  public init(uniqueIdentifier _uniqueIdentifier: Foundation.Data, dataStorageFormatIdentifier _dataStorageFormatIdentifier: Swift.Int, applicationFamilyIdentifier _applicationFamilyIdentifier: Swift.Int, blockSize _blockSize: Swift.Int, totalBlocks _totalBlocks: Swift.Int, icReference _icReference: Swift.Int)
}
@available(iOS 14.0, *)
public struct NFCISO15693MultipleBlockSecurityStatus {
  public var blockSecurityStatus: [Swift.Int]
  public init(blockSecurityStatus _blockSecurityStatus: [Swift.Int])
}
@available(iOS 11.0, *)
extension NFCISO15693Tag {
  @available(iOS 14.0, *)
  public func readSingleBlock(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockNumber: Swift.UInt8, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func readMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func getSystemInfo(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO15693SystemInfo, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func fastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func customCommand(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, customCommandCode: Swift.Int, customRequestParameters: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func extendedReadSingleBlock(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockNumber: Swift.Int, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func extendedWriteMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, dataBlocks: [Foundation.Data], completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  @available(iOS 14.0, *)
  public func authenticate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func keyUpdate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, keyIdentifier: Swift.Int, message: Foundation.Data, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func challenge(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  @available(iOS 14.0, *)
  public func readBuffer(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func extendedGetMultipleBlockSecurityStatus(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO15693MultipleBlockSecurityStatus, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func extendedFastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func sendRequest(requestFlags flags: Swift.Int, commandCode: Swift.Int, data: Foundation.Data?, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data?), Swift.Error>) -> Swift.Void)
}
@available(iOS 13.0, *)
extension NFCTagReaderSession {
  @available(iOS 13.0, *)
  open var connectedTag: CoreNFC.NFCTag? {
    get
  }
  @available(iOS 13.0, *)
  convenience public init?(pollingOption: CoreNFC.NFCTagReaderSession.PollingOption, delegate: CoreNFC.NFCTagReaderSessionDelegate, queue: Dispatch.DispatchQueue? = nil)
  @available(iOS 13.0, *)
  open func connect(to tag: CoreNFC.NFCTag, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
}
@available(iOS 14.0, *)
public struct NFCISO7816ResponseAPDU {
  public var statusWord1: Swift.UInt8
  public var statusWord2: Swift.UInt8
  public var payload: Foundation.Data?
  public init(statusWord1 _statusWord1: Swift.UInt8, statusWord2 _statusWord2: Swift.UInt8, paylaod _paylaod: Foundation.Data?)
}
@available(iOS 14.0, *)
extension NFCISO7816Tag {
  @available(iOS 14.0, *)
  public func sendCommand(apdu: CoreNFC.NFCISO7816APDU, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO7816ResponseAPDU, Swift.Error>) -> Swift.Void)
}
@available(iOS 11.0, *)
extension NFCNDEFPayload {
  @available(iOS 13.0, *)
  open func wellKnownTypeTextPayload() -> (Swift.String?, Foundation.Locale?)
}
@available(iOS 14.0, *)
extension NFCMiFareTag {
  @available(iOS 14.0, *)
  public func sendMiFareCommand(commandPacket command: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func sendMiFareISO7816Command(_ apdu: CoreNFC.NFCISO7816APDU, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO7816ResponseAPDU, Swift.Error>) -> Swift.Void)
}
@available(iOS 13.0, *)
public protocol NFCTagReaderSessionDelegate : ObjectiveC.NSObjectProtocol {
  @available(iOS 13.0, *)
  func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 14.0, *)
public struct NFCFeliCaPollingResponse {
  public var manufactureParameter: Foundation.Data
  public var requestData: Foundation.Data?
  public init(manufactureParameter _manufactureParameter: Foundation.Data, requestData _requestData: Foundation.Data?)
}
@available(iOS 14.0, *)
public struct NFCFeliCaStatusFlag {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int)
}
@available(iOS 14.0, *)
public struct NFCFeliCaRequsetServiceV2Response {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public var encryptionIdentifier: CoreNFC.NFCFeliCaEncryptionId
  public var nodeKeyVersionListAES: [Foundation.Data]?
  public var nodeKeyVersionListDES: [Foundation.Data]?
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int, encryptionIdentifier _encryptionIdentifier: CoreNFC.NFCFeliCaEncryptionId, nodeKeyVersionListAES _nodeKeyVersionListAES: [Foundation.Data]?, nodeKeyVersionListDES _nodeKeyVersionListDES: [Foundation.Data]?)
}
@available(iOS 14.0, *)
public struct NFCFeliCaRequestSpecificationVersionResponse {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public var basicVersion: Foundation.Data?
  public var optionVersion: Foundation.Data?
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int, basicVersion _basicVersion: Foundation.Data?, optionVersion _optionVersion: Foundation.Data?)
}
@available(iOS 14.0, *)
extension NFCFeliCaTag {
  @available(iOS 14.0, *)
  public func polling(systemCode: Foundation.Data, requestCode: CoreNFC.NFCFeliCaPollingRequestCode, timeSlot: CoreNFC.NFCFeliCaPollingTimeSlot, resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaPollingResponse, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestService(nodeCodeList: [Foundation.Data], resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestResponse(resultHandler: @escaping (Swift.Result<Swift.Int, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func readWithoutEncryption(serviceCodeList: [Foundation.Data], blockList: [Foundation.Data], resultHandler: @escaping (Swift.Result<(CoreNFC.NFCFeliCaStatusFlag, [Foundation.Data]), Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func writeWithoutEncryption(serviceCodeList: [Foundation.Data], blockList: [Foundation.Data], blockData: [Foundation.Data], resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaStatusFlag, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestSystemCode(resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestServiceV2(nodeCodeList: [Foundation.Data], resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaRequsetServiceV2Response, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestSpecificationVersion(resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaRequestSpecificationVersionResponse, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func resetMode(resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaStatusFlag, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func sendFeliCaCommand(commandPacket: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
}
@available(iOS 13.0, *)
public enum NFCTag {
  case feliCa(CoreNFC.NFCFeliCaTag)
  case iso7816(CoreNFC.NFCISO7816Tag)
  case iso15693(CoreNFC.NFCISO15693Tag)
  case miFare(CoreNFC.NFCMiFareTag)
  public var isAvailable: Swift.Bool {
    get
  }
}
