// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.24.14 clang-1205.0.19.54)
// swift-module-flags: -target armv7-apple-ios10.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCloudKit -swift-version 5 -enforce-exclusivity=checked -O -module-name CloudKit
@_exported import CloudKit
import Foundation
import Swift
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CKSubscription.NotificationInfo {
  @available(swift 4.2)
  @available(tvOS, unavailable)
  public var alertLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS 10.13, iOS 11.0, *)
  @available(tvOS, unavailable)
  public var titleLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS 10.13, iOS 11.0, *)
  @available(tvOS, unavailable)
  public var subtitleLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  convenience public init(alertBody: Swift.String? = nil, alertLocalizationKey: Swift.String? = nil, alertLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], title: Swift.String? = nil, titleLocalizationKey: Swift.String? = nil, titleLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], subtitle: Swift.String? = nil, subtitleLocalizationKey: Swift.String? = nil, subtitleLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], alertActionLocalizationKey: Swift.String? = nil, alertLaunchImage: Swift.String? = nil, soundName: Swift.String? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey] = [], shouldBadge: Swift.Bool = false, shouldSendContentAvailable: Swift.Bool = false, shouldSendMutableContent: Swift.Bool = false, category: Swift.String? = nil, collapseIDKey: Swift.String? = nil)
}
@available(macOS 10.14, iOS 12.0, tvOS 12.0, watchOS 5.0, *)
@nonobjc extension CKFetchRecordZoneChangesOperation.ZoneConfiguration {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  convenience public init(previousServerChangeToken: CloudKit.CKServerChangeToken? = nil, resultsLimit: Swift.Int? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil)
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CKShare {
  @available(swift 4.2)
  public enum SystemFieldKey {
    public static let title: CloudKit.CKRecord.FieldKey
    public static let thumbnailImageData: CloudKit.CKRecord.FieldKey
    public static let shareType: CloudKit.CKRecord.FieldKey
  }
}
@available(macOS 10.12, iOS 9.3, tvOS 9.2, watchOS 3.0, *)
@nonobjc extension CKContainer {
  @available(swift 4.2)
  public func fetchAllLongLivedOperationIDs(completionHandler: @escaping ([CloudKit.CKOperation.ID]?, Swift.Error?) -> Swift.Void)
  @available(swift 4.2)
  public func fetchLongLivedOperation(withID operationID: CloudKit.CKOperation.ID, completionHandler: @escaping (CloudKit.CKOperation?, Swift.Error?) -> Swift.Void)
}
@available(macOS 10.12, iOS 9.3, tvOS 9.2, watchOS 3.0, *)
@nonobjc extension CKOperation {
  @available(swift 4.2)
  public var operationID: CloudKit.CKOperation.ID {
    get
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CKModifySubscriptionsOperation {
  @available(swift 4.2)
  public var subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]? {
    get
    set
  }
  @available(swift 4.2)
  public var modifySubscriptionsCompletionBlock: (([CloudKit.CKSubscription]?, [CloudKit.CKSubscription.ID]?, Swift.Error?) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CKFetchSubscriptionsOperation {
  @available(swift 4.2)
  convenience public init(subscriptionIDs: [CloudKit.CKSubscription.ID])
  @available(swift 4.2)
  public var subscriptionIDs: [CloudKit.CKSubscription.ID]? {
    get
    set
  }
  @available(swift 4.2)
  public var fetchSubscriptionCompletionBlock: (([CloudKit.CKSubscription.ID : CloudKit.CKSubscription]?, Swift.Error?) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CKDatabase {
  @available(swift 4.2)
  public func fetch(withSubscriptionID subscriptionID: CloudKit.CKSubscription.ID, completionHandler: @escaping (CloudKit.CKSubscription?, Swift.Error?) -> Swift.Void)
  @available(swift 4.2)
  public func delete(withSubscriptionID subscriptionID: CloudKit.CKSubscription.ID, completionHandler: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CKSubscription {
  @available(swift 4.2)
  public var subscriptionID: CloudKit.CKSubscription.ID {
    get
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CKQuerySubscription {
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CKRecordZoneSubscription {
  @available(swift 4.2)
  convenience public init(zoneID: CloudKit.CKRecordZone.ID, subscriptionID: CloudKit.CKSubscription.ID)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CKDatabaseSubscription {
  @available(swift 4.2)
  convenience public init(subscriptionID: CloudKit.CKSubscription.ID)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
    set
  }
}
@available(macOS 10.11, iOS 9.0, watchOS 3.0, *)
@nonobjc extension CKNotification {
  @available(swift 4.2)
  public var subscriptionID: CloudKit.CKSubscription.ID? {
    get
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CKFetchRecordZoneChangesOperation {
  @available(swift 4.2)
  public var recordWithIDWasDeletedBlock: ((CloudKit.CKRecord.ID, CloudKit.CKRecord.RecordType) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKQuery {
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, predicate: Foundation.NSPredicate)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType {
    get
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecord {
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType {
    get
  }
  @available(swift 4.2)
  public func object(forKey key: CloudKit.CKRecord.FieldKey) -> CloudKit.__CKRecordObjCValue?
  @available(swift 4.2)
  public func setObject(_ object: CloudKit.__CKRecordObjCValue?, forKey key: CloudKit.CKRecord.FieldKey)
  @available(swift 4.2)
  public subscript(key: CloudKit.CKRecord.FieldKey) -> CloudKit.__CKRecordObjCValue? {
    get
    set
  }
  @available(swift 4.2)
  public func allKeys() -> [CloudKit.CKRecord.FieldKey]
  @available(swift 4.2)
  public func changedKeys() -> [CloudKit.CKRecord.FieldKey]
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CKFetchShareMetadataOperation {
  @available(swift 4.2)
  public var rootRecordDesiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKFetchRecordsOperation {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKQueryOperation {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemType.userRecord")
@nonobjc public let CKRecordTypeUserRecord: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemFieldKey.parent")
@nonobjc public let CKRecordParentKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemFieldKey.share")
@nonobjc public let CKRecordShareKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemType.share")
@nonobjc public let CKRecordTypeShare: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.title")
@nonobjc public let CKShareTitleKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.thumbnailImageData")
@nonobjc public let CKShareThumbnailImageDataKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.shareType")
@nonobjc public let CKShareTypeKey: Swift.String
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecord.ID {
  @available(swift 4.2)
  convenience public init(recordName: Swift.String = UUID().uuidString, zoneID: CloudKit.CKRecordZone.ID = CKRecordZone.ID.default)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
public struct CKRecordKeyValueIterator : Swift.IteratorProtocol {
  public mutating func next() -> (CloudKit.CKRecord.FieldKey, CloudKit.CKRecordValueProtocol)?
  public typealias Element = (Swift.String, CloudKit.CKRecordValueProtocol)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecord : Swift.Sequence {
  public func makeIterator() -> CloudKit.CKRecordKeyValueIterator
  public typealias Element = (Swift.String, CloudKit.CKRecordValueProtocol)
  public typealias Iterator = CloudKit.CKRecordKeyValueIterator
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecord {
  public typealias RecordType = Swift.String
  public typealias FieldKey = Swift.String
  @available(swift 4.2)
  public enum SystemType {
    public static let userRecord: CloudKit.CKRecord.RecordType
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let share: CloudKit.CKRecord.RecordType
  }
  @available(swift 4.2)
  public enum SystemFieldKey {
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let parent: CloudKit.CKRecord.RecordType
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let share: CloudKit.CKRecord.RecordType
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CKShare.Participant {
  @available(swift 4.2)
  public typealias AcceptanceStatus = CloudKit.CKShare_Participant_AcceptanceStatus
  @available(swift 4.2)
  public typealias Permission = CloudKit.CKShare_Participant_Permission
  @available(swift 4.2)
  @available(macOS 10.14, iOS 12.0, tvOS 12.0, watchOS 5.0, *)
  public typealias Role = CloudKit.CKShare_Participant_Role
  @available(swift 4.2)
  @available(macOS, deprecated: 10.14, renamed: "CKShare.Participant.Role")
  @available(iOS, deprecated: 12.0, renamed: "CKShare.Participant.Role")
  @available(tvOS, deprecated: 12.0, renamed: "CKShare.Participant.Role")
  @available(watchOS, deprecated: 5.0, renamed: "CKShare.Participant.Role")
  public typealias ParticipantType = CloudKit.CKShare_Participant_ParticipantType
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecord.Reference {
  @available(swift 4.2)
  public typealias Action = CloudKit.CKRecord_Reference_Action
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKContainer {
  @available(swift 4.2)
  public enum Application {
    public typealias Permissions = CloudKit.CKContainer_Application_Permissions
    public typealias PermissionStatus = CloudKit.CKContainer_Application_PermissionStatus
    public typealias PermissionBlock = CloudKit.CKContainer_Application_PermissionBlock
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKOperation {
  @available(swift 4.2)
  public typealias ID = Swift.String
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension CKSubscription {
  @available(swift 4.2)
  public typealias ID = Swift.String
}
@available(macOS 10.14, iOS 12.0, tvOS 12.0, watchOS 5.0, *)
@nonobjc extension CKFetchRecordZoneChangesOperation {
  @available(swift 4.2)
  convenience public init(recordZoneIDs: [CloudKit.CKRecordZone.ID]? = nil, configurationsByRecordZoneID: [CloudKit.CKRecordZone.ID : CloudKit.CKFetchRecordZoneChangesOperation.ZoneConfiguration]? = nil)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKModifyRecordZonesOperation {
  @available(swift 4.2)
  convenience public init(recordZonesToSave: [CloudKit.CKRecordZone]? = nil, recordZoneIDsToDelete: [CloudKit.CKRecordZone.ID]? = nil)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKModifyRecordsOperation {
  @available(swift 4.2)
  convenience public init(recordsToSave: [CloudKit.CKRecord]? = nil, recordIDsToDelete: [CloudKit.CKRecord.ID]? = nil)
}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CKModifySubscriptionsOperation {
  @available(swift 4.2)
  convenience public init(subscriptionsToSave: [CloudKit.CKSubscription]? = nil, subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]? = nil)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecord {
  @available(swift, introduced: 4.2, deprecated: 4.2, message: "Use init(recordType:recordID:) + CKRecord.ID(zoneID:) instead")
  convenience public init(recordType: CloudKit.CKRecord.RecordType, zoneID: CloudKit.CKRecordZone.ID)
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, recordID: CloudKit.CKRecord.ID = CKRecord.ID())
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CKQuerySubscription {
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, predicate: Foundation.NSPredicate, subscriptionID: CloudKit.CKSubscription.ID = UUID().uuidString, options querySubscriptionOptions: CloudKit.CKQuerySubscription.Options = [])
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension CKError {
  public var partialErrorsByItemID: [Swift.AnyHashable : Swift.Error]? {
    get
  }
  public var ancestorRecord: CloudKit.CKRecord? {
    get
  }
  public var serverRecord: CloudKit.CKRecord? {
    get
  }
  public var clientRecord: CloudKit.CKRecord? {
    get
  }
  public var retryAfterSeconds: Swift.Double? {
    get
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecordZone.ID {
  convenience public init(zoneName: Swift.String = CKRecordZone.ID.defaultZoneName, ownerName: Swift.String = CKCurrentUserDefaultName)
  public static let `default`: CloudKit.CKRecordZone.ID
  public static let defaultZoneName: Swift.String
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecordZone.ID.defaultZoneName")
@nonobjc public let CKRecordZoneDefaultName: Swift.String
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
public protocol CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
public typealias CKRecordValue = CloudKit.__CKRecordObjCValue
@available(macOS 10.11, iOS 9.0, watchOS 3.0, *)
extension CKRecordKeyValueSetting {
  @nonobjc public subscript<T>(key: CloudKit.CKRecord.FieldKey) -> T? where T : CloudKit.CKRecordValueProtocol {
    get
    set
  }
  @nonobjc public subscript(key: CloudKit.CKRecord.FieldKey) -> CloudKit.CKRecordValueProtocol? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension String : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Date : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Data : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Bool : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Double : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Int : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension UInt : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Int8 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension UInt8 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Int16 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension UInt16 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Int32 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension UInt32 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Int64 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension UInt64 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Float : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Array : CloudKit.CKRecordValueProtocol where Element : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension NSString : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension NSDate : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension NSData : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension NSNumber : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension NSArray : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKRecord.Reference : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CKAsset : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CLLocation : CloudKit.CKRecordValueProtocol {
}
