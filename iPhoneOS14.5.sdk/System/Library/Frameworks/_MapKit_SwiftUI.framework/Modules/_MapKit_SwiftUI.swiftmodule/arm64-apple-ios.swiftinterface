// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.24.14 clang-1205.0.19.54)
// swift-module-flags: -target arm64-apple-ios14.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name _MapKit_SwiftUI
@_exported import MapKit
import Swift
import SwiftUI
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public protocol MapAnnotationProtocol {
  var _annotationData: _MapKit_SwiftUI._MapAnnotationData { get }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct MapAnnotation<Content> : _MapKit_SwiftUI.MapAnnotationProtocol where Content : SwiftUI.View {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, anchorPoint: CoreGraphics.CGPoint = CGPoint(x: 0.5, y: 0.5), @SwiftUI.ViewBuilder content: () -> Content)
  public var _annotationData: _MapKit_SwiftUI._MapAnnotationData {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct MapPin : _MapKit_SwiftUI.MapAnnotationProtocol {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, tint: SwiftUI.Color? = nil)
  public var _annotationData: _MapKit_SwiftUI._MapAnnotationData {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct MapMarker : _MapKit_SwiftUI.MapAnnotationProtocol {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, tint: SwiftUI.Color? = nil)
  public var _annotationData: _MapKit_SwiftUI._MapAnnotationData {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct _MapAnnotationData {
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct Map<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init<Items, Annotation>(mapRect: SwiftUI.Binding<MapKit.MKMapRect>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil, annotationItems: Items, annotationContent: @escaping (Items.Element) -> Annotation) where Content == _MapKit_SwiftUI._DefaultAnnotatedMapContent<Items>, Items : Swift.RandomAccessCollection, Annotation : _MapKit_SwiftUI.MapAnnotationProtocol, Items.Element : Swift.Identifiable
  public init<Items, Annotation>(coordinateRegion: SwiftUI.Binding<MapKit.MKCoordinateRegion>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil, annotationItems: Items, annotationContent: @escaping (Items.Element) -> Annotation) where Content == _MapKit_SwiftUI._DefaultAnnotatedMapContent<Items>, Items : Swift.RandomAccessCollection, Annotation : _MapKit_SwiftUI.MapAnnotationProtocol, Items.Element : Swift.Identifiable
  public init(mapRect: SwiftUI.Binding<MapKit.MKMapRect>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil) where Content == _MapKit_SwiftUI._DefaultMapContent
  public init(coordinateRegion: SwiftUI.Binding<MapKit.MKCoordinateRegion>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil) where Content == _MapKit_SwiftUI._DefaultMapContent
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A0V4bodyQrvp", 0) ðŸ¦¸<Content>
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public enum MapUserTrackingMode {
  case none
  case follow
  public static func == (a: _MapKit_SwiftUI.MapUserTrackingMode, b: _MapKit_SwiftUI.MapUserTrackingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct MapInteractionModes : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let pan: _MapKit_SwiftUI.MapInteractionModes
  public static let zoom: _MapKit_SwiftUI.MapInteractionModes
  public static let all: _MapKit_SwiftUI.MapInteractionModes
  public typealias ArrayLiteralElement = _MapKit_SwiftUI.MapInteractionModes
  public typealias Element = _MapKit_SwiftUI.MapInteractionModes
  public typealias RawValue = Swift.Int
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct _DefaultAnnotatedMapContent<Items> : SwiftUI.View where Items : Swift.RandomAccessCollection, Items.Element : Swift.Identifiable {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI017_DefaultAnnotatedA7ContentV4bodyQrvp", 0) ðŸ¦¸<Items>
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct _DefaultMapContent : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI08_DefaultA7ContentV4bodyQrvp", 0) ðŸ¦¸
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension _MapKit_SwiftUI.MapUserTrackingMode : Swift.Equatable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension _MapKit_SwiftUI.MapUserTrackingMode : Swift.Hashable {}
