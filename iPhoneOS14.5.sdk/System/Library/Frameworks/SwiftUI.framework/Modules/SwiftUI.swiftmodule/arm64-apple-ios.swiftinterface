// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.24.14 clang-1205.0.19.54)
// swift-module-flags: -target arm64-apple-ios14.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name SwiftUI
import Combine
import CoreData
import CoreFoundation
import CoreGraphics
import Darwin
@_exported import DeveloperToolsSupport
import Foundation
import Swift
@_exported import SwiftUI
import UIKit
import UniformTypeIdentifiers
import os.log
import os
import os.signpost
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentWriteConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let existingFile: Foundation.FileWrapper?
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentReadConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let file: Foundation.FileWrapper
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ButtonGesture : SwiftUI.Gesture {
  public var action: () -> Swift.Void
  public var pressingAction: ((Swift.Bool) -> Swift.Void)?
  public init(action: @escaping () -> Swift.Void, pressing: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._ButtonGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Swift.Void>
  public typealias Body = Swift.Never
  public typealias Value = ()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _onButtonGesture(pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DatePickerStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: SwiftUI.DatePicker<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._DatePickerStyleLabel
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _DatePickerStyleLabel : SwiftUI.View {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func datePickerStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.DatePickerStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum __App {
}
extension __App {
  public static func run<V>(_ rootView: V) -> Swift.Never where V : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _TestApp {
  public init()
  public func run() -> Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func sheet<Item, Content>(item: SwiftUI.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  public func sheet<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension View {
  public func fullScreenCover<Item, Content>(item: SwiftUI.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  @available(*, deprecated, renamed: "fullScreenCover(item:onDismiss:content:)")
  public func _cover<Item, Content>(item: SwiftUI.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  public func fullScreenCover<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  @available(*, deprecated, renamed: "fullScreenCover(isPresented:onDismiss:content:)")
  public func _cover<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func _trait<K>(_ key: K.Type, _ value: K.Value) -> some SwiftUI.View where K : SwiftUI._ViewTraitKey {
        return modifier(_TraitWritingModifier<K>(value: value))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTraitKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TraitWritingModifier<Trait> where Trait : SwiftUI._ViewTraitKey {
  public let value: Trait.Value
  @inlinable public init(value: Trait.Value) {
        self.value = value
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._TraitWritingModifier<Trait>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._TraitWritingModifier<Trait>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
public struct LongPressGesture : SwiftUI.Gesture {
  public var minimumDuration: Swift.Double
  @available(tvOS, unavailable)
  public var maximumDistance: CoreGraphics.CGFloat {
    get
    set
  }
  @available(tvOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreGraphics.CGFloat = 10)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.LongPressGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Swift.Bool>
  public typealias Body = Swift.Never
  public typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
extension View {
  @available(tvOS, unavailable)
  public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreGraphics.CGFloat = 10, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _BenchmarkHost : AnyObject {
  func _renderForTest(interval: Swift.Double)
  func _performScrollTest(startOffset: CoreGraphics.CGFloat, iterations: Swift.Int, delta: CoreGraphics.CGFloat, length: CoreGraphics.CGFloat, completion: (() -> Swift.Void)?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Benchmark : SwiftUI._Test {
  func measure(host: SwiftUI._BenchmarkHost) -> [Swift.Double]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _BenchmarkHost {
  public func _performScrollTest(startOffset: CoreGraphics.CGFloat, iterations: Swift.Int, delta: CoreGraphics.CGFloat, length: CoreGraphics.CGFloat, completion: (() -> Swift.Void)?)
  public func measureAction(action: () -> Swift.Void) -> Swift.Double
  public func measureRender(interval: Swift.Double = 1.0 / 60.0) -> Swift.Double
  public func measureRenders(seconds: Swift.Double) -> [Swift.Double]
  public func measureRenders(duration: Swift.Double) -> [Swift.Double]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _TestApp {
  public func runBenchmarks(_ benchmarks: [SwiftUI._Benchmark]) -> Swift.Never
}
extension _TestApp {
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  @available(macOS, unavailable)
  public func runPerformanceTests(_ tests: [SwiftUI._PerformanceTest]) -> Swift.Never
}
extension View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _onEnvironmentChange<Value>(_ keyPath: Swift.KeyPath<SwiftUI.EnvironmentValues, Value>, perform action: @escaping (Value) -> Swift.Void) -> some SwiftUI.View where Value : Swift.Equatable
  
}
extension View {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  @available(watchOS, unavailable)
  public func disableAutocorrection(_ disable: Swift.Bool?) -> some SwiftUI.View
  
}
extension EnvironmentValues {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  @available(watchOS, unavailable)
  public var disableAutocorrection: Swift.Bool? {
    get
    set
  }
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol IndexViewStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _makeBody(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._IndexViewStyleConfiguration
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func indexViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.IndexViewStyle
  
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct _IndexViewStyleConfiguration {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct ScaledMetric<Value> : SwiftUI.DynamicProperty where Value : Swift.BinaryFloatingPoint {
  public init(wrappedValue: Value, relativeTo textStyle: SwiftUI.Font.TextStyle)
  public init(wrappedValue: Value)
  public var wrappedValue: Value {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@available(*, deprecated, message: "Use @ScaledMetric")
@propertyWrapper public struct _ScaledValue : SwiftUI.DynamicProperty {
  public init(wrappedValue: CoreGraphics.CGFloat, textStyle: SwiftUI.Font.TextStyle = .body)
  public var wrappedValue: CoreGraphics.CGFloat {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneInputs {
}
@available(*, deprecated, message: "Use Label instead.")
public struct _ActionLabel<Icon, Title> : SwiftUI.View where Icon : SwiftUI.View, Title : SwiftUI.View {
  public var icon: Icon
  public var title: Title
  public init(@SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder title: () -> Title)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12_ActionLabelV4bodyQrvp", 0) 🦸<Icon, Title>
}
@available(*, deprecated, message: "Use Label instead.")
extension _ActionLabel where Title == SwiftUI.Text {
  public init(_ title: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder icon: () -> Icon)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder icon: () -> Icon) where S : Swift.StringProtocol
}
@available(*, deprecated, message: "Use Label instead.")
extension _ActionLabel where Icon == SwiftUI.Image, Title == SwiftUI.Text {
  public init(_ title: SwiftUI.LocalizedStringKey, icon: Swift.String)
  public init(_ title: SwiftUI.LocalizedStringKey, systemIcon: Swift.String)
  @_disfavoredOverload public init<S>(_ title: S, icon: Swift.String) where S : Swift.StringProtocol
  @_disfavoredOverload public init<S>(_ title: S, systemIcon: Swift.String) where S : Swift.StringProtocol
}
@available(*, deprecated, message: "Use Label instead.")
extension _ActionLabel where Icon == SwiftUI._ActionLabelStyleConfiguration.Icon, Title == SwiftUI._ActionLabelStyleConfiguration.Title {
  public init(_ configuration: SwiftUI._ActionLabelStyleConfiguration)
}
@available(*, deprecated, message: "Use Label & LabelStyle instead.")
public protocol _ActionLabelStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI._ActionLabelStyleConfiguration
}
@available(*, deprecated, message: "Use Label & LabelStyle instead.")
public struct _ActionLabelStyleConfiguration {
  public struct Icon : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let icon: SwiftUI._ActionLabelStyleConfiguration.Icon
  public struct Title : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let title: SwiftUI._ActionLabelStyleConfiguration.Title
}
@available(*, deprecated, message: "Use Label & LabelStyle instead.")
extension View {
  public func _actionLabelStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI._ActionLabelStyle
  
}
@available(iOS, unavailable)
@available(macOS, deprecated, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias PullDownButton = SwiftUI._PullDownButton
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _PullDownButton<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._PullDownButton<Label, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS, unavailable)
@available(macOS, deprecated, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PullDownButton where Label == SwiftUI.Text {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _PullDownButtonContainer<Label> : SwiftUI._VariadicView.UnaryViewRoot where Label : SwiftUI.View {
  public func body(children: SwiftUI._VariadicView.Children) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24_PullDownButtonContainerV4body8childrenQrAA22_VariadicView_ChildrenV_tF", 0) 🦸<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EdgeInsets : Swift.Equatable {
  public var top: CoreGraphics.CGFloat
  public var leading: CoreGraphics.CGFloat
  public var bottom: CoreGraphics.CGFloat
  public var trailing: CoreGraphics.CGFloat
  @inlinable public init(top: CoreGraphics.CGFloat, leading: CoreGraphics.CGFloat, bottom: CoreGraphics.CGFloat, trailing: CoreGraphics.CGFloat) {
        self.top = top
        self.leading = leading
        self.bottom = bottom
        self.trailing = trailing
    }
  @inlinable public init() {
        self.init(top: 0, leading: 0, bottom: 0, trailing: 0)
    }
  public static func == (a: SwiftUI.EdgeInsets, b: SwiftUI.EdgeInsets) -> Swift.Bool
}
extension EdgeInsets {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  internal init(_all: CoreGraphics.CGFloat)
}
extension EdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ nsEdgeInsets: UIKit.NSDirectionalEdgeInsets)
}
extension NSDirectionalEdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ edgeInsets: SwiftUI.EdgeInsets)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EdgeInsets : SwiftUI.Animatable, SwiftUI._VectorMath {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>>
  public var animatableData: SwiftUI.EdgeInsets.AnimatableData {
    @inlinable get {
            return .init(top, .init(leading, .init(bottom, trailing)))
        }
    @inlinable set {
            let top = newValue[].0
            let leading = newValue[].1[].0
            let (bottom, trailing) = newValue[].1[].1[]
            self = .init(
                top: top, leading: leading, bottom: bottom, trailing: trailing)
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol GeometryEffect : SwiftUI.Animatable, SwiftUI.ViewModifier where Self.Body == Swift.Never {
  func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  static var _affectsLayout: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension GeometryEffect {
  public static var _affectsLayout: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension GeometryEffect {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ItemProviderTraitKey : SwiftUI._ViewTraitKey {
  @usableFromInline
  internal typealias Value = Swift.Optional<() -> Foundation.NSItemProvider?>
  @inlinable internal static var defaultValue: SwiftUI.ItemProviderTraitKey.Value {
    get { nil }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func itemProvider(_ action: Swift.Optional<() -> Foundation.NSItemProvider?>) -> some SwiftUI.View {
        return _trait(ItemProviderTraitKey.self, action)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Toggle<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(isOn: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ToggleV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Toggle where Label == SwiftUI.ToggleStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public init(_ configuration: SwiftUI.ToggleStyleConfiguration)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Toggle where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, isOn: SwiftUI.Binding<Swift.Bool>)
  @_disfavoredOverload public init<S>(_ title: S, isOn: SwiftUI.Binding<Swift.Bool>) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _Velocity<Value> : Swift.Equatable where Value : Swift.Equatable {
  public var valuePerSecond: Value
  @inlinable public init(valuePerSecond: Value) {
        self.valuePerSecond = valuePerSecond
    }
  public static func == (a: SwiftUI._Velocity<Value>, b: SwiftUI._Velocity<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Velocity : Swift.Comparable where Value : Swift.Comparable {
  public static func < (lhs: SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Velocity : SwiftUI.Animatable where Value : SwiftUI.Animatable {
  public typealias AnimatableData = Value.AnimatableData
  public var animatableData: SwiftUI._Velocity<Value>.AnimatableData {
    @inlinable get { return valuePerSecond.animatableData }
    @inlinable set { valuePerSecond.animatableData = newValue }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Velocity : Swift.AdditiveArithmetic where Value : Swift.AdditiveArithmetic {
  @inlinable public init() {
        self.init(valuePerSecond: .zero)
    }
  @inlinable public static var zero: SwiftUI._Velocity<Value> {
    get {
        return .init(valuePerSecond: .zero)
    }
  }
  @inlinable public static func += (lhs: inout SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) {
        lhs.valuePerSecond += rhs.valuePerSecond
    }
  @inlinable public static func -= (lhs: inout SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) {
        lhs.valuePerSecond -= rhs.valuePerSecond
    }
  @inlinable public static func + (lhs: SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) -> SwiftUI._Velocity<Value> {
        var r = lhs; r += rhs; return r
    }
  @inlinable public static func - (lhs: SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) -> SwiftUI._Velocity<Value> {
        var r = lhs; r -= rhs; return r
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Velocity : SwiftUI.VectorArithmetic where Value : SwiftUI.VectorArithmetic {
  @inlinable public mutating func scale(by rhs: Swift.Double) {
        valuePerSecond.scale(by: rhs)
    }
  @inlinable public var magnitudeSquared: Swift.Double {
    get {
        return valuePerSecond.magnitudeSquared
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnDeleteTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet) -> Swift.Void> {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet) -> Swift.Void>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicViewContent {
  @inlinable public func onDelete(perform action: Swift.Optional<(Foundation.IndexSet) -> Swift.Void>) -> some SwiftUI.DynamicViewContent {
        return modifier(_TraitWritingModifier<OnDeleteTraitKey>(value: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsDeleteDisabledTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func deleteDisabled(_ isDisabled: Swift.Bool) -> some SwiftUI.View {
        return _trait(IsDeleteDisabledTraitKey.self, isDisabled)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Color : Swift.Hashable, Swift.CustomStringConvertible {
  private var provider: SwiftUI.AnyColorBox
  @available(iOS 14.0, macOS 11, tvOS 14.0, watchOS 7.0, *)
  public var cgColor: CoreGraphics.CGColor? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.Color, rhs: SwiftUI.Color) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color : SwiftUI.View {
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyColorBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static func spring(response: Swift.Double = 0.55, dampingFraction: Swift.Double = 0.825, blendDuration: Swift.Double = 0) -> SwiftUI.Animation
  public static func interactiveSpring(response: Swift.Double = 0.15, dampingFraction: Swift.Double = 0.86, blendDuration: Swift.Double = 0.25) -> SwiftUI.Animation
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol MenuButtonStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._MenuButtonStyleConfiguration
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _MenuButtonStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public var label: SwiftUI._MenuButtonStyleConfiguration.Label
  public var content: SwiftUI._MenuButtonStyleConfiguration.Content
  public init()
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(_:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func menuButtonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.MenuButtonStyle
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol _PullDownButtonStyle {
  static func _makeView<Label>(value: SwiftUI._GraphValue<SwiftUI._PullDownButtonValue<Self, Label>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where Label : SwiftUI.View
  static func _makeViewList<Label>(value: SwiftUI._GraphValue<SwiftUI._PullDownButtonValue<Self, Label>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where Label : SwiftUI.View
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _PullDownButtonValue<Style, Label> where Style : SwiftUI._PullDownButtonStyle, Label : SwiftUI.View {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func _pullDownButtonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI._PullDownButtonStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Color {
  public init(_ cgColor: CoreGraphics.CGColor)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public static var _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil, label: SwiftUI.Text)
  public init(decorative name: Swift.String, bundle: Foundation.Bundle? = nil)
  @available(macOS 11.0, *)
  public init(systemName: Swift.String)
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_internalSystemName systemName: Swift.String)
}
extension Image {
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_systemName systemName: Swift.String, colorPalette: [SwiftUI.Color]? = nil)
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_internalSystemName systemName: Swift.String, colorPalette: [SwiftUI.Color]? = nil)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct Namespace : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var id: Swift.Int
  @inlinable public init() { id = 0 }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  public var wrappedValue: SwiftUI.Namespace.ID {
    get
  }
  @frozen public struct ID : Swift.Hashable {
    fileprivate var id: Swift.Int
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUI.Namespace.ID, b: SwiftUI.Namespace.ID) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _WidgetInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Text : Swift.Equatable {
  @usableFromInline
  @frozen internal enum Storage : Swift.Equatable {
    case verbatim(Swift.String)
    case anyTextStorage(SwiftUI.AnyTextStorage)
    @usableFromInline
    internal static func == (lhs: SwiftUI.Text.Storage, rhs: SwiftUI.Text.Storage) -> Swift.Bool
  }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  @frozen internal enum Modifier : Swift.Equatable {
    case color(SwiftUI.Color?)
    case font(SwiftUI.Font?)
    case italic
    case weight(SwiftUI.Font.Weight?)
    case kerning(CoreGraphics.CGFloat)
    case tracking(CoreGraphics.CGFloat)
    case baseline(CoreGraphics.CGFloat)
    case rounded
    case anyTextModifier(SwiftUI.AnyTextModifier)
    @usableFromInline
    internal static func == (lhs: SwiftUI.Text.Modifier, rhs: SwiftUI.Text.Modifier) -> Swift.Bool
  }
  @usableFromInline
  internal var storage: SwiftUI.Text.Storage
  @usableFromInline
  internal var modifiers: [SwiftUI.Text.Modifier] = [Modifier]()
  @inlinable public init(verbatim content: Swift.String) {
        storage = .verbatim(content)
    }
  @_disfavoredOverload public init<S>(_ content: S) where S : Swift.StringProtocol
  public static func == (a: SwiftUI.Text, b: SwiftUI.Text) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyTextStorage {
  @objc @usableFromInline
  deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyTextModifier {
  @objc @usableFromInline
  deinit
}
extension Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _resolveText(in environment: SwiftUI.EnvironmentValues) -> Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public enum _LocalizationInfo : Swift.Equatable {
  case none
  case verbatim(Swift.String)
  case localized(key: Swift.String, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, hasFormatting: Swift.Bool = false)
  public static func == (a: SwiftUI._LocalizationInfo, b: SwiftUI._LocalizationInfo) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Text {
  public var _localizationInfo: SwiftUI._LocalizationInfo {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnMoveTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void> {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicViewContent {
  @inlinable public func onMove(perform action: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>) -> some SwiftUI.DynamicViewContent {
        modifier(_TraitWritingModifier<OnMoveTraitKey>(value: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsMoveDisabledTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func moveDisabled(_ isDisabled: Swift.Bool) -> some SwiftUI.View {
        return _trait(IsMoveDisabledTraitKey.self, isDisabled)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TrimmedShape<S> : SwiftUI.Shape where S : SwiftUI.Shape {
  public var shape: S
  public var startFraction: CoreGraphics.CGFloat
  public var endFraction: CoreGraphics.CGFloat
  @inlinable public init(shape: S, startFraction: CoreGraphics.CGFloat = 0, endFraction: CoreGraphics.CGFloat = 1) {
        self.shape = shape
        self.startFraction = startFraction
        self.endFraction = endFraction
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.AnimatablePair<S.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>
  public var animatableData: SwiftUI._TrimmedShape<S>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI._TrimmedShape<S>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func trim(from startFraction: CoreGraphics.CGFloat = 0, to endFraction: CoreGraphics.CGFloat = 1) -> some SwiftUI.Shape {
        return _TrimmedShape(shape: self, startFraction: startFraction,
            endFraction: endFraction)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Font : Swift.Hashable {
  private var provider: SwiftUI.AnyFontBox
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.Font, rhs: SwiftUI.Font) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyFontBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ContentSizeCategory : Swift.Hashable, Swift.CaseIterable {
  case extraSmall
  case small
  case medium
  case large
  case extraLarge
  case extraExtraLarge
  case extraExtraExtraLarge
  case accessibilityMedium
  case accessibilityLarge
  case accessibilityExtraLarge
  case accessibilityExtraExtraLarge
  case accessibilityExtraExtraExtraLarge
  @available(iOS 13.4, macOS 10.15.4, tvOS 13.4, watchOS 6.2, *)
  public var isAccessibilityCategory: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.ContentSizeCategory, b: SwiftUI.ContentSizeCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ContentSizeCategory]
  public static var allCases: [SwiftUI.ContentSizeCategory] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ContentSizeCategory {
  @_alwaysEmitIntoClient public static func < (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        func comparisonValue(for sizeCategory: Self) -> Int {
            switch sizeCategory {
            case .extraSmall: return 0
            case .small: return 1
            case .medium: return 2
            case .large: return 3
            case .extraLarge: return 4
            case .extraExtraLarge: return 5
            case .extraExtraExtraLarge: return 6
            case .accessibilityMedium: return 7
            case .accessibilityLarge: return 8
            case .accessibilityExtraLarge: return 9
            case .accessibilityExtraExtraLarge: return 10
            case .accessibilityExtraExtraExtraLarge: return 11
            @unknown default: return 3
            }
        }
        return comparisonValue(for: lhs) < comparisonValue(for: rhs)
    }
  @_alwaysEmitIntoClient public static func <= (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        !(rhs < lhs)
    }
  @_alwaysEmitIntoClient public static func > (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        rhs < lhs
    }
  @_alwaysEmitIntoClient public static func >= (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        !(lhs < rhs)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var sizeCategory: SwiftUI.ContentSizeCategory {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Never {
  public typealias Body = Swift.Never
  public var body: Swift.Never {
    get
  }
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrag(_ data: @escaping () -> Foundation.NSItemProvider) -> some SwiftUI.View
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _DraggingModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DraggingModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.DefaultTextFieldStyle._Label>) -> SwiftUI.DefaultTextFieldStyle._Body
  public struct _Body : SwiftUI.View {
    public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21DefaultTextFieldStyleV5_BodyV4bodyQrvp", 0) 🦸
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityActionKind : Swift.Equatable {
  public static let `default`: SwiftUI.AccessibilityActionKind
  public static let escape: SwiftUI.AccessibilityActionKind
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  public static let magicTap: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let delete: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let showMenu: SwiftUI.AccessibilityActionKind
  public init(named name: SwiftUI.Text)
  public static func == (a: SwiftUI.AccessibilityActionKind, b: SwiftUI.AccessibilityActionKind) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityAction(named name: SwiftUI.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityAction(named name: SwiftUI.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func accessibilityAction(named nameKey: SwiftUI.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAction(named nameKey: SwiftUI.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol TabViewStyle {
  static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _TabViewValue<Style, SelectionValue> where Style : SwiftUI.TabViewStyle, SelectionValue : Swift.Hashable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func tabViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.TabViewStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct SafeAreaRegions : Swift.OptionSet {
  public let rawValue: Swift.UInt
  @inlinable public init(rawValue: Swift.UInt) { self.rawValue = rawValue }
  public static let container: SwiftUI.SafeAreaRegions
  public static let keyboard: SwiftUI.SafeAreaRegions
  public static let all: SwiftUI.SafeAreaRegions
  public typealias ArrayLiteralElement = SwiftUI.SafeAreaRegions
  public typealias Element = SwiftUI.SafeAreaRegions
  public typealias RawValue = Swift.UInt
}
extension View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _safeAreaInsets(_ insets: SwiftUI.EdgeInsets) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ImagePaint : SwiftUI.ShapeStyle {
  public var image: SwiftUI.Image
  public var sourceRect: CoreGraphics.CGRect
  public var scale: CoreGraphics.CGFloat
  public init(image: SwiftUI.Image, sourceRect: CoreGraphics.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreGraphics.CGFloat = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PrimitiveButtonStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.PrimitiveButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PrimitiveButtonStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.PrimitiveButtonStyleConfiguration.Label
  public func trigger()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func buttonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.PrimitiveButtonStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ArchivedViewStates : Swift.RandomAccessCollection {
  public init()
  public init(data: Foundation.Data) throws
  public init(contentsOf url: Foundation.URL) throws
  public init(contentsOf file: Foundation.FileHandle) throws
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUI._ArchivedView {
    get
  }
  public func state(at index: Swift.Int) throws -> SwiftUI._ArchivedView
  public var auxiliaryData: Foundation.Data? {
    get
  }
  public typealias Element = SwiftUI._ArchivedView
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ArchivedViewStates>
  public typealias SubSequence = Swift.Slice<SwiftUI._ArchivedViewStates>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ArchivedView : SwiftUI.View {
  public init()
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ArchivedView>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EmptyView : SwiftUI.View {
  @inlinable public init() {}
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.EmptyView>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.EmptyView>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _AnimatableView : SwiftUI.Animatable, SwiftUI.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _AnimatableView {
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SubscriptionView<PublisherType, Content> : SwiftUI.View where PublisherType : Combine.Publisher, Content : SwiftUI.View, PublisherType.Failure == Swift.Never {
  public var content: Content
  public var publisher: PublisherType
  public var action: (PublisherType.Output) -> Swift.Void
  @inlinable public init(content: Content, publisher: PublisherType, action: @escaping (PublisherType.Output) -> Swift.Void) {
        self.content = content
        self.publisher = publisher
        self.action = action
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func onReceive<P>(_ publisher: P, perform action: @escaping (P.Output) -> Swift.Void) -> some SwiftUI.View where P : Combine.Publisher, P.Failure == Swift.Never {
        SubscriptionView(content: self, publisher: publisher, action: action)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewTest {
  public typealias Touch = (location: CoreGraphics.CGPoint, globalLocation: CoreGraphics.CGPoint?, timestamp: Foundation.Date)
  public func sendTouchSequence(_ touches: [Self.Touch])
  public func measureTouchSequence(host: SwiftUI._BenchmarkHost, _ touches: [Self.Touch]) -> [Swift.Double]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  @inlinable public func sequenced<Other>(before other: Other) -> SwiftUI.SequenceGesture<Self, Other> where Other : SwiftUI.Gesture {
        return SequenceGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SequenceGesture<First, Second> : SwiftUI.Gesture where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(First.Value, Second.Value?)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.SequenceGesture<First, Second>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.SequenceGesture<First, Second>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SequenceGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SequenceGesture<First, Second>.Value, b: SwiftUI.SequenceGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct OffsetShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var offset: CoreGraphics.CGSize
  @inlinable public init(shape: Content, offset: CoreGraphics.CGSize) {
        self.shape = shape
        self.offset = offset
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.AnimatablePair<Content.AnimatableData, CoreGraphics.CGSize.AnimatableData>
  public var animatableData: SwiftUI.OffsetShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.OffsetShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension OffsetShape : SwiftUI.InsettableShape where Content : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.OffsetShape<Content.InsetShape> {
        return shape.inset(by: amount).offset(offset)
    }
  public typealias InsetShape = SwiftUI.OffsetShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ScaledShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var scale: CoreGraphics.CGSize
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(shape: Content, scale: CoreGraphics.CGSize, anchor: SwiftUI.UnitPoint = .center) {
        self.shape = shape
        self.scale = scale
        self.anchor = anchor
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.AnimatablePair<Content.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGSize.AnimatableData, SwiftUI.UnitPoint.AnimatableData>>
  public var animatableData: SwiftUI.ScaledShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.ScaledShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct RotatedShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var angle: SwiftUI.Angle
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(shape: Content, angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) {
        self.shape = shape
        self.angle = angle
        self.anchor = anchor
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.AnimatablePair<Content.AnimatableData, SwiftUI.AnimatablePair<SwiftUI.Angle.AnimatableData, SwiftUI.UnitPoint.AnimatableData>>
  public var animatableData: SwiftUI.RotatedShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.RotatedShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension RotatedShape : SwiftUI.InsettableShape where Content : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.RotatedShape<Content.InsetShape> {
        return shape.inset(by: amount).rotation(angle, anchor: anchor)
    }
  public typealias InsetShape = SwiftUI.RotatedShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct TransformedShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var transform: CoreGraphics.CGAffineTransform
  @inlinable public init(shape: Content, transform: CoreGraphics.CGAffineTransform) {
        self.shape = shape
        self.transform = transform
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = Content.AnimatableData
  public var animatableData: SwiftUI.TransformedShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.TransformedShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func offset(_ offset: CoreGraphics.CGSize) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: offset)
    }
  @inlinable public func offset(_ offset: CoreGraphics.CGPoint) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(
            shape: self, offset: CGSize(width: offset.x, height: offset.y))
    }
  @inlinable public func offset(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: .init(width: x, height: y))
    }
  @inlinable public func scale(x: CoreGraphics.CGFloat = 1, y: CoreGraphics.CGFloat = 1, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.ScaledShape<Self> {
        return ScaledShape(shape: self,
            scale: CGSize(width: x, height: y), anchor: anchor)
    }
  @inlinable public func scale(_ scale: CoreGraphics.CGFloat, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.ScaledShape<Self> {
        return self.scale(x: scale, y: scale, anchor: anchor)
    }
  @inlinable public func rotation(_ angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.RotatedShape<Self> {
        return RotatedShape(shape: self, angle: angle, anchor: anchor)
    }
  @inlinable public func transform(_ transform: CoreGraphics.CGAffineTransform) -> SwiftUI.TransformedShape<Self> {
        return TransformedShape(shape: self, transform: transform)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var managedObjectContext: CoreData.NSManagedObjectContext {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Rectangle : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct RoundedRectangle : SwiftUI.Shape {
  public var cornerSize: CoreGraphics.CGSize
  public var style: SwiftUI.RoundedCornerStyle
  @inlinable public init(cornerSize: CoreGraphics.CGSize, style: SwiftUI.RoundedCornerStyle = .circular) {
        self.cornerSize = cornerSize
        self.style = style
    }
  @inlinable public init(cornerRadius: CoreGraphics.CGFloat, style: SwiftUI.RoundedCornerStyle = .circular) {
        let cornerSize = CGSize(width: cornerRadius, height: cornerRadius)
        self.init(cornerSize: cornerSize, style: style)
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public var animatableData: CoreGraphics.CGSize.AnimatableData {
    get
    set
  }
  public typealias AnimatableData = CoreGraphics.CGSize.AnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.RoundedRectangle, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Capsule : SwiftUI.Shape {
  public var style: SwiftUI.RoundedCornerStyle
  @inlinable public init(style: SwiftUI.RoundedCornerStyle = .circular) {
        self.style = style
    }
  public func path(in r: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Capsule, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Ellipse : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Ellipse, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Circle : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Circle, SwiftUI.ForegroundStyle>
}
extension _UIHostingView {
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public func _makeUIHostingView<Content>(_ view: Content) -> ObjectiveC.NSObject where Content : SwiftUI.View
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ViewModifier {
  static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func body(content: Self.Content) -> Self.Body
  typealias Content = SwiftUI._ViewModifier_Content<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier where Self.Body == Swift.Never {
  public func body(content: Self.Content) -> Self.Body
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier where Self : SwiftUI._GraphInputsModifier, Self.Body == Swift.Never {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EmptyModifier : SwiftUI.ViewModifier {
  public static let identity: SwiftUI.EmptyModifier
  public typealias Body = Swift.Never
  @inlinable public init() {}
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI.EmptyModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI.EmptyModifier>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  public func body(content: SwiftUI.EmptyModifier.Content) -> SwiftUI.EmptyModifier.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func modifier<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ModifiedContent<Content, Modifier> {
  public typealias Body = Swift.Never
  public var content: Content
  public var modifier: Modifier
  @inlinable public init(content: Content, modifier: Modifier) {
        self.content = content
        self.modifier = modifier
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ModifiedContent : Swift.Equatable where Content : Swift.Equatable, Modifier : Swift.Equatable {
  public static func == (a: SwiftUI.ModifiedContent<Content, Modifier>, b: SwiftUI.ModifiedContent<Content, Modifier>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ModifiedContent : SwiftUI.View where Content : SwiftUI.View, Modifier : SwiftUI.ViewModifier {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public var body: SwiftUI.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ModifiedContent : SwiftUI.ViewModifier where Content : SwiftUI.ViewModifier, Modifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier {
  @inlinable public func concat<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct ContainerRelativeShape : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.ContainerRelativeShape, SwiftUI.ForegroundStyle>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ContainerRelativeShape : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.ContainerRelativeShape._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.ContainerRelativeShape._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.ContainerRelativeShape._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI22ContainerRelativeShapeV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ShapeStyle {
  public func _fillingContainerShape() -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func _containerShape<T>(_ shape: T) -> some SwiftUI.View where T : SwiftUI.InsettableShape
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct NavigationView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper public struct State<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUI.AnyLocation<Value>?
  public init(wrappedValue value: Value)
  @_alwaysEmitIntoClient public init(initialValue value: Value) {
        _value = value
    }
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension State where Value : Swift.ExpressibleByNilLiteral {
  @inlinable public init() {
        self.init(wrappedValue: nil)
    }
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SidebarListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public typealias __GridSpacing = SwiftUI.__GridLayout.Spacing
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __GridLayout {
  public struct Spacing {
    public var min: CoreGraphics.CGFloat
    public var max: CoreGraphics.CGFloat?
    public init(min: CoreGraphics.CGFloat = 0, max: CoreGraphics.CGFloat? = nil)
    public init(fixed: CoreGraphics.CGFloat)
  }
  public enum FillDirection {
    case horizontal, vertical
    public static func == (a: SwiftUI.__GridLayout.FillDirection, b: SwiftUI.__GridLayout.FillDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var itemSize: CoreGraphics.CGSize
  public var itemSpacing: SwiftUI.__GridLayout.Spacing
  public var lineSpacing: SwiftUI.__GridLayout.Spacing
  public var fillDirection: SwiftUI.__GridLayout.FillDirection
  public init(itemSize: CoreGraphics.CGSize, itemSpacing: CoreGraphics.CGFloat = 0, lineSpacing: CoreGraphics.CGFloat = 0, fillDirection: SwiftUI.__GridLayout.FillDirection = .horizontal)
  public init(itemSize: CoreGraphics.CGSize, itemSpacing: SwiftUI.__GridLayout.Spacing, lineSpacing: SwiftUI.__GridLayout.Spacing, fillDirection: SwiftUI.__GridLayout.FillDirection = .horizontal)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol DynamicViewContent : SwiftUI.View {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ForEach : SwiftUI.DynamicViewContent where Content : SwiftUI.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ModifiedContent : SwiftUI.DynamicViewContent where Content : SwiftUI.DynamicViewContent, Modifier : SwiftUI.ViewModifier {
  public var data: Content.Data {
    get
  }
  public typealias Data = Content.Data
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _OverlayLayout {
  public init(contentIndex: Swift.Int? = nil)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public protocol _UIHostingViewable : AnyObject {
  var rootView: SwiftUI.AnyView { get set }
  func _render(seconds: Swift.Double)
  func _forEachIdentifiedView(body: (SwiftUI._IdentifiedViewProxy) -> Swift.Void)
  func sizeThatFits(in size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  var _disableSafeArea: Swift.Bool { get set }
  var _rendererConfiguration: SwiftUI._RendererConfiguration { get set }
  var _rendererObject: Swift.AnyObject? { get }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension UIHostingController : SwiftUI._UIHostingViewable where Content == SwiftUI.AnyView {
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public func _makeUIHostingController(_ view: SwiftUI.AnyView) -> ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public func _makeWatchKitUIHostingController(_ view: SwiftUI.AnyView) -> ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _AccessibilityIgnoresInvertColorsViewModifier {
  public var active: Swift.Bool
  @inlinable public init(active: Swift.Bool) { self.active = active }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AccessibilityIgnoresInvertColorsViewModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  @inlinable public func accessibilityIgnoresInvertColors(_ active: Swift.Bool = true) -> some SwiftUI.View {
        return modifier(
            _AccessibilityIgnoresInvertColorsViewModifier(active: active))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutView<Data, Layout> : SwiftUI.View where Data : Swift.RandomAccessCollection, Layout : SwiftUI._ScrollableLayout, Data.Element : SwiftUI.View, Data.Index : Swift.Hashable {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ScrollableLayoutView<Data, Layout>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayoutView : SwiftUI._ScrollableContentProvider {
  public var scrollableContent: SwiftUI._ScrollableLayoutView<Data, Layout> {
    get
  }
  public func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._ScrollableLayoutView<Data, Layout>>
  public typealias ScrollableContent = SwiftUI._ScrollableLayoutView<Data, Layout>
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RotationGesture : SwiftUI.Gesture {
  public var minimumAngleDelta: SwiftUI.Angle
  public init(minimumAngleDelta: SwiftUI.Angle = .degrees(1))
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.RotationGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.Angle>
  public typealias Body = Swift.Never
  public typealias Value = SwiftUI.Angle
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var undoManager: Foundation.UndoManager? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AllowsHitTestingModifier : SwiftUI.ViewModifier, Swift.Equatable {
  public var allowsHitTesting: Swift.Bool
  @inlinable public init(allowsHitTesting: Swift.Bool) {
        self.allowsHitTesting = allowsHitTesting
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AllowsHitTestingModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._AllowsHitTestingModifier, b: SwiftUI._AllowsHitTestingModifier) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func allowsHitTesting(_ enabled: Swift.Bool) -> some SwiftUI.View {
        return modifier(_AllowsHitTestingModifier(allowsHitTesting: enabled))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AppearanceActionModifier : SwiftUI.ViewModifier {
  public var appear: (() -> Swift.Void)?
  public var disappear: (() -> Swift.Void)?
  @inlinable public init(appear: (() -> Swift.Void)? = nil, disappear: (() -> Swift.Void)? = nil) {
        self.appear = appear
        self.disappear = disappear
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AppearanceActionModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func onAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.View {
        return modifier(
            _AppearanceActionModifier(appear: action, disappear: nil))
    }
  
  @inlinable public func onDisappear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.View {
        return modifier(
            _AppearanceActionModifier(appear: nil, disappear: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func _ignoresAutomaticPadding(_ ignoresPadding: Swift.Bool) -> some SwiftUI.View
  
  public func _automaticPadding(_ edgeInsets: SwiftUI.EdgeInsets? = nil) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct SwitchToggleStyle : SwiftUI.ToggleStyle {
  public init()
  @available(iOS 14.0, macOS 11.0, watchOS 7.0, *)
  @available(tvOS, unavailable)
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.SwitchToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17SwitchToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextEditor : SwiftUI.View {
  public init(text: SwiftUI.Binding<Swift.String>)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10TextEditorV4bodyQrvp", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ProjectionTransform {
  public var m11: CoreGraphics.CGFloat = 1.0, m12: CoreGraphics.CGFloat = 0.0, m13: CoreGraphics.CGFloat = 0.0
  public var m21: CoreGraphics.CGFloat = 0.0, m22: CoreGraphics.CGFloat = 1.0, m23: CoreGraphics.CGFloat = 0.0
  public var m31: CoreGraphics.CGFloat = 0.0, m32: CoreGraphics.CGFloat = 0.0, m33: CoreGraphics.CGFloat = 1.0
  @inlinable public init() {}
  @inlinable public init(_ m: CoreGraphics.CGAffineTransform) {
        m11 = m.a
        m12 = m.b
        m21 = m.c
        m22 = m.d
        m31 = m.tx
        m32 = m.ty
    }
  @inlinable public init(_ m: QuartzCore.CATransform3D) {
        m11 = m.m11
        m12 = m.m12
        m13 = m.m14
        m21 = m.m21
        m22 = m.m22
        m23 = m.m24
        m31 = m.m41
        m32 = m.m42
        m33 = m.m44
    }
  @inlinable public var isIdentity: Swift.Bool {
    get {
        return self == ProjectionTransform()
    }
  }
  @inlinable public var isAffine: Swift.Bool {
    get {
        return m13 == 0 && m23 == 0 && m33 == 1
    }
  }
  public mutating func invert() -> Swift.Bool
  public func inverted() -> SwiftUI.ProjectionTransform
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ProjectionTransform : Swift.Equatable {
  public static func == (a: SwiftUI.ProjectionTransform, b: SwiftUI.ProjectionTransform) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ProjectionTransform {
  @inline(__always) @inlinable internal func dot(_ a: (CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat), _ b: (CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat)) -> CoreGraphics.CGFloat {
        return a.0 * b.0 + a.1 * b.1 + a.2 * b.2
    }
  @inlinable public func concatenating(_ rhs: SwiftUI.ProjectionTransform) -> SwiftUI.ProjectionTransform {
        var m = ProjectionTransform()
        m.m11 = dot((m11, m12, m13), (rhs.m11, rhs.m21, rhs.m31))
        m.m12 = dot((m11, m12, m13), (rhs.m12, rhs.m22, rhs.m32))
        m.m13 = dot((m11, m12, m13), (rhs.m13, rhs.m23, rhs.m33))
        m.m21 = dot((m21, m22, m23), (rhs.m11, rhs.m21, rhs.m31))
        m.m22 = dot((m21, m22, m23), (rhs.m12, rhs.m22, rhs.m32))
        m.m23 = dot((m21, m22, m23), (rhs.m13, rhs.m23, rhs.m33))
        m.m31 = dot((m31, m32, m33), (rhs.m11, rhs.m21, rhs.m31))
        m.m32 = dot((m31, m32, m33), (rhs.m12, rhs.m22, rhs.m32))
        m.m33 = dot((m31, m32, m33), (rhs.m13, rhs.m23, rhs.m33))
        return m
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGPoint {
  public func applying(_ m: SwiftUI.ProjectionTransform) -> CoreGraphics.CGPoint
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MenuButton<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10MenuButtonV4bodyQrvp", 0) 🦸<Label, Content>
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension MenuButton where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  @inlinable public func simultaneously<Other>(with other: Other) -> SwiftUI.SimultaneousGesture<Self, Other> where Other : SwiftUI.Gesture {
        return SimultaneousGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SimultaneousGesture<First, Second> : SwiftUI.Gesture where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @frozen public struct Value {
    public var first: First.Value?
    public var second: Second.Value?
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.SimultaneousGesture<First, Second>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.SimultaneousGesture<First, Second>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SimultaneousGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SimultaneousGesture<First, Second>.Value, b: SwiftUI.SimultaneousGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SimultaneousGesture.Value : Swift.Hashable where First.Value : Swift.Hashable, Second.Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivableViewModifier : Swift.Decodable, Swift.Encodable, SwiftUI.ViewModifier {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _ArchivableViewModifier {
  public static func registerDecoder()
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public enum RGBColorSpace {
    case sRGB
    case sRGBLinear
    case displayP3
    public static func == (a: SwiftUI.Color.RGBColorSpace, b: SwiftUI.Color.RGBColorSpace) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ colorSpace: SwiftUI.Color.RGBColorSpace = .sRGB, red: Swift.Double, green: Swift.Double, blue: Swift.Double, opacity: Swift.Double = 1)
  public init(_ colorSpace: SwiftUI.Color.RGBColorSpace = .sRGB, white: Swift.Double, opacity: Swift.Double = 1)
  public init(hue: Swift.Double, saturation: Swift.Double, brightness: Swift.Double, opacity: Swift.Double = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EquatableView<Content> : SwiftUI.View where Content : Swift.Equatable, Content : SwiftUI.View {
  public var content: Content
  @inlinable public init(content: Content) {
        self.content = content
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.EquatableView<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View where Self : Swift.Equatable {
  @inlinable public func equatable() -> SwiftUI.EquatableView<Self> {
        return EquatableView(content: self)
    }
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetGroupedListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct IconOnlyLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.IconOnlyLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18IconOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __BedtimeTickLabelsLayout {
  public init(center: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public static var _background: SwiftUI.Color {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct BackgroundStyle {
  @inlinable public init() {}
}
@available(iOS, introduced: 14.0, deprecated: 14.0, renamed: "BackgroundStyle")
@available(macOS, introduced: 11.0, deprecated: 11.0, renamed: "BackgroundStyle")
@available(tvOS, introduced: 14.0, deprecated: 14.0, renamed: "BackgroundStyle")
@available(watchOS, introduced: 7.0, deprecated: 7.0, renamed: "BackgroundStyle")
@frozen public struct _BackgroundStyle {
  @inlinable public init() {}
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _addingBackgroundGroup() -> some SwiftUI.View
  
  public func _addingBackgroundLayer() -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneOutputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 14.0, *)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
extension View {
  public func contextMenu<MenuItems>(@SwiftUI.ViewBuilder menuItems: () -> MenuItems) -> some SwiftUI.View where MenuItems : SwiftUI.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
extension View {
  public func contextMenu<MenuItems>(_ contextMenu: SwiftUI.ContextMenu<MenuItems>?) -> some SwiftUI.View where MenuItems : SwiftUI.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
public struct ContextMenu<MenuItems> where MenuItems : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder menuItems: () -> MenuItems)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __ViewRemovalLayout {
  public init(showsBothRows: Swift.Bool)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EditButton : SwiftUI.View {
  public init()
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10EditButtonV4bodyQrvp", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _SizedShape<S> : SwiftUI.Shape where S : SwiftUI.Shape {
  public var shape: S
  public var size: CoreGraphics.CGSize
  @inlinable public init(shape: S, size: CoreGraphics.CGSize) {
        self.shape = shape
        self.size = size
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.AnimatablePair<S.AnimatableData, CoreGraphics.CGSize.AnimatableData>
  public var animatableData: SwiftUI._SizedShape<S>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI._SizedShape<S>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func size(_ size: CoreGraphics.CGSize) -> some SwiftUI.Shape {
        return _SizedShape(shape: self, size: size)
    }
  
  @inlinable public func size(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> some SwiftUI.Shape {
        return size(.init(width: width, height: height))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataProviderView : SwiftUI.View where Self.Body == Swift.Never {
  associatedtype Provider : SwiftUI._DataProvider
  func initDataProvider() -> Self.Provider
  associatedtype DataBody : SwiftUI.View
  func body(data: Self.Provider.Data) -> Self.DataBody
  func updateDataProvider(_ dataProvider: inout Self.Provider)
  func needsUpdateForDataChange(oldData: Self.Provider.Data, newData: Self.Provider.Data) -> Swift.Bool
  func transactionForDataChange(oldData: Self.Provider.Data, newData: Self.Provider.Data) -> SwiftUI.Transaction
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _DataProviderView where Self.Provider.Data : Swift.Equatable {
  public func needsUpdateForDataChange(oldData: Self.Provider.Data, newData: Self.Provider.Data) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _DataProviderView {
  public func updateDataProvider(_ dataProvider: inout Self.Provider)
  public func needsUpdateForDataChange(oldData: Self.Provider.Data, newData: Self.Provider.Data) -> Swift.Bool
  public func transactionForDataChange(oldData: Self.Provider.Data, newData: Self.Provider.Data) -> SwiftUI.Transaction
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public var body: Swift.Never {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol MenuStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.MenuStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MenuStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func menuStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.MenuStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol AnimatableModifier : SwiftUI.Animatable, SwiftUI.ViewModifier {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnimatableModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func gesture<T>(_ gesture: T, including mask: SwiftUI.GestureMask = .all) -> some SwiftUI.View where T : SwiftUI.Gesture
  
  public func highPriorityGesture<T>(_ gesture: T, including mask: SwiftUI.GestureMask = .all) -> some SwiftUI.View where T : SwiftUI.Gesture
  
  public func simultaneousGesture<T>(_ gesture: T, including mask: SwiftUI.GestureMask = .all) -> some SwiftUI.View where T : SwiftUI.Gesture
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GestureMask : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let none: SwiftUI.GestureMask
  public static let gesture: SwiftUI.GestureMask
  public static let subviews: SwiftUI.GestureMask
  public static let all: SwiftUI.GestureMask
  public typealias ArrayLiteralElement = SwiftUI.GestureMask
  public typealias Element = SwiftUI.GestureMask
  public typealias RawValue = Swift.UInt32
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol FileDocument {
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func fileWrapper(configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension FileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DocumentGroup where Document : SwiftUI.FileDocument {
  public init(newDocument: @autoclosure @escaping () -> Document, @SwiftUI.ViewBuilder editor: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
  public init(viewing documentType: Document.Type, @SwiftUI.ViewBuilder viewer: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentConfiguration<Document> where Document : SwiftUI.FileDocument {
  @SwiftUI.Binding @_projectedValueProperty($document) public var document: Document {
    get
    nonmutating set
    nonmutating _modify
  }
  public var $document: SwiftUI.Binding<Document> {
    get
  }
  public var fileURL: Foundation.URL?
  public var isEditable: Swift.Bool
}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
public enum MoveCommandDirection {
  case up
  case down
  case left
  case right
  public static func == (a: SwiftUI.MoveCommandDirection, b: SwiftUI.MoveCommandDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  public func onMoveCommand(perform action: ((SwiftUI.MoveCommandDirection) -> Swift.Void)?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  public func onExitCommand(perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func onPlayPauseCommand(perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDeleteCommand(perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(tvOS 14.3, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func pageCommand<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V = 1) -> some SwiftUI.View where V : Swift.BinaryInteger
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Gesture {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func modifiers(_ modifiers: SwiftUI.EventModifiers) -> SwiftUI._ModifiersGesture<Self>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ModifiersGesture<Content> : SwiftUI.Gesture where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._ModifiersGesture<Content>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Content.Value>
  public typealias Body = Swift.Never
  public typealias Value = Content.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _LayoutTraits : Swift.Equatable {
  public static func == (a: SwiftUI._LayoutTraits, b: SwiftUI._LayoutTraits) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _LayoutTraits : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct CircularGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  public init(tint: SwiftUI.Color)
  public init(tint: SwiftUI.Gradient)
  public func makeBody(configuration: SwiftUI.CircularGaugeStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18CircularGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct IsLinkedGroupTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable public func _listLinkedGroup(_ isLinked: Swift.Bool) -> some SwiftUI.View {
        return _trait(IsLinkedGroupTraitKey.self, isLinked)
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _IsLinkedGroupTraitKey {
  public static let _linkedGroup: SwiftUI._IsLinkedGroupTraitKey
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func fileImporter(isPresented: SwiftUI.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], onCompletion: @escaping (Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View
  
  public func fileImporter(isPresented: SwiftUI.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct EmptyWidgetConfiguration : SwiftUI.WidgetConfiguration {
  @inlinable public init() {}
  public static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<SwiftUI.EmptyWidgetConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicViewContent {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func onInsert(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.DynamicViewContent
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  public func onInsert(of acceptedTypeIdentifiers: [Swift.String], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.DynamicViewContent
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ForegroundLayerViewModifier {
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ForegroundLayerColorMatrixEffect {
  public var foreground: SwiftUI._ColorMatrix
  public var background: SwiftUI._ColorMatrix
  @inlinable public init(foreground: SwiftUI._ColorMatrix = .init(), background: SwiftUI._ColorMatrix = .init()) {
        (self.foreground, self.background) = (foreground, background)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ForegroundLayerColorMatrixEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum LayoutDirection : Swift.Hashable, Swift.CaseIterable {
  case leftToRight
  case rightToLeft
  public static func == (a: SwiftUI.LayoutDirection, b: SwiftUI.LayoutDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.LayoutDirection]
  public static var allCases: [SwiftUI.LayoutDirection] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var layoutDirection: SwiftUI.LayoutDirection {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Transaction {
  public init(animation: SwiftUI.Animation?)
  public var animation: SwiftUI.Animation? {
    get
    set
  }
  public var disablesAnimations: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ButtonStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ButtonStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.ButtonStyleConfiguration.Label
  public let isPressed: Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func buttonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ButtonStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformAnchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUI.Anchor<A>.Source, transform: @escaping (inout K.Value, SwiftUI.Anchor<A>) -> Swift.Void) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_AnchorTransformModifier<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnchorTransformModifier<AnchorValue, Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var anchor: SwiftUI.Anchor<AnchorValue>.Source
  public var transform: (inout Key.Value, SwiftUI.Anchor<AnchorValue>) -> Swift.Void
  @inlinable public init(anchor: SwiftUI.Anchor<AnchorValue>.Source, transform: @escaping (inout Key.Value, SwiftUI.Anchor<AnchorValue>) -> Swift.Void) {
        self.anchor = anchor
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AnchorTransformModifier<AnchorValue, Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct RedactionReasons : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let placeholder: SwiftUI.RedactionReasons
  public typealias ArrayLiteralElement = SwiftUI.RedactionReasons
  public typealias Element = SwiftUI.RedactionReasons
  public typealias RawValue = Swift.Int
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func redacted(reason: SwiftUI.RedactionReasons) -> some SwiftUI.View
  
  public func unredacted() -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension EnvironmentValues {
  public var redactionReasons: SwiftUI.RedactionReasons {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct _DisclosureIndicator : SwiftUI.View {
  public init()
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_DisclosureIndicatorV4bodyQrvp", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BackgroundModifier<Background> : SwiftUI.ViewModifier where Background : SwiftUI.View {
  public var background: Background
  public var alignment: SwiftUI.Alignment
  @inlinable public init(background: Background, alignment: SwiftUI.Alignment = .center) {
        self.background = background
        self.alignment = alignment
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BackgroundModifier<Background>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _BackgroundModifier : Swift.Equatable where Background : Swift.Equatable {
  public static func == (a: SwiftUI._BackgroundModifier<Background>, b: SwiftUI._BackgroundModifier<Background>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func background<Background>(_ background: Background, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View where Background : SwiftUI.View {
        return modifier(
            _BackgroundModifier(background: background, alignment: alignment))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _OverlayModifier<Overlay> : SwiftUI.ViewModifier where Overlay : SwiftUI.View {
  public var overlay: Overlay
  public var alignment: SwiftUI.Alignment
  @inlinable public init(overlay: Overlay, alignment: SwiftUI.Alignment = .center) {
        self.overlay = overlay
        self.alignment = alignment
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OverlayModifier<Overlay>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _OverlayModifier : Swift.Equatable where Overlay : Swift.Equatable {
  public static func == (a: SwiftUI._OverlayModifier<Overlay>, b: SwiftUI._OverlayModifier<Overlay>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func overlay<Overlay>(_ overlay: Overlay, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View where Overlay : SwiftUI.View {
        return modifier(_OverlayModifier(
            overlay: overlay, alignment: alignment))
    }
  
  @inlinable public func border<S>(_ content: S, width: CoreGraphics.CGFloat = 1) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return overlay(Rectangle().strokeBorder(content, lineWidth: width))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct SecureField<Label> : SwiftUI.View where Label : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11SecureFieldV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SecureField where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void = {})
  @_disfavoredOverload public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void = {}) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ProposedSize {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ProposedSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI._ProposedSize, b: SwiftUI._ProposedSize) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum ContentMode : Swift.Hashable, Swift.CaseIterable {
  case fit
  case fill
  public static func == (a: SwiftUI.ContentMode, b: SwiftUI.ContentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ContentMode]
  public static var allCases: [SwiftUI.ContentMode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AspectRatioLayout {
  public var aspectRatio: CoreGraphics.CGFloat?
  public var contentMode: SwiftUI.ContentMode
  @inlinable public init(aspectRatio: CoreGraphics.CGFloat? = nil, contentMode: SwiftUI.ContentMode) {
        self.aspectRatio = aspectRatio
        self.contentMode = contentMode
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func aspectRatio(_ aspectRatio: CoreGraphics.CGFloat? = nil, contentMode: SwiftUI.ContentMode) -> some SwiftUI.View {
        return modifier(_AspectRatioLayout(
            aspectRatio: aspectRatio, contentMode: contentMode))
    }
  
  @inlinable public func aspectRatio(_ aspectRatio: CoreGraphics.CGSize, contentMode: SwiftUI.ContentMode) -> some SwiftUI.View {
        return self.aspectRatio(
            aspectRatio.width / aspectRatio.height, contentMode: contentMode)
    }
  
  @inlinable public func scaledToFit() -> some SwiftUI.View {
        return aspectRatio(contentMode: .fit)
    }
  
  @inlinable public func scaledToFill() -> some SwiftUI.View {
        return aspectRatio(contentMode: .fill)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableLayout : SwiftUI.Animatable {
  associatedtype StateType = Swift.Void
  static func initialState() -> Self.StateType
  func update(state: inout Self.StateType, proxy: inout SwiftUI._ScrollableLayoutProxy)
  associatedtype ItemModifier : SwiftUI.ViewModifier = SwiftUI.EmptyModifier
  func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUI._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
  func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout where Self.StateType == Swift.Void {
  public static func initialState() -> Self.StateType
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout where Self.ItemModifier == SwiftUI.EmptyModifier {
  public func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUI._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout {
  public func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
  public subscript<T>(data: T) -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<T, Self>> where T : Swift.RandomAccessCollection, T.Element : SwiftUI.View, T.Index : Swift.Hashable {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout where Self : Swift.RandomAccessCollection, Self.Element : SwiftUI.View, Self.Index : Swift.Hashable {
  public subscript() -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<Self, Self>> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutProxy : Swift.RandomAccessCollection {
  public let size: CoreGraphics.CGSize
  public let visibleRect: CoreGraphics.CGRect
  public let count: Swift.Int
  public var visibleItems: [SwiftUI._ScrollableLayoutItem]
  public var contentSize: CoreGraphics.CGSize
  public var validRect: CoreGraphics.CGRect
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> Swift.AnyHashable {
    get
  }
  public mutating func size(of identifier: Swift.AnyHashable, in size: CoreGraphics.CGSize, validatingContent: Swift.Bool = true) -> CoreGraphics.CGSize
  public mutating func size(at index: Swift.Int, in size: CoreGraphics.CGSize, validatingContent: Swift.Bool = true) -> CoreGraphics.CGSize
  public mutating func removeSize(of identifier: Swift.AnyHashable)
  public mutating func removeAllSizes()
  public typealias Element = Swift.AnyHashable
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ScrollableLayoutProxy>
  public typealias SubSequence = Swift.Slice<SwiftUI._ScrollableLayoutProxy>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutItem : Swift.Equatable {
  public var id: Swift.AnyHashable
  public var proposedSize: CoreGraphics.CGSize {
    get
  }
  public var anchor: SwiftUI.UnitPoint {
    get
  }
  public var anchorPosition: CoreGraphics.CGPoint {
    get
  }
  public init(id: Swift.AnyHashable, proposedSize: CoreGraphics.CGSize, anchoring anchor: SwiftUI.UnitPoint = .topLeading, at position: CoreGraphics.CGPoint)
  public static func == (a: SwiftUI._ScrollableLayoutItem, b: SwiftUI._ScrollableLayoutItem) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FixedSizeLayout {
  @inlinable public init(horizontal: Swift.Bool = true, vertical: Swift.Bool = true) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  @usableFromInline
  internal var horizontal: Swift.Bool
  @usableFromInline
  internal var vertical: Swift.Bool
}
extension _FixedSizeLayout {
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func fixedSize(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUI.View {
        return modifier(
            _FixedSizeLayout(horizontal: horizontal, vertical: vertical))
    }
  
  @inlinable public func fixedSize() -> some SwiftUI.View {
        return fixedSize(horizontal: true, vertical: true)
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TupleWidget<T> : SwiftUI.Widget {
  @usableFromInline
  internal init()
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @usableFromInline
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11TupleWidgetV4bodyQrvp", 0) 🦸<T>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TupleWidgetConfiguration<T> : SwiftUI.WidgetConfiguration {
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<SwiftUI.TupleWidgetConfiguration<T>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ForegroundStyle {
  @inlinable public init() {}
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func foregroundColor(_ color: SwiftUI.Color?) -> some SwiftUI.View {
        return environment(\.foregroundColor, color)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  @usableFromInline
  internal var foregroundColor: SwiftUI.Color? {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public enum ScenePhase : Swift.Comparable {
  case background
  case inactive
  case active
  public static func == (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension EnvironmentValues {
  public var scenePhase: SwiftUI.ScenePhase {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __FourUpLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _VariadicView {
  public typealias Root = SwiftUI._VariadicView_Root
  public typealias ViewRoot = SwiftUI._VariadicView_ViewRoot
  public typealias Children = SwiftUI._VariadicView_Children
  public typealias UnaryViewRoot = SwiftUI._VariadicView_UnaryViewRoot
  public typealias MultiViewRoot = SwiftUI._VariadicView_MultiViewRoot
  @frozen public struct Tree<Root, Content> where Root : SwiftUI._VariadicView_Root {
    public var root: Root
    public var content: Content
    @inlinable internal init(root: Root, content: Content) {
            self.root = root
            self.content = content
        }
    @inlinable public init(_ root: Root, @SwiftUI.ViewBuilder content: () -> Content) {
            self.root = root
            self.content = content()
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_Root {
  static var _viewListOptions: Swift.Int { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_Root {
  public static var _viewListOptions: Swift.Int {
    get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_ViewRoot : SwiftUI._VariadicView_Root {
  static func _makeView(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewOutputs
  static func _makeViewList(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func body(children: SwiftUI._VariadicView.Children) -> Self.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_ViewRoot where Self.Body == Swift.Never {
  public func body(children: SwiftUI._VariadicView.Children) -> Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_UnaryViewRoot : SwiftUI._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_UnaryViewRoot {
  public static func _makeViewList(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_MultiViewRoot : SwiftUI._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_MultiViewRoot {
  public static func _makeView(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _VariadicView_Children {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_ViewRoot {
  public static func _makeView(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView.Tree : SwiftUI.View where Root : SwiftUI._VariadicView_ViewRoot, Content : SwiftUI.View {
  public typealias Body = Swift.Never
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._VariadicView.Tree<Root, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._VariadicView.Tree<Root, Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivableView : Swift.Decodable, Swift.Encodable, SwiftUI.View {
  func sizeThatFits(in proposedSize: SwiftUI._ProposedSize) -> CoreGraphics.CGSize
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _ArchivableView {
  public static func registerDecoder()
  public func sizeThatFits(in proposedSize: SwiftUI._ProposedSize) -> CoreGraphics.CGSize
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var defaultMinListRowHeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var defaultMinListHeaderHeight: CoreGraphics.CGFloat? {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public var _plainListSectionSpacing: CoreGraphics.CGFloat? {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandMenu<Content> : SwiftUI.Commands where Content : SwiftUI.View {
  public var body: some SwiftUI.Commands {
    get
  }
  public init(_ nameKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  public init(_ name: SwiftUI.Text, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ name: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11CommandMenuV4bodyQrvp", 0) 🦸<Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct UnitPoint : Swift.Hashable {
  public var x: CoreGraphics.CGFloat
  public var y: CoreGraphics.CGFloat
  @inlinable public init() {
        self.init(x: 0, y: 0)
    }
  @inlinable public init(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) {
        self.x = x
        self.y = y
    }
  public static let zero: SwiftUI.UnitPoint
  public static let center: SwiftUI.UnitPoint
  public static let leading: SwiftUI.UnitPoint
  public static let trailing: SwiftUI.UnitPoint
  public static let top: SwiftUI.UnitPoint
  public static let bottom: SwiftUI.UnitPoint
  public static let topLeading: SwiftUI.UnitPoint
  public static let topTrailing: SwiftUI.UnitPoint
  public static let bottomLeading: SwiftUI.UnitPoint
  public static let bottomTrailing: SwiftUI.UnitPoint
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.UnitPoint, b: SwiftUI.UnitPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension UnitPoint : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>
  public var animatableData: SwiftUI.UnitPoint.AnimatableData {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTest : SwiftUI._Test {
  associatedtype RootView : SwiftUI.View
  func initRootView() -> Self.RootView
  func initSize() -> CoreGraphics.CGSize
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewTest {
  public func setUpTest()
  public func tearDownTest()
  public var rootView: Self.RootView {
    get
  }
  public func viewForIdentifier<V, I>(_ identifier: I, _ type: V.Type = V.self) -> V? where V : SwiftUI.View, I : Swift.Hashable
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type = S.self, in _: V.Type = V.self) -> SwiftUI.Binding<S>? where I : Swift.Hashable, V : SwiftUI.View
  public func render(seconds: Swift.Double = 1.0 / 60.0)
  public func initSize() -> CoreGraphics.CGSize
  public func setSize(_ size: CoreGraphics.CGSize)
  public func setEnvironment(_ environment: SwiftUI.EnvironmentValues)
  public func resetEvents()
  public func loop()
  public func turnRunloop(times: Swift.Int = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewTest {
  public func rootState<S>(type _: S.Type = S.self) -> SwiftUI.Binding<S>
  public func rootState<S, V>(type _: S.Type = S.self, in _: V.Type) -> SwiftUI.Binding<S> where V : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PickerStyle {
  static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PickerValue<Style, SelectionValue> where Style : SwiftUI.PickerStyle, SelectionValue : Swift.Hashable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func pickerStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.PickerStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct SegmentedPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PaddingLayout {
  public var edges: SwiftUI.Edge.Set
  public var insets: SwiftUI.EdgeInsets?
  @inlinable public init(edges: SwiftUI.Edge.Set = .all, insets: SwiftUI.EdgeInsets?) {
        self.edges = edges
        self.insets = insets
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func padding(_ insets: SwiftUI.EdgeInsets) -> some SwiftUI.View {
        return modifier(_PaddingLayout(insets: insets))
    }
  
  @inlinable public func padding(_ edges: SwiftUI.Edge.Set = .all, _ length: CoreGraphics.CGFloat? = nil) -> some SwiftUI.View {
        let insets = length.map { EdgeInsets(_all: $0) }
        return modifier(_PaddingLayout(edges: edges, insets: insets))
    }
  
  @inlinable public func padding(_ length: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return padding(.all, length)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _tightPadding() -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnchoredShapeStyle<S> : SwiftUI.ShapeStyle where S : SwiftUI.ShapeStyle {
  public var style: S
  public var bounds: CoreGraphics.CGRect
  @inlinable internal init(style: S, bounds: CoreGraphics.CGRect) {
        self.style = style
        self.bounds = bounds
    }
  public static func _makeView<T>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<T, SwiftUI._AnchoredShapeStyle<S>>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where T : SwiftUI.Shape
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ShapeStyle {
  @inlinable public func `in`(_ rect: CoreGraphics.CGRect) -> some SwiftUI.ShapeStyle {
        return _AnchoredShapeStyle(style: self, bounds: rect)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum TextAlignment : Swift.Hashable, Swift.CaseIterable {
  case leading
  case center
  case trailing
  public static func == (a: SwiftUI.TextAlignment, b: SwiftUI.TextAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.TextAlignment]
  public static var allCases: [SwiftUI.TextAlignment] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum _VAlignment {
  case top
  case center
  case bottom
  public static func == (a: SwiftUI._VAlignment, b: SwiftUI._VAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AlignmentLayout {
  public var horizontal: SwiftUI.TextAlignment?
  public var vertical: SwiftUI._VAlignment?
  @inlinable public init(horizontal: SwiftUI.TextAlignment? = nil, vertical: SwiftUI._VAlignment? = nil) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _OffsetEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var offset: CoreGraphics.CGSize
  @inlinable public init(offset: CoreGraphics.CGSize) {
        self.offset = offset
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public var animatableData: CoreGraphics.CGSize.AnimatableData {
    get
    set
  }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OffsetEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._OffsetEffect, b: SwiftUI._OffsetEffect) -> Swift.Bool
  public typealias AnimatableData = CoreGraphics.CGSize.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func offset(_ offset: CoreGraphics.CGSize) -> some SwiftUI.View {
        return modifier(_OffsetEffect(offset: offset))
    }
  
  @inlinable public func offset(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> some SwiftUI.View {
        return offset(CGSize(width: x, height: y))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func offset(_ offset: CoreGraphics.CGSize) -> SwiftUI.AnyTransition
  public static func offset(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> SwiftUI.AnyTransition
}
extension Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_ image: SwiftUI.Image)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension LocalizedStringKey.StringInterpolation {
  public mutating func appendInterpolation(_ image: SwiftUI.Image)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AlignmentWritingModifier : SwiftUI.ViewModifier {
  @usableFromInline
  internal let key: SwiftUI.AlignmentKey
  @usableFromInline
  internal let computeValue: (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat
  @inlinable internal init(key: SwiftUI.AlignmentKey, computeValue: @escaping (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat) {
        self.key = key
        self.computeValue = computeValue
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AlignmentWritingModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func alignmentGuide(_ g: SwiftUI.HorizontalAlignment, computeValue: @escaping (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat) -> some SwiftUI.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
  @inlinable public func alignmentGuide(_ g: SwiftUI.VerticalAlignment, computeValue: @escaping (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat) -> some SwiftUI.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EventModifiers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let capsLock: SwiftUI.EventModifiers
  public static let shift: SwiftUI.EventModifiers
  public static let control: SwiftUI.EventModifiers
  public static let option: SwiftUI.EventModifiers
  public static let command: SwiftUI.EventModifiers
  public static let numericPad: SwiftUI.EventModifiers
  public static let function: SwiftUI.EventModifiers
  public static let all: SwiftUI.EventModifiers
  public typealias ArrayLiteralElement = SwiftUI.EventModifiers
  public typealias Element = SwiftUI.EventModifiers
  public typealias RawValue = Swift.Int
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@propertyWrapper public struct UIApplicationDelegateAdaptor<DelegateType> : SwiftUI.DynamicProperty where DelegateType : ObjectiveC.NSObject, DelegateType : UIKit.UIApplicationDelegate {
  public var wrappedValue: DelegateType {
    get
  }
  public init(_ delegateType: DelegateType.Type = DelegateType.self)
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension UIApplicationDelegateAdaptor where DelegateType : Combine.ObservableObject {
  public init(_ delegateType: DelegateType.Type = DelegateType.self)
  public var projectedValue: SwiftUI.ObservedObject<DelegateType>.Wrapper {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol App {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder var body: Self.Body { get }
  init()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension App {
  public static func main()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewOutputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PositionLayout {
  public var position: CoreGraphics.CGPoint
  @inlinable public init(position: CoreGraphics.CGPoint) {
        self.position = position
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func position(_ position: CoreGraphics.CGPoint) -> some SwiftUI.View {
        return modifier(_PositionLayout(position: position))
    }
  
  @inlinable public func position(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> some SwiftUI.View {
        return position(CGPoint(x: x, y: y))
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct ListRowPlatterColorTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.Color? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.Color?
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "listItemTint(_:)")
  @available(tvOS, unavailable)
  @inlinable public func listRowPlatterColor(_ color: SwiftUI.Color?) -> some SwiftUI.View {
        _trait(ListRowPlatterColorTraitKey.self, color)
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct InlinePickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Menu<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4MenuV4bodyQrvp", 0) 🦸<Label, Content>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Menu {
  public init(@SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder label: () -> Label)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content) where Label == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where Label == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Menu where Label == SwiftUI.MenuStyleConfiguration.Label, Content == SwiftUI.MenuStyleConfiguration.Content {
  public init(_ configuration: SwiftUI.MenuStyleConfiguration)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _WidgetOutputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _SafeAreaIgnoringLayout {
  public var edges: SwiftUI.Edge.Set
  @inlinable public init(edges: SwiftUI.Edge.Set = .all) {
        self.edges = edges
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _SafeAreaRegionsIgnoringLayout {
  public var regions: SwiftUI.SafeAreaRegions
  public var edges: SwiftUI.Edge.Set
  @inlinable internal init(regions: SwiftUI.SafeAreaRegions, edges: SwiftUI.Edge.Set) {
        self.regions = regions
        self.edges = edges
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
extension View {
  @inlinable public func edgesIgnoringSafeArea(_ edges: SwiftUI.Edge.Set) -> some SwiftUI.View {
        return modifier(_SafeAreaIgnoringLayout(edges: edges))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  @inlinable public func ignoresSafeArea(_ regions: SwiftUI.SafeAreaRegions = .all, edges: SwiftUI.Edge.Set = .all) -> some SwiftUI.View {
        return modifier(_SafeAreaRegionsIgnoringLayout(
            regions: regions, edges: edges))
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _DigitalCrownModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DigitalCrownModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RoundedBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.RoundedBorderTextFieldStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI27RoundedBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __IconLayout {
  public init(columnCount: Swift.Int = 4, rowCount: Swift.Int? = nil, openFolderIndex: Swift.Int? = nil, openFolderScale: CoreGraphics.CGFloat = 1.0, iconScale: CoreGraphics.CGFloat = 1.0)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _WKStoryboardContent : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_WKStoryboardContentV4bodyQrvp", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _EnvironmentKeyWritingModifier<Value> : SwiftUI.ViewModifier, SwiftUI._GraphInputsModifier {
  public var keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>
  public var value: Value
  @inlinable public init(keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  public static func _makeInputs(modifier: SwiftUI._GraphValue<SwiftUI._EnvironmentKeyWritingModifier<Value>>, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _EnvironmentKeyWritingModifier : SwiftUI._SceneModifier {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, V>, _ value: V) -> some SwiftUI.View {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Scene {
  @inlinable internal func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, V>, _ value: V) -> some SwiftUI.Scene {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }

}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityChildBehavior : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.AccessibilityChildBehavior, rhs: SwiftUI.AccessibilityChildBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AccessibilityChildBehavior {
  public static let ignore: SwiftUI.AccessibilityChildBehavior
  public static let contain: SwiftUI.AccessibilityChildBehavior
  public static let combine: SwiftUI.AccessibilityChildBehavior
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PasteButton : SwiftUI.View {
  @available(macOS 11.0, *)
  public init(supportedContentTypes: [UniformTypeIdentifiers.UTType], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  @available(macOS 11.0, *)
  public init<Payload>(supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11PasteButtonV4bodyQrvp", 0) 🦸
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PasteButton {
  public init(supportedTypes: [Swift.String], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  public init<Payload>(supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Image : Swift.Equatable {
  internal var provider: SwiftUI.AnyImageProviderBox
  public static func == (lhs: SwiftUI.Image, rhs: SwiftUI.Image) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image : SwiftUI.View {
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyImageProviderBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _CALayerView<LayerType> : SwiftUI.View where LayerType : QuartzCore.CALayer {
  public var update: (LayerType) -> Swift.Void
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _CALayerView {
  public init(type: LayerType.Type, onUpdate update: @escaping (LayerType) -> Swift.Void)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._CALayerView<LayerType>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
}
extension _CALayerView where LayerType == QuartzCore.CALayer {
  public init(onUpdate update: @escaping (LayerType) -> Swift.Void)
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `DefaultMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.DefaultMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultMenuButtonStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func zIndex(_ value: Swift.Double) -> some SwiftUI.View {
        return _trait(ZIndexTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ZIndexTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @usableFromInline
  internal typealias Value = Swift.Double
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct CircularProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.CircularProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25CircularProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct DragGesture : SwiftUI.Gesture {
  public struct Value : Swift.Equatable {
    public var time: Foundation.Date
    public var location: CoreGraphics.CGPoint
    public var startLocation: CoreGraphics.CGPoint
    public var translation: CoreGraphics.CGSize {
      get
    }
    public var predictedEndLocation: CoreGraphics.CGPoint {
      get
    }
    public var predictedEndTranslation: CoreGraphics.CGSize {
      get
    }
    public static func == (a: SwiftUI.DragGesture.Value, b: SwiftUI.DragGesture.Value) -> Swift.Bool
  }
  public var minimumDistance: CoreGraphics.CGFloat
  public var coordinateSpace: SwiftUI.CoordinateSpace
  public init(minimumDistance: CoreGraphics.CGFloat = 10, coordinateSpace: SwiftUI.CoordinateSpace = .local)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.DragGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.DragGesture.Value>
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct TitleOnlyLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.TitleOnlyLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TitleOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultToggleStyle : SwiftUI.ToggleStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct Slider<Label, ValueLabel> : SwiftUI.View where Label : SwiftUI.View, ValueLabel : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6SliderV4bodyQrvp", 0) 🦸<Label, ValueLabel>
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension Slider {
  @available(tvOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension Slider where ValueLabel == SwiftUI.EmptyView {
  @available(tvOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension Slider where Label == SwiftUI.EmptyView, ValueLabel == SwiftUI.EmptyView {
  @available(tvOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Font {
  public static let largeTitle: SwiftUI.Font
  public static let title: SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title2: SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title3: SwiftUI.Font
  public static let headline: SwiftUI.Font
  public static let subheadline: SwiftUI.Font
  public static let body: SwiftUI.Font
  public static let callout: SwiftUI.Font
  public static let footnote: SwiftUI.Font
  public static let caption: SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let caption2: SwiftUI.Font
  public static func system(_ style: SwiftUI.Font.TextStyle, design: SwiftUI.Font.Design = .default) -> SwiftUI.Font
  public enum TextStyle : Swift.CaseIterable {
    case largeTitle
    case title
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title2
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title3
    case headline
    case subheadline
    case body
    case callout
    case footnote
    case caption
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case caption2
    public static var allCases: [SwiftUI.Font.TextStyle]
    public static func == (a: SwiftUI.Font.TextStyle, b: SwiftUI.Font.TextStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [SwiftUI.Font.TextStyle]
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct StateObject<ObjectType> : SwiftUI.DynamicProperty where ObjectType : Combine.ObservableObject {
  @usableFromInline
  @frozen internal enum Storage {
    case initially(() -> ObjectType)
    case object(SwiftUI.ObservedObject<ObjectType>)
  }
  @usableFromInline
  internal var storage: SwiftUI.StateObject<ObjectType>.Storage
  @inlinable public init(wrappedValue thunk: @autoclosure @escaping () -> ObjectType) {
        storage = .initially(thunk)
    }
  public var wrappedValue: ObjectType {
    get
  }
  public var projectedValue: SwiftUI.ObservedObject<ObjectType>.Wrapper {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Group : SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent {
  public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Group : SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent {
  public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct TupleToolbarContent<T> : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.TupleToolbarContent<T>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TransformEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var transform: CoreGraphics.CGAffineTransform
  @inlinable public init(transform: CoreGraphics.CGAffineTransform) {
        self.transform = transform
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public static func == (a: SwiftUI._TransformEffect, b: SwiftUI._TransformEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformEffect(_ transform: CoreGraphics.CGAffineTransform) -> some SwiftUI.View {
        return modifier(_TransformEffect(transform: transform))
    }
  
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public struct ActionSheet {
  public init(title: SwiftUI.Text, message: SwiftUI.Text? = nil, buttons: [SwiftUI.ActionSheet.Button] = [.cancel()])
  public typealias Button = SwiftUI.Alert.Button
}
extension View {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  public func actionSheet<T>(item: SwiftUI.Binding<T?>, content: (T) -> SwiftUI.ActionSheet) -> some SwiftUI.View where T : Swift.Identifiable
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  public func actionSheet(isPresented: SwiftUI.Binding<Swift.Bool>, content: () -> SwiftUI.ActionSheet) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public static var accentColor: SwiftUI.Color {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
  @inlinable public func accentColor(_ accentColor: SwiftUI.Color?) -> some SwiftUI.View {
        return environment(\.accentColor, accentColor)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  @usableFromInline
  internal var accentColor: SwiftUI.Color? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var isEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func disabled(_ disabled: Swift.Bool) -> some SwiftUI.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: \.isEnabled, transform: { $0 = $0 && !disabled }))
    }
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct GroupedListStyle : SwiftUI.ListStyle {
  public init()
  public static func _sectionInset(_ sectionInset: SwiftUI.EdgeInsets) -> SwiftUI.GroupedListStyle
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public func renderingMode(_ renderingMode: SwiftUI.Image.TemplateRenderingMode?) -> SwiftUI.Image
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public static let clear: SwiftUI.Color
  public static let black: SwiftUI.Color
  public static let white: SwiftUI.Color
  public static let gray: SwiftUI.Color
  public static let red: SwiftUI.Color
  public static let green: SwiftUI.Color
  public static let blue: SwiftUI.Color
  public static let orange: SwiftUI.Color
  public static let yellow: SwiftUI.Color
  public static let pink: SwiftUI.Color
  public static let purple: SwiftUI.Color
  public static let primary: SwiftUI.Color
  public static let secondary: SwiftUI.Color
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableContentProvider {
  public func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> SwiftUI._ScrollViewRoot<Self>
}
public struct _ScrollViewRoot<P> : SwiftUI.View where P : SwiftUI._ScrollableContentProvider {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15_ScrollViewRootV4bodyQrvp", 0) 🦸<P>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _RotationEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var angle: SwiftUI.Angle
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) {
        self.angle = angle
        self.anchor = anchor
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.Angle.AnimatableData, SwiftUI.UnitPoint.AnimatableData>
  public var animatableData: SwiftUI._RotationEffect.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUI._RotationEffect, b: SwiftUI._RotationEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func rotationEffect(_ angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return modifier(_RotationEffect(angle: angle, anchor: anchor))
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public var defaultWheelPickerItemHeight: CoreGraphics.CGFloat {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable public func defaultWheelPickerItemHeight(_ height: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\.defaultWheelPickerItemHeight, height)
    }
  
}
@available(macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(iOS, unavailable)
extension View {
  public func focusable(_ isFocusable: Swift.Bool = true, onFocusChange: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUI.View
  
}
@available(iOS 13.4, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _FocusableModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._FocusableModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
extension EnvironmentValues {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var isFocused: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ScaleEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var scale: CoreGraphics.CGSize
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(scale: CoreGraphics.CGSize, anchor: SwiftUI.UnitPoint = .center) {
        self.scale = scale
        self.anchor = anchor
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGSize.AnimatableData, SwiftUI.UnitPoint.AnimatableData>
  public var animatableData: SwiftUI._ScaleEffect.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUI._ScaleEffect, b: SwiftUI._ScaleEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func scaleEffect(_ scale: CoreGraphics.CGSize, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return modifier(_ScaleEffect(scale: scale, anchor: anchor))
    }
  
  @inlinable public func scaleEffect(_ s: CoreGraphics.CGFloat, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return scaleEffect(CGSize(width: s, height: s), anchor: anchor)
    }
  
  @inlinable public func scaleEffect(x: CoreGraphics.CGFloat = 1.0, y: CoreGraphics.CGFloat = 1.0, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return scaleEffect(CGSize(width: x, height: y), anchor: anchor)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static var scale: SwiftUI.AnyTransition {
    get
  }
  public static func scale(scale: CoreGraphics.CGFloat, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BlurEffect : Swift.Equatable {
  public var radius: CoreGraphics.CGFloat
  public var isOpaque: Swift.Bool
  @inlinable public init(radius: CoreGraphics.CGFloat, opaque: Swift.Bool) {
        self.radius = radius
        self.isOpaque = opaque
    }
  public var animatableData: CoreGraphics.CGFloat {
    get
    set
  }
  public static func == (a: SwiftUI._BlurEffect, b: SwiftUI._BlurEffect) -> Swift.Bool
  public typealias AnimatableData = CoreGraphics.CGFloat
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func blur(radius: CoreGraphics.CGFloat, opaque: Swift.Bool = false) -> some SwiftUI.View {
        return modifier(_BlurEffect(radius: radius, opaque: opaque))
    }
  
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct CarouselTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BrightnessEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._BrightnessEffect, b: SwiftUI._BrightnessEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func brightness(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_BrightnessEffect(amount: amount))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ReferenceFileDocument : Combine.ObservableObject {
  associatedtype Snapshot
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func snapshot(contentType: UniformTypeIdentifiers.UTType) throws -> Self.Snapshot
  func fileWrapper(snapshot: Self.Snapshot, configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ReferenceFileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DocumentGroup where Document : SwiftUI.ReferenceFileDocument {
  public init(newDocument: @escaping () -> Document, @SwiftUI.ViewBuilder editor: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
  public init(viewing documentType: Document.Type, @SwiftUI.ViewBuilder viewer: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ReferenceFileDocumentConfiguration<Document> where Document : SwiftUI.ReferenceFileDocument {
  @SwiftUI.ObservedObject @_projectedValueProperty($document) public var document: Document {
    get
    set
    _modify
  }
  public var $document: SwiftUI.ObservedObject<Document>.Wrapper {
    get
  }
  public var fileURL: Foundation.URL?
  public var isEditable: Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ColorInvertEffect : Swift.Equatable {
  @inlinable public init() {}
  public static func == (a: SwiftUI._ColorInvertEffect, b: SwiftUI._ColorInvertEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func colorInvert() -> some SwiftUI.View {
        return modifier(_ColorInvertEffect())
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultGroupBoxStyle : SwiftUI.GroupBoxStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultGroupBoxStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20DefaultGroupBoxStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol AlignmentID {
  static func defaultValue(in context: SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat
  static func _combineExplicit(childValue: CoreGraphics.CGFloat, _ n: Swift.Int, into parentValue: inout CoreGraphics.CGFloat?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AlignmentID {
  public static func _combineExplicit(childValue: CoreGraphics.CGFloat, _ n: Swift.Int, into parentValue: inout CoreGraphics.CGFloat?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct HorizontalAlignment : Swift.Equatable {
  public init(_ id: SwiftUI.AlignmentID.Type)
  @usableFromInline
  internal let key: SwiftUI.AlignmentKey
  public static func == (a: SwiftUI.HorizontalAlignment, b: SwiftUI.HorizontalAlignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct VerticalAlignment : Swift.Equatable {
  public init(_ id: SwiftUI.AlignmentID.Type)
  @usableFromInline
  internal let key: SwiftUI.AlignmentKey
  public static func == (a: SwiftUI.VerticalAlignment, b: SwiftUI.VerticalAlignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension HorizontalAlignment {
  public static let leading: SwiftUI.HorizontalAlignment
  public static let center: SwiftUI.HorizontalAlignment
  public static let trailing: SwiftUI.HorizontalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension VerticalAlignment {
  public static let top: SwiftUI.VerticalAlignment
  public static let center: SwiftUI.VerticalAlignment
  public static let bottom: SwiftUI.VerticalAlignment
  public static let firstTextBaseline: SwiftUI.VerticalAlignment
  public static let lastTextBaseline: SwiftUI.VerticalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
@frozen internal struct AlignmentKey : Swift.Hashable, Swift.Comparable {
  private let bits: Swift.UInt
  @usableFromInline
  internal static func < (lhs: SwiftUI.AlignmentKey, rhs: SwiftUI.AlignmentKey) -> Swift.Bool
  @usableFromInline
  internal static func == (a: SwiftUI.AlignmentKey, b: SwiftUI.AlignmentKey) -> Swift.Bool
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ColorMatrixEffect {
  public var matrix: SwiftUI._ColorMatrix
  @inlinable public init(matrix: SwiftUI._ColorMatrix) {
        self.matrix = matrix
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func _colorMatrix(_ matrix: SwiftUI._ColorMatrix) -> some SwiftUI.View
  
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
public struct TitleAndIconLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.TitleAndIconLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TitleAndIconLabelStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  @frozen public enum Orientation : Swift.UInt8, Swift.CaseIterable, Swift.Hashable {
    case up
    case upMirrored
    case down
    case downMirrored
    case left
    case leftMirrored
    case right
    case rightMirrored
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [SwiftUI.Image.Orientation]
    public typealias RawValue = Swift.UInt8
    public static var allCases: [SwiftUI.Image.Orientation] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct WidgetBundleBuilder {
  public static func buildBlock() -> some SwiftUI.Widget
  
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.Widget where Content : SwiftUI.Widget
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ColorMultiplyEffect : SwiftUI.EnvironmentalModifier, Swift.Equatable {
  public var color: SwiftUI.Color
  @inlinable public init(color: SwiftUI.Color) {
        self.color = color
    }
  public func resolve(in environment: SwiftUI.EnvironmentValues) -> SwiftUI._ColorMultiplyEffect._Resolved
  public struct _Resolved {
    public typealias AnimatableData = SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, Swift.Float>>>
    public var animatableData: SwiftUI._ColorMultiplyEffect._Resolved.AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public static func == (a: SwiftUI._ColorMultiplyEffect, b: SwiftUI._ColorMultiplyEffect) -> Swift.Bool
  public typealias Body = Swift.Never
  public typealias ResolvedModifier = SwiftUI._ColorMultiplyEffect._Resolved
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func colorMultiply(_ color: SwiftUI.Color) -> some SwiftUI.View {
        return modifier(_ColorMultiplyEffect(color: color))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ContrastEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._ContrastEffect, b: SwiftUI._ContrastEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func contrast(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_ContrastEffect(amount: amount))
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public enum DigitalCrownRotationalSensitivity {
  case low
  case medium
  case high
  public static func == (a: SwiftUI.DigitalCrownRotationalSensitivity, b: SwiftUI.DigitalCrownRotationalSensitivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func digitalCrownRotation<V>(_ binding: SwiftUI.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride? = nil, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true) -> some SwiftUI.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func digitalCrownRotation<V>(_ binding: SwiftUI.Binding<V>) -> some SwiftUI.View where V : Swift.BinaryFloatingPoint
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _digitalCrownRotation<V>(_ binding: SwiftUI.Binding<V>, configuration: SwiftUI._DigitalCrownConfiguration) -> some SwiftUI.View where V : Swift.BinaryFloatingPoint
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct PinnedScrollableViews : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let sectionHeaders: SwiftUI.PinnedScrollableViews
  public static let sectionFooters: SwiftUI.PinnedScrollableViews
  public typealias ArrayLiteralElement = SwiftUI.PinnedScrollableViews
  public typealias Element = SwiftUI.PinnedScrollableViews
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _GrayscaleEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._GrayscaleEffect, b: SwiftUI._GrayscaleEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func grayscale(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_GrayscaleEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HueRotationEffect : Swift.Equatable {
  public var angle: SwiftUI.Angle
  @inlinable public init(angle: SwiftUI.Angle) {
        self.angle = angle
    }
  public var animatableData: SwiftUI.Angle.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUI._HueRotationEffect, b: SwiftUI._HueRotationEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.Angle.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func hueRotation(_ angle: SwiftUI.Angle) -> some SwiftUI.View {
        return modifier(_HueRotationEffect(angle: angle))
    }
  
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
public struct PreferredColorSchemeKey : SwiftUI.PreferenceKey {
  public typealias Value = SwiftUI.ColorScheme?
  public static func reduce(value: inout SwiftUI.PreferredColorSchemeKey.Value, nextValue: () -> SwiftUI.PreferredColorSchemeKey.Value)
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func preferredColorScheme(_ colorScheme: SwiftUI.ColorScheme?) -> some SwiftUI.View {
        return preference(key: PreferredColorSchemeKey.self,
            value: colorScheme)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _LuminanceToAlphaEffect : Swift.Equatable {
  @inlinable public init() {}
  public static func == (a: SwiftUI._LuminanceToAlphaEffect, b: SwiftUI._LuminanceToAlphaEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func luminanceToAlpha() -> some SwiftUI.View {
        return modifier(_LuminanceToAlphaEffect())
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _SaturationEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._SaturationEffect, b: SwiftUI._SaturationEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func saturation(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_SaturationEffect(amount: amount))
    }
  
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public class _PreviewHost : Combine.ObservableObject {
  final public let objectWillChange: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  public var environment: SwiftUI.EnvironmentValues
  public var focusedValues: SwiftUI.FocusedValues
  public static func makeHost(providerType: Any.Type) -> SwiftUI._PreviewHost?
  public func invalidatePreviews()
  public func invalidateEverything()
  public var previews: [SwiftUI._Preview] {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @objc deinit
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transition(_ t: SwiftUI.AnyTransition) -> some SwiftUI.View {
        return _trait(TransitionTraitKey.self, t)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct TransitionTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.AnyTransition {
    get { .opacity }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct CanTransitionTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct TabView<SelectionValue, Content> : SwiftUI.View where SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  public init(selection: SwiftUI.Binding<SelectionValue>?, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7TabViewV4bodyQrvp", 0) 🦸<SelectionValue, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension TabView where SelectionValue == Swift.Int {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _OpacityEffect : Swift.Equatable {
  public var opacity: Swift.Double
  @inlinable public init(opacity: Swift.Double) {
        self.opacity = opacity
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OpacityEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._OpacityEffect, b: SwiftUI._OpacityEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func opacity(_ opacity: Swift.Double) -> some SwiftUI.View {
        return modifier(_OpacityEffect(opacity: opacity))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static let opacity: SwiftUI.AnyTransition
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct UnifiedCompactWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  @inlinable public func _onBindingChange<Value>(_ binding: SwiftUI.Binding<Value>, perform action: @escaping (Value) -> Swift.Void) -> some SwiftUI.View where Value : Swift.Equatable {
        return modifier(_BindingActionModifier(
            binding: binding, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _BindingActionModifier<Value> : SwiftUI.ViewModifier where Value : Swift.Equatable {
  public var binding: SwiftUI.Binding<Value>
  public var action: (Value) -> Swift.Void
  @inlinable public init(binding: SwiftUI.Binding<Value>, action: @escaping (Value) -> Swift.Void) {
        (self.binding, self.action) = (binding, action)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BindingActionModifier<Value>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct WheelPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnimationModifier<Value> : SwiftUI.ViewModifier where Value : Swift.Equatable {
  public var animation: SwiftUI.Animation?
  public var value: Value
  @inlinable public init(animation: SwiftUI.Animation?, value: Value) {
        self.animation = animation
        self.value = value
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AnimationModifier<Value>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._AnimationModifier<Value>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _AnimationModifier : Swift.Equatable {
  public static func == (a: SwiftUI._AnimationModifier<Value>, b: SwiftUI._AnimationModifier<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func animation<V>(_ animation: SwiftUI.Animation?, value: V) -> some SwiftUI.View where V : Swift.Equatable {
        return modifier(_AnimationModifier(animation: animation, value: value))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __Random : Swift.Equatable {
  public var seed: Swift.UInt32
  public init(seed: Swift.UInt32 = 0)
  public mutating func next() -> Swift.Double
  public mutating func next(_ mean: Swift.Double, range: Swift.Double) -> Swift.Double
  public mutating func normal() -> Swift.Double
  public mutating func normal(_ mean: Swift.Double, range: Swift.Double) -> Swift.Double
  public mutating func nextColor(mean: Swift.Double = 0.75, range: Swift.Double = 0.5) -> SwiftUI.Color
  public static func == (a: SwiftUI.__Random, b: SwiftUI.__Random) -> Swift.Bool
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func tag<V>(_ tag: V) -> some SwiftUI.View where V : Swift.Hashable {
        return _trait(TagValueTraitKey<V>.self, .tagged(tag))
    }
  
  @inlinable public func _untagged() -> some SwiftUI.View {
        return _trait(IsAuxiliaryContentTraitKey.self, true)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct TagValueTraitKey<V> : SwiftUI._ViewTraitKey where V : Swift.Hashable {
  @usableFromInline
  @frozen internal enum Value {
    case untagged
    case tagged(V)
  }
  @inlinable internal static var defaultValue: SwiftUI.TagValueTraitKey<V>.Value {
    get { .untagged }
  }
}
@usableFromInline
internal struct IsAuxiliaryContentTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __ResizableImagesExampleLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandGroup<Content> : SwiftUI.Commands where Content : SwiftUI.View {
  public var body: some SwiftUI.Commands {
    get
  }
  public init(before group: SwiftUI.CommandGroupPlacement, @SwiftUI.ViewBuilder addition: () -> Content)
  public init(after group: SwiftUI.CommandGroupPlacement, @SwiftUI.ViewBuilder addition: () -> Content)
  public init(replacing group: SwiftUI.CommandGroupPlacement, @SwiftUI.ViewBuilder addition: () -> Content)
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12CommandGroupV4bodyQrvp", 0) 🦸<Content>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandGroupPlacement {
  public static let appInfo: SwiftUI.CommandGroupPlacement
  public static let appSettings: SwiftUI.CommandGroupPlacement
  public static let systemServices: SwiftUI.CommandGroupPlacement
  public static let appVisibility: SwiftUI.CommandGroupPlacement
  public static let appTermination: SwiftUI.CommandGroupPlacement
  public static let newItem: SwiftUI.CommandGroupPlacement
  public static let saveItem: SwiftUI.CommandGroupPlacement
  public static let importExport: SwiftUI.CommandGroupPlacement
  public static let printItem: SwiftUI.CommandGroupPlacement
  public static let undoRedo: SwiftUI.CommandGroupPlacement
  public static let pasteboard: SwiftUI.CommandGroupPlacement
  public static let textEditing: SwiftUI.CommandGroupPlacement
  public static let textFormatting: SwiftUI.CommandGroupPlacement
  public static let toolbar: SwiftUI.CommandGroupPlacement
  public static let sidebar: SwiftUI.CommandGroupPlacement
  public static let windowSize: SwiftUI.CommandGroupPlacement
  @available(iOS, unavailable)
  public static let windowList: SwiftUI.CommandGroupPlacement
  public static let windowArrangement: SwiftUI.CommandGroupPlacement
  public static let help: SwiftUI.CommandGroupPlacement
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BlendModeEffect : Swift.Equatable {
  public var blendMode: SwiftUI.BlendMode
  @inlinable public init(blendMode: SwiftUI.BlendMode) {
        self.blendMode = blendMode
    }
  public static func == (a: SwiftUI._BlendModeEffect, b: SwiftUI._BlendModeEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func blendMode(_ blendMode: SwiftUI.BlendMode) -> some SwiftUI.View {
        return modifier(_BlendModeEffect(blendMode: blendMode))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowBackgroundTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.AnyView? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.AnyView?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func listRowBackground<V>(_ view: V?) -> some SwiftUI.View where V : SwiftUI.View {
        return _trait(ListRowBackgroundTraitKey.self, view.map { AnyView($0) })
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextEditingCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TextEditingCommandsV4bodyQrvp", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextFormattingCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TextFormattingCommandsV4bodyQrvp", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorRenderingMode {
  case nonLinear
  case linear
  case extendedLinear
  public static func == (a: SwiftUI.ColorRenderingMode, b: SwiftUI.ColorRenderingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DrawingGroupEffect : SwiftUI.ViewModifier, Swift.Equatable {
  public var isOpaque: Swift.Bool {
    get
    set
  }
  public var colorMode: SwiftUI.ColorRenderingMode {
    get
    set
  }
  public init(opaque: Swift.Bool = false, colorMode: SwiftUI.ColorRenderingMode = .nonLinear)
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DrawingGroupEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._DrawingGroupEffect, b: SwiftUI._DrawingGroupEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func drawingGroup(opaque: Swift.Bool = false, colorMode: SwiftUI.ColorRenderingMode = .nonLinear) -> some SwiftUI.View
  
}
extension View {
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBox<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8GroupBoxV4bodyQrvp", 0) 🦸<Label, Content>
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension GroupBox where Label == SwiftUI.GroupBoxStyleConfiguration.Label, Content == SwiftUI.GroupBoxStyleConfiguration.Content {
  public init(_ configuration: SwiftUI.GroupBoxStyleConfiguration)
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension GroupBox where Label == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct TextField<Label> : SwiftUI.View where Label : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI9TextFieldV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension TextField where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, onCommit: @escaping () -> Swift.Void = {})
  @_disfavoredOverload public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, onCommit: @escaping () -> Swift.Void = {}) where S : Swift.StringProtocol
  public init<T>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<T>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, onCommit: @escaping () -> Swift.Void = {})
  @_disfavoredOverload public init<S, T>(_ title: S, value: SwiftUI.Binding<T>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, onCommit: @escaping () -> Swift.Void = {}) where S : Swift.StringProtocol
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowToolbarStyle {
  associatedtype _Body : SwiftUI.View
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Scene {
  public func windowToolbarStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowToolbarStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func presentedWindowToolbarStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.WindowToolbarStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnyGesture<Value> : SwiftUI.Gesture {
  fileprivate var storage: SwiftUI.AnyGestureStorageBase<Value>
  public init<T>(_ gesture: T) where Value == T.Value, T : SwiftUI.Gesture
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.AnyGesture<Value>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Value>
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyGestureStorageBase<Value> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _CompositingGroupEffect : Swift.Equatable {
  @inlinable public init() {}
  public static func == (a: SwiftUI._CompositingGroupEffect, b: SwiftUI._CompositingGroupEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func compositingGroup() -> some SwiftUI.View {
        return modifier(_CompositingGroupEffect())
    }
  
}
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> T
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> some SwiftUI.View where T : SwiftUI.View

@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisclosureGroup<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content, @SwiftUI.ViewBuilder label: () -> Label)
  public init(isExpanded: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping () -> Content, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15DisclosureGroupV4bodyQrvp", 0) 🦸<Label, Content>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DisclosureGroup where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, isExpanded: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_disfavoredOverload public init<S>(_ label: S, @SwiftUI.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
  @_disfavoredOverload public init<S>(_ label: S, isExpanded: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct IsExpandedTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.Binding<Swift.Bool>? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.Binding<Swift.Bool>?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataProvider {
  associatedtype Data
  var data: Self.Data { get }
  associatedtype Token
  mutating func addObserver(_ observer: SwiftUI._DataProviderObserver) -> Self.Token
  mutating func removeObserver(token: Self.Token)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataProviderObserver {
  func dataWillChange()
  func dataDidChange()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _PreviewProviderLocator {
  static var previewProviders: [SwiftUI._PreviewProvider.Type] { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _PreviewProvider {
  static var _previews: Any { get }
  static var _platform: SwiftUI.PreviewPlatform? { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PreviewProvider : SwiftUI._PreviewProvider {
  associatedtype Previews : SwiftUI.View
  @SwiftUI.ViewBuilder static var previews: Self.Previews { get }
  static var platform: SwiftUI.PreviewPlatform? { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreviewProvider {
  public static var platform: SwiftUI.PreviewPlatform? {
    get
  }
  public static var _previews: Any {
    get
  }
  public static var _platform: SwiftUI.PreviewPlatform? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewPlatform {
  case iOS
  case macOS
  case tvOS
  case watchOS
  public static func == (a: SwiftUI.PreviewPlatform, b: SwiftUI.PreviewPlatform) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewLayout {
  case device
  case sizeThatFits
  case fixed(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PreviewDevice : Swift.RawRepresentable, Swift.ExpressibleByStringLiteral {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public init(stringLiteral: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias RawValue = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContextKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContext {
  subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func previewDevice(_ value: SwiftUI.PreviewDevice?) -> some SwiftUI.View {
        return _trait(PreviewDeviceTraitKey.self, value)
    }
  
  @inlinable public func previewLayout(_ value: SwiftUI.PreviewLayout) -> some SwiftUI.View {
        return _trait(PreviewLayoutTraitKey.self, value)
    }
  
  @inlinable public func previewDisplayName(_ value: Swift.String?) -> some SwiftUI.View {
        return _trait(PreviewDisplayNameTraitKey.self, value)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable public func previewContext<C>(_ value: C) -> some SwiftUI.View where C : SwiftUI.PreviewContext {
        return _trait(PreviewContextTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDeviceTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.PreviewDevice? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewDevice?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewLayoutTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.PreviewLayout {
    get { .device }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewLayout
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDisplayNameTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.String? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = Swift.String?
}
@usableFromInline
internal struct PreviewColorSchemeTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.ColorScheme? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.ColorScheme?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct PreviewContextTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.PreviewContext? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewContext?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _PreviewProvider {
  public static var _allPreviews: [SwiftUI._Preview] {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Preview {
  public let id: Swift.Int
  public let contentType: Swift.String
  public var content: SwiftUI.AnyView {
    get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var context: SwiftUI.PreviewContext? {
    get
  }
  public var displayName: Swift.String? {
    get
  }
  public var device: SwiftUI.PreviewDevice? {
    get
  }
  public var layout: SwiftUI.PreviewLayout {
    get
  }
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  public var colorScheme: SwiftUI.ColorScheme? {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivedViewHostDelegate {
  mutating func viewDataNeedsUpdate()
  mutating func failedToEncodeView(type: Any.Type)
  mutating func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _ArchivedViewHostDelegate {
  public mutating func failedToEncodeView(type: Any.Type)
  public mutating func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
final public class _ArchivedViewHost<Content, Delegate> where Content : SwiftUI.View, Delegate : SwiftUI._ArchivedViewHostDelegate {
  final public var content: Content {
    get
    set
  }
  final public var environment: SwiftUI.EnvironmentValues {
    get
    set
  }
  final public var size: CoreGraphics.CGSize {
    get
    set
  }
  final public var safeAreaInsets: SwiftUI.EdgeInsets {
    get
    set
  }
  final public var auxiliaryData: Foundation.Data?
  final public var delegate: Delegate
  final public var encodesCustomFontsAsURLs: Swift.Bool
  public init(content: Content, delegate: Delegate)
  final public func archiveIfChanged() throws -> Foundation.Data?
  final public func archiveStates(count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws -> Foundation.Data
  final public func archiveStates(to file: Foundation.FileHandle, count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws
  final public func archiveStates(to url: Foundation.URL, count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws
  final public func forEachIdentifiedView(body: (SwiftUI._IdentifiedViewProxy) -> Swift.Void)
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func anchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUI.Anchor<A>.Source, transform: @escaping (SwiftUI.Anchor<A>) -> K.Value) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_AnchorWritingModifier<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnchorWritingModifier<AnchorValue, Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var anchor: SwiftUI.Anchor<AnchorValue>.Source
  public var transform: (SwiftUI.Anchor<AnchorValue>) -> Key.Value
  @inlinable public init(anchor: SwiftUI.Anchor<AnchorValue>.Source, transform: @escaping (SwiftUI.Anchor<AnchorValue>) -> Key.Value) {
        self.anchor = anchor
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AnchorWritingModifier<AnchorValue, Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ClipEffect<ClipShape> where ClipShape : SwiftUI.Shape {
  public var shape: ClipShape
  public var style: SwiftUI.FillStyle
  @inlinable public init(shape: ClipShape, style: SwiftUI.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
    }
  public var animatableData: ClipShape.AnimatableData {
    get
    set
  }
  public typealias AnimatableData = ClipShape.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func clipShape<S>(_ shape: S, style: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.Shape {
        return modifier(_ClipEffect(shape: shape, style: style))
    }
  
  @inlinable public func clipped(antialiased: Swift.Bool = false) -> some SwiftUI.View {
        return clipShape(Rectangle(),
            style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable public func cornerRadius(_ radius: CoreGraphics.CGFloat, antialiased: Swift.Bool = true) -> some SwiftUI.View {
        return clipShape(RoundedRectangle(cornerRadius: radius),
            style: FillStyle(antialiased: antialiased))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ShadowEffect : SwiftUI.EnvironmentalModifier, Swift.Equatable {
  public var color: SwiftUI.Color
  public var radius: CoreGraphics.CGFloat
  public var offset: CoreGraphics.CGSize
  @inlinable public init(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, offset: CoreGraphics.CGSize) {
        self.color = color
        self.radius = radius
        self.offset = offset
    }
  public func resolve(in environment: SwiftUI.EnvironmentValues) -> SwiftUI._ShadowEffect._Resolved
  public struct _Resolved {
    public typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, Swift.Float>>>, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGSize.AnimatableData>>
    public var animatableData: SwiftUI._ShadowEffect._Resolved.AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public static func == (a: SwiftUI._ShadowEffect, b: SwiftUI._ShadowEffect) -> Swift.Bool
  public typealias Body = Swift.Never
  public typealias ResolvedModifier = SwiftUI._ShadowEffect._Resolved
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func shadow(color: SwiftUI.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> some SwiftUI.View {
        return modifier(
            _ShadowEffect(
                color: color,
                radius: radius,
                offset: CGSize(width: x, height: y)
        ))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Test {
  func setUpTest()
  func tearDownTest()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Test {
  public func setUpTest()
  public func tearDownTest()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static let `default`: SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableContentProvider {
  associatedtype ScrollableContent : SwiftUI.View
  var scrollableContent: Self.ScrollableContent { get }
  associatedtype Root : SwiftUI.View
  func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> Self.Root
  func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableContentProvider {
  public func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollViewGestureProvider {
  func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollViewGestureProvider {
  public func defaultScrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func defaultGestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI.GestureMask
  public func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollLayout : Swift.Equatable {
  public var contentOffset: CoreGraphics.CGPoint
  public var size: CoreGraphics.CGSize
  public var visibleRect: CoreGraphics.CGRect
  public init(contentOffset: CoreGraphics.CGPoint, size: CoreGraphics.CGSize, visibleRect: CoreGraphics.CGRect)
  public static func == (a: SwiftUI._ScrollLayout, b: SwiftUI._ScrollLayout) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewConfig {
  public static let decelerationRateNormal: Swift.Double
  public static let decelerationRateFast: Swift.Double
  public enum ContentOffset {
    case initially(CoreGraphics.CGPoint)
    case binding(SwiftUI.Binding<CoreGraphics.CGPoint>)
  }
  public var contentOffset: SwiftUI._ScrollViewConfig.ContentOffset
  public var contentInsets: SwiftUI.EdgeInsets
  public var decelerationRate: Swift.Double
  public var alwaysBounceVertical: Swift.Bool
  public var alwaysBounceHorizontal: Swift.Bool
  public var gestureProvider: SwiftUI._ScrollViewGestureProvider
  public var stopDraggingImmediately: Swift.Bool
  public var isScrollEnabled: Swift.Bool
  public var showsHorizontalIndicator: Swift.Bool
  public var showsVerticalIndicator: Swift.Bool
  public var indicatorInsets: SwiftUI.EdgeInsets
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollView<Provider> : SwiftUI.View where Provider : SwiftUI._ScrollableContentProvider {
  public var contentProvider: Provider
  public var config: SwiftUI._ScrollViewConfig
  public init(contentProvider: Provider, config: SwiftUI._ScrollViewConfig = _ScrollViewConfig())
  public var body: some SwiftUI.View {
    get
  }
  public struct Main : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_ScrollViewV4bodyQrvp", 0) 🦸<Provider>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _scrollable(stretchChildrenToMaxHeight: Swift.Bool = false, horizontal: SwiftUI.TextAlignment? = .center, vertical: SwiftUI._VAlignment? = .center) -> SwiftUI._ScrollView<SwiftUI._AligningContentProvider<Self>>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AligningContentProvider<Content> : SwiftUI._ScrollableContentProvider where Content : SwiftUI.View {
  public var content: Content
  public var horizontal: SwiftUI.TextAlignment?
  public var vertical: SwiftUI._VAlignment?
  public init(content: Content, horizontal: SwiftUI.TextAlignment? = nil, vertical: SwiftUI._VAlignment? = nil)
  public var scrollableContent: SwiftUI.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout> {
    get
  }
  public struct AligningContentProviderLayout {
    public typealias AnimatableData = SwiftUI.EmptyAnimatableData
    public typealias Body = Swift.Never
  }
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._AligningContentProvider<Content>>
  public typealias ScrollableContent = SwiftUI.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentGroup<Document, Content> : SwiftUI.Scene where Content : SwiftUI.View {
  public var body: some SwiftUI.Scene {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13DocumentGroupV4bodyQrvp", 0) 🦸<Document, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ToggleStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ToggleStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ToggleStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.ToggleStyleConfiguration.Label
  @SwiftUI.Binding @_projectedValueProperty($isOn) public var isOn: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var $isOn: SwiftUI.Binding<Swift.Bool> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func toggleStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ToggleStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingViewConfig : Swift.Equatable {
  public enum Direction {
    case vertical
    case horizontal
    public static func == (a: SwiftUI._PagingViewConfig.Direction, b: SwiftUI._PagingViewConfig.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var direction: SwiftUI._PagingViewConfig.Direction
  public var size: CoreGraphics.CGFloat?
  public var margin: CoreGraphics.CGFloat
  public var spacing: CoreGraphics.CGFloat
  public var constrainedDeceleration: Swift.Bool
  public init(direction: SwiftUI._PagingViewConfig.Direction = .horizontal, size: CoreGraphics.CGFloat? = nil, margin: CoreGraphics.CGFloat = 0, spacing: CoreGraphics.CGFloat = 0, constrainedDeceleration: Swift.Bool = true)
  public static func == (a: SwiftUI._PagingViewConfig, b: SwiftUI._PagingViewConfig) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingView<Views> : SwiftUI.View where Views : Swift.RandomAccessCollection, Views.Element : SwiftUI.View, Views.Index : Swift.Hashable {
  public var views: Views
  public var page: SwiftUI.Binding<Views.Index>?
  public var config: SwiftUI._PagingViewConfig
  public var scrollViewConfig: SwiftUI._ScrollViewConfig
  public init(config: SwiftUI._PagingViewConfig = _PagingViewConfig(), page: SwiftUI.Binding<Views.Index>? = nil, views: Views)
  public init(direction: SwiftUI._PagingViewConfig.Direction, page: SwiftUI.Binding<Views.Index>? = nil, views: Views)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_PagingViewV4bodyQrvp", 0) 🦸<Views>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public enum TemplateRenderingMode {
    case template
    case original
    public static func == (a: SwiftUI.Image.TemplateRenderingMode, b: SwiftUI.Image.TemplateRenderingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 11.0, *)
  public enum Scale {
    case small
    case medium
    case large
    public static func == (a: SwiftUI.Image.Scale, b: SwiftUI.Image.Scale) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum UserInterfaceSizeClass {
  case compact
  case regular
  public static func == (a: SwiftUI.UserInterfaceSizeClass, b: SwiftUI.UserInterfaceSizeClass) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorScheme : Swift.CaseIterable {
  case light
  case dark
  public static func == (a: SwiftUI.ColorScheme, b: SwiftUI.ColorScheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ColorScheme]
  public static var allCases: [SwiftUI.ColorScheme] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorSchemeContrast : Swift.CaseIterable {
  case standard
  case increased
  public static func == (a: SwiftUI.ColorSchemeContrast, b: SwiftUI.ColorSchemeContrast) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ColorSchemeContrast]
  public static var allCases: [SwiftUI.ColorSchemeContrast] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(macCatalyst 13.0, macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ControlActiveState : Swift.Equatable, Swift.CaseIterable {
  case key
  case active
  case inactive
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.ControlActiveState, b: SwiftUI.ControlActiveState) -> Swift.Bool
  public typealias AllCases = [SwiftUI.ControlActiveState]
  public static var allCases: [SwiftUI.ControlActiveState] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public enum _DeviceVariant : Swift.Equatable {
  case compact
  case regular
  case h394
  case h448
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI._DeviceVariant, b: SwiftUI._DeviceVariant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum LegibilityWeight : Swift.Hashable {
  case regular
  case bold
  public static func == (a: SwiftUI.LegibilityWeight, b: SwiftUI.LegibilityWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @inlinable public func colorScheme(_ colorScheme: SwiftUI.ColorScheme) -> some SwiftUI.View {
        return environment(\.colorScheme, colorScheme)
    }
  
  @available(macOS 11.0, *)
  @inlinable public func imageScale(_ scale: SwiftUI.Image.Scale) -> some SwiftUI.View {
        return environment(\.imageScale, scale)
    }
  
  @inlinable public func font(_ font: SwiftUI.Font?) -> some SwiftUI.View {
        return environment(\.font, font)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var font: SwiftUI.Font? {
    get
    set
  }
  public var displayScale: CoreGraphics.CGFloat {
    get
    set
  }
  @available(macOS 11.0, *)
  public var imageScale: SwiftUI.Image.Scale {
    get
    set
  }
  public var pixelLength: CoreGraphics.CGFloat {
    get
  }
  public var legibilityWeight: SwiftUI.LegibilityWeight? {
    get
    set
  }
  public var locale: Foundation.Locale {
    get
    set
  }
  public var calendar: Foundation.Calendar {
    get
    set
  }
  public var timeZone: Foundation.TimeZone {
    get
    set
  }
  public var colorScheme: SwiftUI.ColorScheme {
    get
    set
  }
  public var colorSchemeContrast: SwiftUI.ColorSchemeContrast {
    get
  }
  public var _colorSchemeContrast: SwiftUI.ColorSchemeContrast {
    get
    set
  }
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension EnvironmentValues {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var horizontalSizeClass: SwiftUI.UserInterfaceSizeClass? {
    get
    set
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var verticalSizeClass: SwiftUI.UserInterfaceSizeClass? {
    get
    set
  }
}
extension EnvironmentValues {
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var controlActiveState: SwiftUI.ControlActiveState {
    get
    set
  }
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var _useVibrantStyling: Swift.Bool {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public var _deviceVariant: SwiftUI._DeviceVariant {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FrameLayout {
  internal let width: CoreGraphics.CGFloat?
  internal let height: CoreGraphics.CGFloat?
  internal let alignment: SwiftUI.Alignment
  @usableFromInline
  internal init(width: CoreGraphics.CGFloat?, height: CoreGraphics.CGFloat?, alignment: SwiftUI.Alignment)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func frame(width: CoreGraphics.CGFloat? = nil, height: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View {
        return modifier(
            _FrameLayout(width: width, height: height, alignment: alignment))
    }
  
  @available(*, deprecated, message: "Please pass one or more parameters.")
  @inlinable public func frame() -> some SwiftUI.View {
        return frame(width: nil, height: nil, alignment: .center)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FlexFrameLayout {
  internal let minWidth: CoreGraphics.CGFloat?
  internal let idealWidth: CoreGraphics.CGFloat?
  internal let maxWidth: CoreGraphics.CGFloat?
  internal let minHeight: CoreGraphics.CGFloat?
  internal let idealHeight: CoreGraphics.CGFloat?
  internal let maxHeight: CoreGraphics.CGFloat?
  internal let alignment: SwiftUI.Alignment
  @usableFromInline
  internal init(minWidth: CoreGraphics.CGFloat? = nil, idealWidth: CoreGraphics.CGFloat? = nil, maxWidth: CoreGraphics.CGFloat? = nil, minHeight: CoreGraphics.CGFloat? = nil, idealHeight: CoreGraphics.CGFloat? = nil, maxHeight: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func frame(minWidth: CoreGraphics.CGFloat? = nil, idealWidth: CoreGraphics.CGFloat? = nil, maxWidth: CoreGraphics.CGFloat? = nil, minHeight: CoreGraphics.CGFloat? = nil, idealHeight: CoreGraphics.CGFloat? = nil, maxHeight: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View {
        func areInNondecreasingOrder(
            _ min: CGFloat?, _ ideal: CGFloat?, _ max: CGFloat?
        ) -> Bool {
            let min = min ?? -.infinity
            let ideal = ideal ?? min
            let max = max ?? ideal
            return min <= ideal && ideal <= max
        }

        if !areInNondecreasingOrder(minWidth, idealWidth, maxWidth)
            || !areInNondecreasingOrder(minHeight, idealHeight, maxHeight)
        {
            os_log(
                .fault, log: Log.runtimeIssuesLog,
                "Contradictory frame constraints specified.")
        }

        return modifier(
            _FlexFrameLayout(
                minWidth: minWidth,
                idealWidth: idealWidth, maxWidth: maxWidth,
                minHeight: minHeight,
                idealHeight: idealHeight, maxHeight: maxHeight,
                alignment: alignment))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityAttachmentModifier : SwiftUI.ViewModifier {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct DefaultNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26DefaultNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol GroupBoxStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GroupBoxStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBoxStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.GroupBoxStyleConfiguration.Label
  public let content: SwiftUI.GroupBoxStyleConfiguration.Content
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func groupBoxStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.GroupBoxStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _EmptyScene : SwiftUI.Scene {
  @inlinable public init() {}
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI._EmptyScene>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension View {
  public func tabItem<V>(@SwiftUI.ViewBuilder _ label: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum Edge : Swift.Int8, Swift.CaseIterable {
  case top, leading, bottom, trailing
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.Edge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let top: SwiftUI.Edge.Set
    public static let leading: SwiftUI.Edge.Set
    public static let bottom: SwiftUI.Edge.Set
    public static let trailing: SwiftUI.Edge.Set
    public static let all: SwiftUI.Edge.Set
    public static let horizontal: SwiftUI.Edge.Set
    public static let vertical: SwiftUI.Edge.Set
    public init(_ e: SwiftUI.Edge)
    public typealias ArrayLiteralElement = SwiftUI.Edge.Set.Element
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  public typealias AllCases = [SwiftUI.Edge]
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.Edge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MenuPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuPickerStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PopUpButtonPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PopoverAttachmentAnchor {
  case rect(SwiftUI.Anchor<CoreGraphics.CGRect>.Source)
  case point(SwiftUI.UnitPoint)
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func popover<Item, Content>(item: SwiftUI.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUI.Edge = .top, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func popover<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUI.Edge = .top, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol LabelStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.LabelStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LabelStyleConfiguration {
  public struct Title {
    public typealias Body = Swift.Never
  }
  public struct Icon {
    public typealias Body = Swift.Never
  }
  public var title: SwiftUI.LabelStyleConfiguration.Title {
    get
  }
  public var icon: SwiftUI.LabelStyleConfiguration.Icon {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func labelStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.LabelStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Text {
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : Foundation.ReferenceConvertible
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : ObjectiveC.NSObject
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CheckboxToggleStyle : SwiftUI.ToggleStyle {
  public init()
  public func makeBody(configuration: SwiftUI.CheckboxToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19CheckboxToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultLabelStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ColorMatrix : Swift.Equatable, Swift.Codable {
  public var m11: Swift.Float = 1, m12: Swift.Float = 0, m13: Swift.Float = 0, m14: Swift.Float = 0, m15: Swift.Float = 0
  public var m21: Swift.Float = 0, m22: Swift.Float = 1, m23: Swift.Float = 0, m24: Swift.Float = 0, m25: Swift.Float = 0
  public var m31: Swift.Float = 0, m32: Swift.Float = 0, m33: Swift.Float = 1, m34: Swift.Float = 0, m35: Swift.Float = 0
  public var m41: Swift.Float = 0, m42: Swift.Float = 0, m43: Swift.Float = 0, m44: Swift.Float = 1, m45: Swift.Float = 0
  @inlinable public init() {}
  public init(color: SwiftUI.Color, in environment: SwiftUI.EnvironmentValues)
  public static func * (a: SwiftUI._ColorMatrix, b: SwiftUI._ColorMatrix) -> SwiftUI._ColorMatrix
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: SwiftUI._ColorMatrix, b: SwiftUI._ColorMatrix) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _IgnoredByLayoutEffect<Base> : SwiftUI.GeometryEffect where Base : SwiftUI.GeometryEffect {
  public var base: Base
  public static var _affectsLayout: Swift.Bool {
    get
  }
  @inlinable public init(_ base: Base) {
        self.base = base
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public var animatableData: Base.AnimatableData {
    get
    set
  }
  public typealias AnimatableData = Base.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _IgnoredByLayoutEffect : Swift.Equatable where Base : Swift.Equatable {
  public static func == (a: SwiftUI._IgnoredByLayoutEffect<Base>, b: SwiftUI._IgnoredByLayoutEffect<Base>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension GeometryEffect {
  @inlinable public func ignoredByLayout() -> SwiftUI._IgnoredByLayoutEffect<Self> {
        return _IgnoredByLayoutEffect(self)
    }
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
public struct PageTabViewStyle : SwiftUI.TabViewStyle {
  public struct IndexDisplayMode {
    public static let automatic: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS, unavailable)
    public static let always: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS, unavailable)
    public static let never: SwiftUI.PageTabViewStyle.IndexDisplayMode
  }
  public init(indexDisplayMode: SwiftUI.PageTabViewStyle.IndexDisplayMode = .automatic)
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @inlinable public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUI.View {
        return modifier(_HoverRegionModifier(action))
    }
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct _HoverRegionModifier : SwiftUI.ViewModifier {
  public let callback: (Swift.Bool) -> Swift.Void
  @inlinable public init(_ callback: @escaping (Swift.Bool) -> Swift.Void) {
        self.callback = callback
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _HoverRegionModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._HoverRegionModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _CodableTransition : Swift.Codable {
  public init?(_ base: SwiftUI.AnyTransition)
  public var base: SwiftUI.AnyTransition {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS 13.4, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func hoverEffect(_ effect: SwiftUI.HoverEffect = .automatic) -> some SwiftUI.View
  
}
@available(iOS 13.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct HoverEffect {
  public static let automatic: SwiftUI.HoverEffect
  public static let highlight: SwiftUI.HoverEffect
  public static let lift: SwiftUI.HoverEffect
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var accessibilityEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Path : Swift.Equatable, Swift.LosslessStringConvertible {
  @_hasMissingDesignatedInitializers @usableFromInline
  final internal class PathBox : Swift.Equatable {
    @objc deinit
    @usableFromInline
    internal static func == (lhs: SwiftUI.Path.PathBox, rhs: SwiftUI.Path.PathBox) -> Swift.Bool
  }
  @usableFromInline
  @frozen internal enum Storage : Swift.Equatable {
    case empty
    case rect(CoreGraphics.CGRect)
    case ellipse(CoreGraphics.CGRect)
    indirect case roundedRect(SwiftUI.FixedRoundedRect)
    indirect case stroked(SwiftUI.StrokedPath)
    indirect case trimmed(SwiftUI.TrimmedPath)
    case path(SwiftUI.Path.PathBox)
    @usableFromInline
    internal static func == (a: SwiftUI.Path.Storage, b: SwiftUI.Path.Storage) -> Swift.Bool
  }
  internal var storage: SwiftUI.Path.Storage
  public init()
  public init(_ path: CoreGraphics.CGPath)
  public init(_ path: CoreGraphics.CGMutablePath)
  public init(_ rect: CoreGraphics.CGRect)
  public init(roundedRect rect: CoreGraphics.CGRect, cornerSize: CoreGraphics.CGSize, style: SwiftUI.RoundedCornerStyle = .circular)
  public init(roundedRect rect: CoreGraphics.CGRect, cornerRadius: CoreGraphics.CGFloat, style: SwiftUI.RoundedCornerStyle = .circular)
  public init(ellipseIn rect: CoreGraphics.CGRect)
  public init(_ callback: (inout SwiftUI.Path) -> ())
  public init?(_ string: Swift.String)
  public var description: Swift.String {
    get
  }
  public var cgPath: CoreGraphics.CGPath {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var boundingRect: CoreGraphics.CGRect {
    get
  }
  public func contains(_ p: CoreGraphics.CGPoint, eoFill: Swift.Bool = false) -> Swift.Bool
  @frozen public enum Element : Swift.Equatable {
    case move(to: CoreGraphics.CGPoint)
    case line(to: CoreGraphics.CGPoint)
    case quadCurve(to: CoreGraphics.CGPoint, control: CoreGraphics.CGPoint)
    case curve(to: CoreGraphics.CGPoint, control1: CoreGraphics.CGPoint, control2: CoreGraphics.CGPoint)
    case closeSubpath
    public static func == (a: SwiftUI.Path.Element, b: SwiftUI.Path.Element) -> Swift.Bool
  }
  public func forEach(_ body: (SwiftUI.Path.Element) -> Swift.Void)
  public func strokedPath(_ style: SwiftUI.StrokeStyle) -> SwiftUI.Path
  public func trimmedPath(from: CoreGraphics.CGFloat, to: CoreGraphics.CGFloat) -> SwiftUI.Path
  public static func == (a: SwiftUI.Path, b: SwiftUI.Path) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Path : SwiftUI.Shape {
  public func path(in _: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Path, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct StrokedPath : Swift.Equatable {
  public init(path: SwiftUI.Path, style: SwiftUI.StrokeStyle)
  @usableFromInline
  internal static func == (lhs: SwiftUI.StrokedPath, rhs: SwiftUI.StrokedPath) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct TrimmedPath : Swift.Equatable {
  @usableFromInline
  internal static func == (lhs: SwiftUI.TrimmedPath, rhs: SwiftUI.TrimmedPath) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Path {
  public mutating func move(to p: CoreGraphics.CGPoint)
  public mutating func addLine(to p: CoreGraphics.CGPoint)
  public mutating func addQuadCurve(to p: CoreGraphics.CGPoint, control cp: CoreGraphics.CGPoint)
  public mutating func addCurve(to p: CoreGraphics.CGPoint, control1 cp1: CoreGraphics.CGPoint, control2 cp2: CoreGraphics.CGPoint)
  public mutating func closeSubpath()
  public mutating func addRect(_ rect: CoreGraphics.CGRect, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addRoundedRect(in rect: CoreGraphics.CGRect, cornerSize: CoreGraphics.CGSize, style: SwiftUI.RoundedCornerStyle = .circular, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addEllipse(in rect: CoreGraphics.CGRect, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addRects(_ rects: [CoreGraphics.CGRect], transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addLines(_ lines: [CoreGraphics.CGPoint])
  public mutating func addRelativeArc(center: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat, startAngle: SwiftUI.Angle, delta: SwiftUI.Angle, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addArc(center: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat, startAngle: SwiftUI.Angle, endAngle: SwiftUI.Angle, clockwise: Swift.Bool, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addArc(tangent1End p1: CoreGraphics.CGPoint, tangent2End p2: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addPath(_ path: SwiftUI.Path, transform: CoreGraphics.CGAffineTransform = .identity)
  public var currentPoint: CoreGraphics.CGPoint? {
    get
  }
  public func applying(_ transform: CoreGraphics.CGAffineTransform) -> SwiftUI.Path
  public func offsetBy(dx: CoreGraphics.CGFloat, dy: CoreGraphics.CGFloat) -> SwiftUI.Path
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum RoundedCornerStyle {
  case circular
  case continuous
  public static func == (a: SwiftUI.RoundedCornerStyle, b: SwiftUI.RoundedCornerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct FixedRoundedRect : Swift.Equatable {
  @usableFromInline
  internal static func == (a: SwiftUI.FixedRoundedRect, b: SwiftUI.FixedRoundedRect) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct NavigationLink<Label, Destination> : SwiftUI.View where Label : SwiftUI.View, Destination : SwiftUI.View {
  public init(destination: Destination, @SwiftUI.ViewBuilder label: () -> Label)
  public init(destination: Destination, isActive: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder label: () -> Label)
  public init<V>(destination: Destination, tag: V, selection: SwiftUI.Binding<V?>, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Hashable
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14NavigationLinkV4bodyQrvp", 0) 🦸<Label, Destination>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension NavigationLink where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, destination: Destination)
  @_disfavoredOverload public init<S>(_ title: S, destination: Destination) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, destination: Destination, isActive: SwiftUI.Binding<Swift.Bool>)
  @_disfavoredOverload public init<S>(_ title: S, destination: Destination, isActive: SwiftUI.Binding<Swift.Bool>) where S : Swift.StringProtocol
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, destination: Destination, tag: V, selection: SwiftUI.Binding<V?>) where V : Swift.Hashable
  @_disfavoredOverload public init<S, V>(_ title: S, destination: Destination, tag: V, selection: SwiftUI.Binding<V?>) where S : Swift.StringProtocol, V : Swift.Hashable
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension NavigationLink where Destination == SwiftUI._WKStoryboardContent {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public init(destinationName: Swift.String, @SwiftUI.ViewBuilder label: () -> Label)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public init(destinationName: Swift.String, isActive: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder label: () -> Label)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public init<V>(destinationName: Swift.String, tag: V, selection: SwiftUI.Binding<V?>, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Hashable
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension NavigationLink {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func isDetailLink(_ isDetailLink: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Gradient : Swift.Equatable {
  @frozen public struct Stop : Swift.Equatable {
    public var color: SwiftUI.Color
    public var location: CoreGraphics.CGFloat
    public init(color: SwiftUI.Color, location: CoreGraphics.CGFloat)
    public static func == (a: SwiftUI.Gradient.Stop, b: SwiftUI.Gradient.Stop) -> Swift.Bool
  }
  public var stops: [SwiftUI.Gradient.Stop]
  public init(stops: [SwiftUI.Gradient.Stop])
  public init(colors: [SwiftUI.Color])
  public static func == (a: SwiftUI.Gradient, b: SwiftUI.Gradient) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum BlendMode {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case softLight
  case hardLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  case sourceAtop
  case destinationOver
  case destinationOut
  case plusDarker
  case plusLighter
  public static func == (a: SwiftUI.BlendMode, b: SwiftUI.BlendMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
  }
  public var _accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceTransparency: Swift.Bool {
    get
  }
  public var _accessibilityReduceTransparency: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceMotion: Swift.Bool {
    get
  }
  public var _accessibilityReduceMotion: Swift.Bool {
    get
    set
  }
  public var accessibilityInvertColors: Swift.Bool {
    get
  }
  public var _accessibilityInvertColors: Swift.Bool {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension EnvironmentValues {
  public var accessibilityShowButtonShapes: Swift.Bool {
    get
  }
  public var _accessibilityShowButtonShapes: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public enum Interpolation {
    case none
    case low
    case medium
    case high
    public static func == (a: SwiftUI.Image.Interpolation, b: SwiftUI.Image.Interpolation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public func interpolation(_ interpolation: SwiftUI.Image.Interpolation) -> SwiftUI.Image
  public func antialiased(_ isAntialiased: Swift.Bool) -> SwiftUI.Image
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HiddenModifier : SwiftUI.ViewModifier {
  @inlinable public init() {}
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._HiddenModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func hidden() -> some SwiftUI.View {
        return modifier(_HiddenModifier())
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct FillStyle : Swift.Equatable {
  public var isEOFilled: Swift.Bool
  public var isAntialiased: Swift.Bool
  public init(eoFill: Swift.Bool = false, antialiased: Swift.Bool = true)
  public static func == (a: SwiftUI.FillStyle, b: SwiftUI.FillStyle) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct StrokeStyle : Swift.Equatable {
  public var lineWidth: CoreGraphics.CGFloat
  public var lineCap: CoreGraphics.CGLineCap
  public var lineJoin: CoreGraphics.CGLineJoin
  public var miterLimit: CoreGraphics.CGFloat
  public var dash: [CoreGraphics.CGFloat]
  public var dashPhase: CoreGraphics.CGFloat
  public init(lineWidth: CoreGraphics.CGFloat = 1, lineCap: CoreGraphics.CGLineCap = .butt, lineJoin: CoreGraphics.CGLineJoin = .miter, miterLimit: CoreGraphics.CGFloat = 10, dash: [CoreGraphics.CGFloat] = [CGFloat](), dashPhase: CoreGraphics.CGFloat = 0)
  public static func == (a: SwiftUI.StrokeStyle, b: SwiftUI.StrokeStyle) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension StrokeStyle : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>
  public var animatableData: SwiftUI.StrokeStyle.AnimatableData {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static var slide: SwiftUI.AnyTransition {
    get
  }
}
extension View {
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func keyboardType(_ type: UIKit.UIKeyboardType) -> some SwiftUI.View
  
}
extension View {
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func autocapitalization(_ style: UIKit.UITextAutocapitalizationType) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _SceneModifier {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder func body(content: Self.SceneContent) -> Self.Body
  typealias SceneContent = SwiftUI._SceneModifier_Content<Self>
  static func _makeScene(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _SceneModifier where Self.Body == Swift.Never {
  public func body(content: Self.SceneContent) -> Self.Body
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _SceneModifier where Self : SwiftUI._GraphInputsModifier, Self.Body == Swift.Never {
  public static func _makeScene(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension EmptyModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI.EmptyModifier>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Scene {
  @inlinable internal func modifier<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ModifiedContent : SwiftUI.Scene where Content : SwiftUI.Scene, Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  public var body: SwiftUI.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ModifiedContent : SwiftUI._SceneModifier where Content : SwiftUI._SceneModifier, Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _SceneModifier {
  @inlinable internal func concat<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneModifier_Content<Modifier> : SwiftUI.Scene where Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI._SceneModifier_Content<Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct MatchedGeometryProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
  public static let position: SwiftUI.MatchedGeometryProperties
  public static let size: SwiftUI.MatchedGeometryProperties
  public static let frame: SwiftUI.MatchedGeometryProperties
  public typealias ArrayLiteralElement = SwiftUI.MatchedGeometryProperties
  public typealias Element = SwiftUI.MatchedGeometryProperties
  public typealias RawValue = Swift.UInt32
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  @inlinable public func matchedGeometryEffect<ID>(id: ID, in namespace: SwiftUI.Namespace.ID, properties: SwiftUI.MatchedGeometryProperties = .frame, anchor: SwiftUI.UnitPoint = .center, isSource: Swift.Bool = true) -> some SwiftUI.View where ID : Swift.Hashable {
        return modifier(_MatchedGeometryEffect(id: id,
            namespace: namespace, properties: properties,
            anchor: anchor, isSource: isSource))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _MatchedGeometryEffect<ID> where ID : Swift.Hashable {
  public var id: ID
  public var namespace: SwiftUI.Namespace.ID
  public var args: (properties: SwiftUI.MatchedGeometryProperties, anchor: SwiftUI.UnitPoint, isSource: Swift.Bool)
  @inlinable public init(id: ID, namespace: SwiftUI.Namespace.ID, properties: SwiftUI.MatchedGeometryProperties, anchor: SwiftUI.UnitPoint, isSource: Swift.Bool) {
        (self.id, self.namespace) = (id, namespace)
        args = (properties: properties, anchor: anchor, isSource: isSource)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._MatchedGeometryEffect<ID>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func onPreferenceChange<K>(_ key: K.Type = K.self, perform action: @escaping (K.Value) -> Swift.Void) -> some SwiftUI.View where K : SwiftUI.PreferenceKey, K.Value : Swift.Equatable {
        return modifier(_PreferenceActionModifier<K>(action: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceActionModifier<Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey, Key.Value : Swift.Equatable {
  public var action: (Key.Value) -> Swift.Void
  @inlinable public init(action: @escaping (Key.Value) -> Swift.Void) {
        self.action = action
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceActionModifier<Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RadioGroupPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func horizontalRadioGroupLayout() -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Text {
  public struct DateStyle {
    public static let time: SwiftUI.Text.DateStyle
    public static let date: SwiftUI.Text.DateStyle
    public static let relative: SwiftUI.Text.DateStyle
    public static let offset: SwiftUI.Text.DateStyle
    public static let timer: SwiftUI.Text.DateStyle
  }
  public init(_ date: Foundation.Date, style: SwiftUI.Text.DateStyle)
  public init(_ dates: Swift.ClosedRange<Foundation.Date>)
  public init(_ interval: Foundation.DateInterval)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension LocalizedStringKey.StringInterpolation {
  public mutating func appendInterpolation(_ date: Foundation.Date, style: SwiftUI.Text.DateStyle)
  public mutating func appendInterpolation(_ dates: Swift.ClosedRange<Foundation.Date>)
  public mutating func appendInterpolation(_ interval: Foundation.DateInterval)
}
extension Text.DateStyle : Swift.Equatable {
  public static func == (a: SwiftUI.Text.DateStyle, b: SwiftUI.Text.DateStyle) -> Swift.Bool
}
extension Text.DateStyle : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public protocol NavigationViewStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct _NavigationViewStyleConfiguration {
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI._NavigationViewStyleConfiguration.Content
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension View {
  @available(watchOS 7.0, *)
  public func navigationViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.NavigationViewStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ListStyle {
  static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ListValue<Style, SelectionValue> where Style : SwiftUI.ListStyle, SelectionValue : Swift.Hashable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func listStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ListStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Group : SwiftUI.Scene where Content : SwiftUI.Scene {
  @inlinable public init(@SwiftUI.SceneBuilder content: () -> Content) {
        self.content = content()
    }
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct _TupleScene<T> : SwiftUI.Scene {
  @usableFromInline
  internal var value: T
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI._TupleScene<T>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct List<SelectionValue, Content> : SwiftUI.View where SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder content: () -> Content)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4ListV4bodyQrvp", 0) 🦸<SelectionValue, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension List {
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(watchOS, unavailable)
  public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUI.HStack<RowContent>>, RowContent : SwiftUI.View
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(watchOS, unavailable)
  public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUI.HStack<RowContent>>, RowContent : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension List where SelectionValue == Swift.Never {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public init<Data, RowContent>(_ data: Data, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  public init<RowContent>(_ data: Swift.Range<Swift.Int>, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUI.HStack<RowContent>>, RowContent : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Section<Parent, Content, Footer> {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Section : SwiftUI.View where Parent : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View {
  public typealias Body = Swift.Never
  public init(header: Parent, footer: Footer, @SwiftUI.ViewBuilder content: () -> Content)
  public var internalBody: some SwiftUI.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Section where Parent == SwiftUI.EmptyView, Content : SwiftUI.View, Footer : SwiftUI.View {
  public init(footer: Footer, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Section where Parent : SwiftUI.View, Content : SwiftUI.View, Footer == SwiftUI.EmptyView {
  public init(header: Parent, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Section where Parent == SwiftUI.EmptyView, Content : SwiftUI.View, Footer == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Section where Parent : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View {
  public func collapsible(_ collapsible: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsCollapsibleTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { true }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceTransformModifier<Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var transform: (inout Key.Value) -> Swift.Void
  public typealias Body = Swift.Never
  @inlinable public init(key _: Key.Type = Key.self, transform: @escaping (inout Key.Value) -> Swift.Void) {
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceTransformModifier<Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_PreferenceTransformModifier<K>(transform: callback))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ColorMonochromeEffect : SwiftUI.EnvironmentalModifier {
  public var color: SwiftUI.Color
  public var amount: Swift.Double
  public var bias: Swift.Double
  @inlinable public init(color: SwiftUI.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) {
        self.color = color
        self.bias = bias
        self.amount = amount
    }
  public func resolve(in environment: SwiftUI.EnvironmentValues) -> SwiftUI._ColorMonochromeEffect._Resolved
  public struct _Resolved {
    public typealias AnimatableData = SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, Swift.Float>>>>>
    public var animatableData: SwiftUI._ColorMonochromeEffect._Resolved.AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public typealias Body = Swift.Never
  public typealias ResolvedModifier = SwiftUI._ColorMonochromeEffect._Resolved
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  @inlinable public func _colorMonochrome(_ color: SwiftUI.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) -> some SwiftUI.View {
        return modifier(_ColorMonochromeEffect(
            color: color, amount: amount, bias: bias))
    }
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Settings<Content> : SwiftUI.Scene where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.Scene {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8SettingsV4bodyQrvp", 0) 🦸<Content>
}
@available(iOS 13.0, macOS 10.15, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct MagnificationGesture : SwiftUI.Gesture {
  public var minimumScaleDelta: CoreGraphics.CGFloat
  public init(minimumScaleDelta: CoreGraphics.CGFloat = 0.01)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.MagnificationGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<CoreGraphics.CGFloat>
  public typealias Body = Swift.Never
  public typealias Value = CoreGraphics.CGFloat
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ProgressView<Label, CurrentValueLabel> : SwiftUI.View where Label : SwiftUI.View, CurrentValueLabel : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12ProgressViewV4bodyQrvp", 0) 🦸<Label, CurrentValueLabel>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ProgressView where CurrentValueLabel == SwiftUI.EmptyView {
  public init() where Label == SwiftUI.EmptyView
  public init(@SwiftUI.ViewBuilder label: () -> Label)
  public init(_ titleKey: SwiftUI.LocalizedStringKey) where Label == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S) where Label == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ProgressView {
  public init<V>(value: V?, total: V = 1.0) where Label == SwiftUI.EmptyView, CurrentValueLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V?, total: V = 1.0, @SwiftUI.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V?, total: V = 1.0, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where V : Swift.BinaryFloatingPoint
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: V?, total: V = 1.0) where Label == SwiftUI.Text, CurrentValueLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  @_disfavoredOverload public init<S, V>(_ title: S, value: V?, total: V = 1.0) where Label == SwiftUI.Text, CurrentValueLabel == SwiftUI.EmptyView, S : Swift.StringProtocol, V : Swift.BinaryFloatingPoint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ProgressView {
  public init(_ progress: Foundation.Progress) where Label == SwiftUI.EmptyView, CurrentValueLabel == SwiftUI.EmptyView
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ProgressView {
  public init(_ configuration: SwiftUI.ProgressViewStyleConfiguration) where Label == SwiftUI.ProgressViewStyleConfiguration.Label, CurrentValueLabel == SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_Children : SwiftUI.View {
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._VariadicView.Children>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_Children : Swift.RandomAccessCollection {
  public struct Element : SwiftUI.View, Swift.Identifiable {
    public var id: Swift.AnyHashable {
      get
    }
    public func id<ID>(as _: ID.Type = ID.self) -> ID? where ID : Swift.Hashable
    public subscript<Trait>(key: Trait.Type) -> Trait.Value where Trait : SwiftUI._ViewTraitKey {
      get
      set
    }
    public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._VariadicView_Children.Element>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
    public typealias Body = Swift.Never
    public typealias ID = Swift.AnyHashable
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUI._VariadicView_Children.Element {
    get
  }
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._VariadicView_Children>
  public typealias SubSequence = Swift.Slice<SwiftUI._VariadicView_Children>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct HSplitView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VSplitView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _SplitViewContainer : SwiftUI._VariadicView.UnaryViewRoot {
  public func body(children: SwiftUI._VariadicView.Children) -> some SwiftUI.View
  
  public static var _viewListOptions: Swift.Int {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19_SplitViewContainerV4body8childrenQrAA09_VariadicD9_ChildrenV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct TupleView<T> : SwiftUI.View {
  public var value: T
  @inlinable public init(_ value: T) { self.value = value }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.TupleView<T>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.TupleView<T>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.DefaultDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) 🦸
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StepperFieldDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.StepperFieldDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI27StepperFieldDatePickerStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) 🦸
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FieldDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.FieldDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI20FieldDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) 🦸
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GraphicalDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.GraphicalDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI24GraphicalDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FlipForRTLEffect : SwiftUI.ViewModifier, Swift.Equatable {
  public var isEnabled: Swift.Bool
  @inlinable public init(isEnabled: Swift.Bool) {
        self.isEnabled = isEnabled
    }
  public static func == (a: SwiftUI._FlipForRTLEffect, b: SwiftUI._FlipForRTLEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func flipsForRightToLeftLayoutDirection(_ enabled: Swift.Bool) -> some SwiftUI.View {
        modifier(_FlipForRTLEffect(isEnabled: enabled))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _FlipForRTLEffect {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._FlipForRTLEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol InsettableShape : SwiftUI.Shape {
  associatedtype InsetShape : SwiftUI.InsettableShape
  func inset(by amount: CoreGraphics.CGFloat) -> Self.InsetShape
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension InsettableShape {
  @inlinable public func strokeBorder<S>(_ content: S, style: SwiftUI.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return inset(by: style.lineWidth * 0.5)
            .stroke(style: style)
            .fill(content, style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable public func strokeBorder(style: SwiftUI.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUI.View {
        return inset(by: style.lineWidth * 0.5)
            .stroke(style: style)
            .fill(style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable public func strokeBorder<S>(_ content: S, lineWidth: CoreGraphics.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
  
  @inlinable public func strokeBorder(lineWidth: CoreGraphics.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUI.View {
        return strokeBorder(style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Rectangle : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Rectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Rectangle._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI9RectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension RoundedRectangle : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(base: self, amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var base: SwiftUI.RoundedRectangle
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(base: SwiftUI.RoundedRectangle, amount: CoreGraphics.CGFloat) {
            (self.base, self.amount) = (base, amount)
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: SwiftUI.AnimatablePair<SwiftUI.RoundedRectangle.AnimatableData, CoreGraphics.CGFloat> {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.RoundedRectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.RoundedRectangle.AnimatableData, CoreGraphics.CGFloat>
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.RoundedRectangle._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.RoundedRectangle._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI16RoundedRectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Capsule : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Capsule._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Capsule._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Capsule._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7CapsuleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Ellipse : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Ellipse._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Ellipse._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Ellipse._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7EllipseV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Circle : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Circle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Circle._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Circle._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI6CircleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WidgetBundle {
  associatedtype Body : SwiftUI.Widget
  init()
  @SwiftUI.WidgetBundleBuilder var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Stepper<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7StepperV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Stepper {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Strideable
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Strideable
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Stepper where Label == SwiftUI.Text {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GeometryReader<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: (SwiftUI.GeometryProxy) -> Content
  @inlinable public init(@SwiftUI.ViewBuilder content: @escaping (SwiftUI.GeometryProxy) -> Content) {
        self.content = content
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.GeometryReader<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct GeometryProxy {
  public var size: CoreGraphics.CGSize {
    get
  }
  public subscript<T>(anchor: SwiftUI.Anchor<T>) -> T {
    get
  }
  public var safeAreaInsets: SwiftUI.EdgeInsets {
    get
  }
  public func frame(in coordinateSpace: SwiftUI.CoordinateSpace) -> CoreGraphics.CGRect
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TouchBar<Content> where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public init(id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum TouchBarItemPresence {
  case required(_: Swift.String)
  case `default`(_: Swift.String)
  case optional(_: Swift.String)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func touchBar<Content>(_ touchBar: SwiftUI.TouchBar<Content>) -> some SwiftUI.View where Content : SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func touchBar<Content>(@SwiftUI.ViewBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TouchBarModifier<Content> : SwiftUI.ViewModifier where Content : SwiftUI.View {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._TouchBarModifier<Content>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public init(_ key: SwiftUI.LocalizedStringKey, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, comment: Swift.StaticString? = nil)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct LocalizedStringKey : Swift.Equatable, Swift.ExpressibleByStringInterpolation {
  internal var key: Swift.String
  internal var hasFormatting: Swift.Bool = false
  private var arguments: [SwiftUI.LocalizedStringKey.FormatArgument]
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: SwiftUI.LocalizedStringKey.StringInterpolation)
  @usableFromInline
  internal struct FormatArgument : Swift.Equatable {
    @usableFromInline
    internal static func == (lhs: SwiftUI.LocalizedStringKey.FormatArgument, rhs: SwiftUI.LocalizedStringKey.FormatArgument) -> Swift.Bool
  }
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation(_ string: Swift.String)
    public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : Foundation.ReferenceConvertible
    public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : ObjectiveC.NSObject
    public mutating func appendInterpolation<T>(_ value: T) where T : SwiftUI._FormatSpecifiable
    public mutating func appendInterpolation<T>(_ value: T, specifier: Swift.String) where T : SwiftUI._FormatSpecifiable
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    public mutating func appendInterpolation(_ text: SwiftUI.Text)
    public typealias StringLiteralType = Swift.String
  }
  public static func == (a: SwiftUI.LocalizedStringKey, b: SwiftUI.LocalizedStringKey) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _FormatSpecifiable : Swift.Equatable {
  associatedtype _Arg : Swift.CVarArg
  var _arg: Self._Arg { get }
  var _specifier: Swift.String { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Int : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.Int64
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Int8 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.Int32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Int16 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.Int32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Int32 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.Int32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Int64 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.Int64
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension UInt : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.UInt64
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension UInt8 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension UInt16 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension UInt32 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension UInt64 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.UInt64
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Float : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Float {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.Float
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Double : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Double {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = Swift.Double
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGFloat : SwiftUI._FormatSpecifiable {
  public var _arg: CoreGraphics.CGFloat {
    get
  }
  public var _specifier: Swift.String {
    get
  }
  public typealias _Arg = CoreGraphics.CGFloat
}
extension View {
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func textContentType(_ textContentType: UIKit.UITextContentType?) -> some SwiftUI.View {
        environment(\.textContentType, textContentType?.rawValue)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  @usableFromInline
  internal var textContentType: Swift.String? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Transaction {
  public var isContinuous: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Shape : SwiftUI.Animatable, SwiftUI.View {
  func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ShapeStyle {
  static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, Self>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewModifier_Content<Modifier> where Modifier : SwiftUI.ViewModifier {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ViewModifier_Content<Modifier>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._ViewModifier_Content<Modifier>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowStyle {
  associatedtype _Body : SwiftUI.View
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Scene {
  public func windowStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func presentedWindowStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.WindowStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color : SwiftUI.ShapeStyle {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct LinearGradient : SwiftUI.ShapeStyle, SwiftUI.View {
  internal var gradient: SwiftUI.Gradient
  internal var startPoint: SwiftUI.UnitPoint
  internal var endPoint: SwiftUI.UnitPoint
  public init(gradient: SwiftUI.Gradient, startPoint: SwiftUI.UnitPoint, endPoint: SwiftUI.UnitPoint)
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.LinearGradient>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct RadialGradient : SwiftUI.ShapeStyle, SwiftUI.View {
  internal var gradient: SwiftUI.Gradient
  internal var center: SwiftUI.UnitPoint
  internal var startRadius: CoreGraphics.CGFloat
  internal var endRadius: CoreGraphics.CGFloat
  public init(gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat)
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.RadialGradient>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AngularGradient : SwiftUI.ShapeStyle, SwiftUI.View {
  internal var gradient: SwiftUI.Gradient
  internal var center: SwiftUI.UnitPoint
  internal var startAngle: SwiftUI.Angle
  internal var endAngle: SwiftUI.Angle
  public init(gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, startAngle: SwiftUI.Angle = .zero, endAngle: SwiftUI.Angle = .zero)
  public init(gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, angle: SwiftUI.Angle = .zero)
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.AngularGradient>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __FluidSpringTestLayout {
  public static let count: Swift.Int
  public init(iteration: Swift.Int, location: CoreGraphics.CGPoint?)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
extension View {
  public func labelsHidden() -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct __ScaleToFitView<V> : SwiftUI.View where V : SwiftUI.View {
  public var content: V
  public var bounds: CoreGraphics.CGRect
  @inlinable public init(content: V, bounds: CoreGraphics.CGRect) {
        self.content = content
        self.bounds = bounds
    }
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16__ScaleToFitViewV4bodyQrvp", 0) 🦸<V>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct __SetFrameLayout {
  @usableFromInline
  internal var frame: CoreGraphics.CGRect
  @inlinable public init(_ frame: CoreGraphics.CGRect) {
        self.frame = frame
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public static func + (lhs: SwiftUI.Text, rhs: SwiftUI.Text) -> SwiftUI.Text
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LinearProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.LinearProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23LinearProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @frozen public struct ObservedObject<ObjectType> : SwiftUI.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @frozen public struct Wrapper {
    internal let root: ObjectType
    public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUI.Binding<Subject> {
      get
    }
  }
  @usableFromInline
  internal var _seed: Swift.Int = 0
  @_alwaysEmitIntoClient public init(initialValue: ObjectType) {
      self.init(wrappedValue: initialValue)
    }
  public init(wrappedValue: ObjectType)
  public var wrappedValue: ObjectType
  public var projectedValue: SwiftUI.ObservedObject<ObjectType>.Wrapper {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ObservedObject {
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WheelDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.WheelDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI20WheelDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct VStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: SwiftUI._VariadicView.Tree<SwiftUI._VStackLayout, Content>
  @inlinable public init(alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _VStackLayout(alignment: alignment, spacing: spacing), content: content())
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.VStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _VStackLayout {
  public var alignment: SwiftUI.HorizontalAlignment
  public var spacing: CoreGraphics.CGFloat?
  @inlinable public init(alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyVStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyVStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.PlainButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16PlainButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Gesture {
  associatedtype Value
  static func _makeGesture(gesture: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Self.Value>
  associatedtype Body : SwiftUI.Gesture
  var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Never : SwiftUI.Gesture {
  public typealias Value = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture where Self.Value == Self.Body.Value {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Self.Body.Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GestureInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GestureOutputs<Value> {
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct EllipticalListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol DynamicProperty {
  static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  mutating func update()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  public mutating func update()
}
@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CompactDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.CompactDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22CompactDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional : SwiftUI.Gesture where Wrapped : SwiftUI.Gesture {
  public typealias Value = Wrapped.Value
  public static func _makeGesture(gesture: SwiftUI._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Wrapped.Value>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension NSUserActivity {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum TypedPayloadError : Swift.Error {
    case invalidContent
    case encodingError
    public static func == (a: Foundation.NSUserActivity.TypedPayloadError, b: Foundation.NSUserActivity.TypedPayloadError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func typedPayload<T>(_ type: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  public func setTypedPayload<T>(_ payload: T) throws where T : Swift.Decodable, T : Swift.Encodable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnyView : SwiftUI.View {
  internal var storage: SwiftUI.AnyViewStorageBase
  public init<V>(_ view: V) where V : SwiftUI.View
  @_alwaysEmitIntoClient public init<V>(erasing view: V) where V : SwiftUI.View {
        self.init(view)
    }
  public init?(_fromValue value: Any)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.AnyView>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.AnyView>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyViewStorageBase {
  @objc @usableFromInline
  deinit
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct WindowGroup<Content> : SwiftUI.Scene where Content : SwiftUI.View {
  public init(id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init(_ title: SwiftUI.Text, id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init(_ title: SwiftUI.Text, @SwiftUI.ViewBuilder content: () -> Content)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  public var body: some SwiftUI.Scene {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11WindowGroupV4bodyQrvp", 0) 🦸<Content>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct OpenURLAction {
  public func callAsFunction(_ url: Foundation.URL)
  @available(watchOS, unavailable)
  public func callAsFunction(_ url: Foundation.URL, completion: @escaping (Swift.Bool) -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension EnvironmentValues {
  public var openURL: SwiftUI.OpenURLAction {
    get
  }
  public var _openURL: SwiftUI.OpenURLAction {
    get
    set
  }
}
extension EnvironmentValues {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var _openSensitiveURL: SwiftUI.OpenURLAction {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol Scene {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder var body: Self.Body { get }
  static func _makeScene(scene: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Scene {
  public static func _makeScene(scene: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
extension Never : SwiftUI.Scene {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _PreferenceWritingModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceWritingModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _PreferenceTransformModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceTransformModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct DoubleColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI31DoubleColumnNavigationViewStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) 🦸
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct LinearGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  public init(tint: SwiftUI.Color)
  public init(tint: SwiftUI.Gradient)
  public func makeBody(configuration: SwiftUI.LinearGaugeStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16LinearGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WidgetConfiguration {
  associatedtype Body : SwiftUI.WidgetConfiguration
  var body: Self.Body { get }
  static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetConfiguration {
  public static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Never : SwiftUI.WidgetConfiguration {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Divider : SwiftUI.View {
  public init()
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.Divider>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
public func __designTimeBoolean<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByBooleanLiteral
public func __designTimeFloat<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByFloatLiteral
public func __designTimeInteger<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByIntegerLiteral
@available(iOS 14.0, macOS 11, tvOS 14.0, watchOS 7.0, *)
@_semantics("constant_evaluable") @_transparent public func __designTimeString(_ key: Swift.String, fallback: os.OSLogMessage) -> os.OSLogMessage {
    fallback
}
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByStringLiteral
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByExtendedGraphemeClusterLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeApplyIncrementalValues(_ updates: [[Swift.String : Any]])
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  public func onEnded(_ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUI._EndedGesture<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture where Self.Value : Swift.Equatable {
  public func onChanged(_ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUI._ChangedGesture<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EndedGesture<Content> where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._EndedGesture<Content>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Content.Value>
  public typealias Body = Swift.Never
  public typealias Value = Content.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ChangedGesture<Content> where Content : SwiftUI.Gesture, Content.Value : Swift.Equatable {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._ChangedGesture<Content>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Content.Value>
  public typealias Body = Swift.Never
  public typealias Value = Content.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Spacer {
  public var minLength: CoreGraphics.CGFloat?
  @inlinable public init(minLength: CoreGraphics.CGFloat? = nil) {
        self.minLength = minLength
    }
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _TextBaselineRelativeSpacer {
  public var minLength: CoreGraphics.CGFloat?
  @inlinable public init(minLength: CoreGraphics.CGFloat? = nil) {
        self.minLength = minLength
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HSpacer {
  public var minWidth: CoreGraphics.CGFloat?
  @inlinable public init(minWidth: CoreGraphics.CGFloat? = nil) {
        self.minWidth = minWidth
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _VSpacer {
  public var minHeight: CoreGraphics.CGFloat?
  @inlinable public init(minHeight: CoreGraphics.CGFloat? = nil) {
        self.minHeight = minHeight
    }
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUI.EventModifiers = .command) -> some SwiftUI.View
  
  public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct KeyboardShortcut {
  public static let defaultAction: SwiftUI.KeyboardShortcut
  public static let cancelAction: SwiftUI.KeyboardShortcut
  public var key: SwiftUI.KeyEquivalent
  public var modifiers: SwiftUI.EventModifiers
  public init(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUI.EventModifiers = .command)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct KeyEquivalent {
  public static let upArrow: SwiftUI.KeyEquivalent
  public static let downArrow: SwiftUI.KeyEquivalent
  public static let leftArrow: SwiftUI.KeyEquivalent
  public static let rightArrow: SwiftUI.KeyEquivalent
  public static let escape: SwiftUI.KeyEquivalent
  public static let delete: SwiftUI.KeyEquivalent
  public static let deleteForward: SwiftUI.KeyEquivalent
  public static let home: SwiftUI.KeyEquivalent
  public static let end: SwiftUI.KeyEquivalent
  public static let pageUp: SwiftUI.KeyEquivalent
  public static let pageDown: SwiftUI.KeyEquivalent
  public static let clear: SwiftUI.KeyEquivalent
  public static let tab: SwiftUI.KeyEquivalent
  public static let space: SwiftUI.KeyEquivalent
  public static let `return`: SwiftUI.KeyEquivalent
  public var character: Swift.Character
  public init(_ character: Swift.Character)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension KeyEquivalent : Swift.ExpressibleByExtendedGraphemeClusterLiteral {
  public init(extendedGraphemeClusterLiteral: Swift.Character)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.Character
  public typealias UnicodeScalarLiteralType = Swift.Character
}
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension KeyboardShortcut {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  public func map<T>(_ body: @escaping (Self.Value) -> T) -> SwiftUI._MapGesture<Self, T>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _MapGesture<Content, Value> where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._MapGesture<Content, Value>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ScrollView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: Content
  public var axes: SwiftUI.Axis.Set {
    get
    set
  }
  public var showsIndicators: Swift.Bool {
    get
    set
  }
  public init(_ axes: SwiftUI.Axis.Set = .vertical, showsIndicators: Swift.Bool = true, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10ScrollViewV4bodyQrvp", 0) 🦸<Content>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ScrollView {
  public var _alwaysBounceAxes: SwiftUI.Axis.Set {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public func combined(with other: SwiftUI.AnyTransition) -> SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  @inlinable public func exclusively<Other>(before other: Other) -> SwiftUI.ExclusiveGesture<Self, Other> where Other : SwiftUI.Gesture {
        return ExclusiveGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ExclusiveGesture<First, Second> : SwiftUI.Gesture where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(Second.Value)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.ExclusiveGesture<First, Second>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.ExclusiveGesture<First, Second>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ExclusiveGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.ExclusiveGesture<First, Second>.Value, b: SwiftUI.ExclusiveGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.PlainTextFieldStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI19PlainTextFieldStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct SceneStorage<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var _key: Swift.String
  @usableFromInline
  internal var _domain: Swift.String?
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUI.AnyLocation<Value>?
  @usableFromInline
  internal var _transformBox: SwiftUI.SceneStorageTransformBox
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneStorage {
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Bool
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Double
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.String
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.URL
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.Data
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneStorage where Value : Swift.ExpressibleByNilLiteral {
  public init(_ key: Swift.String) where Value == Swift.Bool?
  public init(_ key: Swift.String) where Value == Swift.Int?
  public init(_ key: Swift.String) where Value == Swift.Double?
  public init(_ key: Swift.String) where Value == Swift.String?
  public init(_ key: Swift.String) where Value == Foundation.URL?
  public init(_ key: Swift.String) where Value == Foundation.Data?
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class SceneStorageTransformBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var _layoutCorrectnessAtTheExpenseOfSpeed: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDirections : Swift.OptionSet {
  public let rawValue: Swift.Int8
  public init(rawValue: Swift.Int8)
  public static let left: SwiftUI._EventDirections
  public static let right: SwiftUI._EventDirections
  public static let up: SwiftUI._EventDirections
  public static let down: SwiftUI._EventDirections
  public static let horizontal: SwiftUI._EventDirections
  public static let vertical: SwiftUI._EventDirections
  public static let all: SwiftUI._EventDirections
  public typealias ArrayLiteralElement = SwiftUI._EventDirections
  public typealias Element = SwiftUI._EventDirections
  public typealias RawValue = Swift.Int8
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func modifier<E>(active: E, identity: E) -> SwiftUI.AnyTransition where E : SwiftUI.ViewModifier
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension View {
  @available(macOS, unavailable)
  public func navigationBarHidden(_ hidden: Swift.Bool) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  public func navigationBarTitle(_ title: SwiftUI.Text) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  public func navigationBarTitle(_ titleKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @_disfavoredOverload public func navigationBarTitle<S>(_ title: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarTitle(_ title: SwiftUI.Text, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarTitle(_ titleKey: SwiftUI.LocalizedStringKey, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View
  
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public func navigationBarTitle<S>(_ title: S, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View where S : Swift.StringProtocol
  
  @available(macOS, unavailable)
  public func navigationBarBackButtonHidden(_ hidesBackButton: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public struct NavigationBarItem {
  public enum TitleDisplayMode {
    case automatic
    case inline
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    case large
    public static func == (a: SwiftUI.NavigationBarItem.TitleDisplayMode, b: SwiftUI.NavigationBarItem.TitleDisplayMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedValue<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
    case value(Value?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedValue<Value>.Content
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
  @inlinable public var wrappedValue: Value? {
    get {
        if case .value(let value) = content {
            return value
        } else {
            return nil
        }
    }
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedBinding<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, SwiftUI.Binding<Value>?>)
    case value(SwiftUI.Binding<Value>?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedBinding<Value>.Content
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, SwiftUI.Binding<Value>?>)
  @inlinable public var wrappedValue: Value? {
    get {
            if case .value(let value) = content {
                return value?.wrappedValue
            } else {
                return nil
            }
        }
    nonmutating set {
            if case .value(let value) = content, let newValue = newValue {
                value?.wrappedValue = newValue
            }
        }
  }
  public var projectedValue: SwiftUI.Binding<Value?> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
extension View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol FocusedValueKey {
  associatedtype Value
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct FocusedValues {
  @usableFromInline
  internal init()
  public subscript<Key>(key: Key.Type) -> Key.Value? where Key : SwiftUI.FocusedValueKey {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_functionBuilder public struct SceneBuilder {
  public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.Scene
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderlessButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.BorderlessButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21BorderlessButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __UniversalListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDebugTriggers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let responders: SwiftUI._EventDebugTriggers
  public static let sendEvents: SwiftUI._EventDebugTriggers
  public static let eventBindings: SwiftUI._EventDebugTriggers
  public static let eventPhases: SwiftUI._EventDebugTriggers
  public typealias ArrayLiteralElement = SwiftUI._EventDebugTriggers
  public typealias Element = SwiftUI._EventDebugTriggers
  public typealias RawValue = Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public var _eventDebugTriggers: SwiftUI._EventDebugTriggers
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public enum TruncationMode {
    case head
    case tail
    case middle
    public static func == (a: SwiftUI.Text.TruncationMode, b: SwiftUI.Text.TruncationMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Case {
    case uppercase
    case lowercase
    public static func == (a: SwiftUI.Text.Case, b: SwiftUI.Text.Case) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var multilineTextAlignment: SwiftUI.TextAlignment {
    get
    set
  }
  public var truncationMode: SwiftUI.Text.TruncationMode {
    get
    set
  }
  public var lineSpacing: CoreGraphics.CGFloat {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "lineHeightMultiple")
  public var _lineHeightMultiple: CoreGraphics.CGFloat {
    get
    set
  }
  public var allowsTightening: Swift.Bool {
    get
    set
  }
  public var lineLimit: Swift.Int? {
    get
    set
  }
  public var minimumScaleFactor: CoreGraphics.CGFloat {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var textCase: SwiftUI.Text.Case? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func multilineTextAlignment(_ alignment: SwiftUI.TextAlignment) -> some SwiftUI.View {
        return environment(\.multilineTextAlignment, alignment)
    }
  
  @inlinable public func truncationMode(_ mode: SwiftUI.Text.TruncationMode) -> some SwiftUI.View {
        return environment(\.truncationMode, mode)
    }
  
  @inlinable public func lineSpacing(_ lineSpacing: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\.lineSpacing, lineSpacing)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "lineHeightMultiple")
  @inlinable public func _lineHeightMultiple(_ multiple: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\._lineHeightMultiple, multiple)
    }
  
  @inlinable public func allowsTightening(_ flag: Swift.Bool) -> some SwiftUI.View {
        return environment(\.allowsTightening, flag)
    }
  
  @inlinable public func lineLimit(_ number: Swift.Int?) -> some SwiftUI.View {
        return environment(\.lineLimit, number)
    }
  
  @inlinable public func minimumScaleFactor(_ factor: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\.minimumScaleFactor, factor)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable public func textCase(_ textCase: SwiftUI.Text.Case?) -> some SwiftUI.View {
        environment(\.textCase, textCase)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onCommand(_ selector: ObjectiveC.Selector, perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onPasteCommand(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.View
  
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onPasteCommand<Payload>(of supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onCopyCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onCutCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUI.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func onPasteCommand(of supportedTypes: [Swift.String], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.View
  
  public func onPasteCommand<Payload>(of supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Placement : Swift.Equatable {
  public var proposedSize: CoreGraphics.CGSize {
    get
    set
  }
  public var anchor: SwiftUI.UnitPoint
  public var anchorPosition: CoreGraphics.CGPoint
  public init(proposedSize: CoreGraphics.CGSize, anchoring anchor: SwiftUI.UnitPoint = .topLeading, at anchorPosition: CoreGraphics.CGPoint)
  public static func == (a: SwiftUI._Placement, b: SwiftUI._Placement) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct TapGesture : SwiftUI.Gesture {
  public var count: Swift.Int
  public init(count: Swift.Int = 1)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.TapGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Swift.Void>
  public typealias Body = Swift.Never
  public typealias Value = ()
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension View {
  public func onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol UIViewControllerRepresentable : SwiftUI.View where Self.Body == Swift.Never {
  associatedtype UIViewControllerType : UIKit.UIViewController
  func makeUIViewController(context: Self.Context) -> Self.UIViewControllerType
  func updateUIViewController(_ uiViewController: Self.UIViewControllerType, context: Self.Context)
  static func dismantleUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  func makeCoordinator() -> Self.Coordinator
  func _identifiedViewTree(in uiViewController: Self.UIViewControllerType) -> SwiftUI._IdentifiedViewTree
  typealias Context = SwiftUI.UIViewControllerRepresentableContext<Self>
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension UIViewControllerRepresentable where Self.Coordinator == Swift.Void {
  public func makeCoordinator() -> Self.Coordinator
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension UIViewControllerRepresentable {
  public static func dismantleUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator)
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public func _identifiedViewTree(in uiViewController: Self.UIViewControllerType) -> SwiftUI._IdentifiedViewTree
  public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct UIViewControllerRepresentableContext<Representable> where Representable : SwiftUI.UIViewControllerRepresentable {
  public let coordinator: Representable.Coordinator
  public var transaction: SwiftUI.Transaction {
    get
  }
  public var environment: SwiftUI.EnvironmentValues {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum Axis : Swift.Int8, Swift.CaseIterable {
  case horizontal
  case vertical
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.Axis.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let horizontal: SwiftUI.Axis.Set
    public static let vertical: SwiftUI.Axis.Set
    public typealias ArrayLiteralElement = SwiftUI.Axis.Set.Element
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  public typealias AllCases = [SwiftUI.Axis]
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.Axis] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Axis : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public func animation(_ animation: SwiftUI.Animation?) -> SwiftUI.AnyTransition
}
@available(tvOS 14.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct CardButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.CardButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15CardButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ViewDebug {
  public enum Property : Swift.UInt32, Swift.Hashable {
    case type
    case value
    case transform
    case position
    case size
    case environment
    case phase
    case layoutComputer
    case displayList
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Properties : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let type: SwiftUI._ViewDebug.Properties
    public static let value: SwiftUI._ViewDebug.Properties
    public static let transform: SwiftUI._ViewDebug.Properties
    public static let position: SwiftUI._ViewDebug.Properties
    public static let size: SwiftUI._ViewDebug.Properties
    public static let environment: SwiftUI._ViewDebug.Properties
    public static let phase: SwiftUI._ViewDebug.Properties
    public static let layoutComputer: SwiftUI._ViewDebug.Properties
    public static let displayList: SwiftUI._ViewDebug.Properties
    public static let all: SwiftUI._ViewDebug.Properties
    public typealias ArrayLiteralElement = SwiftUI._ViewDebug.Properties
    public typealias Element = SwiftUI._ViewDebug.Properties
    public typealias RawValue = Swift.UInt32
  }
  public struct Data {
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewDebug {
  public static func serializedData(_ viewDebugData: [SwiftUI._ViewDebug.Data]) -> Foundation.Data?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewDebug.Data : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static let identity: SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @frozen public struct GestureState<Value> : SwiftUI.DynamicProperty {
  fileprivate var state: SwiftUI.State<Value>
  fileprivate let reset: (SwiftUI.Binding<Value>) -> Swift.Void
  public init(wrappedValue: Value)
  @_alwaysEmitIntoClient public init(initialValue: Value) {
        self.init(wrappedValue: initialValue, resetTransaction: Transaction())
    }
  public init(wrappedValue: Value, resetTransaction: SwiftUI.Transaction)
  @_alwaysEmitIntoClient public init(initialValue: Value, resetTransaction: SwiftUI.Transaction) {
      self.init(wrappedValue: initialValue, resetTransaction: resetTransaction)
    }
  public init(wrappedValue: Value, reset: @escaping (Value, inout SwiftUI.Transaction) -> Swift.Void)
  @_alwaysEmitIntoClient public init(initialValue: Value, reset: @escaping (Value, inout SwiftUI.Transaction) -> Swift.Void) {
      self.init(wrappedValue: initialValue, reset: reset)
    }
  public var wrappedValue: Value {
    get
  }
  public var projectedValue: SwiftUI.GestureState<Value> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension GestureState where Value : Swift.ExpressibleByNilLiteral {
  public init(resetTransaction: SwiftUI.Transaction = Transaction())
  public init(reset: @escaping (Value, inout SwiftUI.Transaction) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  @inlinable public func updating<State>(_ state: SwiftUI.GestureState<State>, body: @escaping (Self.Value, inout State, inout SwiftUI.Transaction) -> Swift.Void) -> SwiftUI.GestureStateGesture<Self, State> {
        return .init(base: self, state: state, body: body)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GestureStateGesture<Base, State> : SwiftUI.Gesture where Base : SwiftUI.Gesture {
  public typealias Value = Base.Value
  public var base: Base
  public var state: SwiftUI.GestureState<State>
  public var body: (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUI.Transaction) -> Swift.Void
  @inlinable public init(base: Base, state: SwiftUI.GestureState<State>, body: @escaping (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUI.Transaction) -> Swift.Void) {
        self.base = base
        self.state = state
        self.body = body
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.GestureStateGesture<Base, State>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.GestureStateGesture<Base, State>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public enum EditMode {
  case inactive
  case transient
  case active
  public var isEditing: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.EditMode, b: SwiftUI.EditMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension EnvironmentValues {
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public var editMode: SwiftUI.Binding<SwiftUI.EditMode>? {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultMenuStyle : SwiftUI.MenuStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultMenuStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16DefaultMenuStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnyTransition {
  fileprivate let box: SwiftUI.AnyTransitionBox
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyTransitionBox {
  @objc @usableFromInline
  deinit
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ControlSize : Swift.CaseIterable {
  case regular
  case small
  case mini
  @available(macOS 11.0, *)
  case large
  public static var allCases: [SwiftUI.ControlSize] {
    get
  }
  public static func == (a: SwiftUI.ControlSize, b: SwiftUI.ControlSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ControlSize]
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension EnvironmentValues {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var controlSize: SwiftUI.ControlSize {
    get
    set
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func controlSize(_ controlSize: SwiftUI.ControlSize) -> some SwiftUI.View {
        return environment(\.controlSize, controlSize)
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct CarouselListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyLocationBase {
  @objc @usableFromInline
  deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyLocation<Value> : SwiftUI.AnyLocationBase {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowInsetsTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.EdgeInsets? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.EdgeInsets?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func listRowInsets(_ insets: SwiftUI.EdgeInsets?) -> some SwiftUI.View {
        return _trait(ListRowInsetsTraitKey.self, insets)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewProxy {
  public var identifier: Swift.AnyHashable
  public var boundingRect: CoreGraphics.CGRect {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _IdentifiedViewTree {
  case empty
  case proxy(SwiftUI._IdentifiedViewProxy)
  case array([SwiftUI._IdentifiedViewTree])
  public func forEach(_ body: (SwiftUI._IdentifiedViewProxy) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewsKey {
  public typealias Value = SwiftUI._IdentifiedViewTree
  public static let defaultValue: SwiftUI._IdentifiedViewTree
  public static func reduce(value: inout SwiftUI._IdentifiedViewsKey.Value, nextValue: () -> SwiftUI._IdentifiedViewsKey.Value)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _IdentifiedModifier<Identifier> : SwiftUI.ViewModifier, Swift.Equatable where Identifier : Swift.Hashable {
  public var identifier: Identifier
  @inlinable public init(identifier: Identifier) {
        self.identifier = identifier
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._IdentifiedModifier<Identifier>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._IdentifiedModifier<Identifier>, b: SwiftUI._IdentifiedModifier<Identifier>) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func _identified<I>(by identifier: I) -> some SwiftUI.View where I : Swift.Hashable {
        return modifier(_IdentifiedModifier(identifier: identifier))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewProxy : Swift.Equatable {
  public var config: SwiftUI._ScrollViewConfig {
    get
  }
  public var contentOffset: CoreGraphics.CGPoint {
    get
    set
  }
  public var minContentOffset: CoreGraphics.CGPoint {
    get
  }
  public var maxContentOffset: CoreGraphics.CGPoint {
    get
  }
  public var contentSize: CoreGraphics.CGSize {
    get
  }
  public var pageSize: CoreGraphics.CGSize {
    get
  }
  public var visibleRect: CoreGraphics.CGRect {
    get
  }
  public var isDragging: Swift.Bool {
    get
  }
  public var isDecelerating: Swift.Bool {
    get
  }
  public var isScrolling: Swift.Bool {
    get
  }
  public var isScrollingHorizontally: Swift.Bool {
    get
  }
  public var isScrollingVertically: Swift.Bool {
    get
  }
  public func setContentOffset(_ newOffset: CoreGraphics.CGPoint, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func scrollRectToVisible(_ rect: CoreGraphics.CGRect, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func contentOffsetOfNextPage(_ directions: SwiftUI._EventDirections) -> CoreGraphics.CGPoint
  public static func == (lhs: SwiftUI._ScrollViewProxy, rhs: SwiftUI._ScrollViewProxy) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ContainedScrollViewKey {
  public typealias Value = SwiftUI._ScrollViewProxy?
  public static func reduce(value: inout SwiftUI._ContainedScrollViewKey.Value, nextValue: () -> SwiftUI._ContainedScrollViewKey.Value)
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct HiddenTitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct LinkButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.LinkButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15LinkButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func move(edge: SwiftUI.Edge) -> SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Font {
  public func italic() -> SwiftUI.Font
  public func smallCaps() -> SwiftUI.Font
  public func lowercaseSmallCaps() -> SwiftUI.Font
  public func uppercaseSmallCaps() -> SwiftUI.Font
  public func monospacedDigit() -> SwiftUI.Font
  public func weight(_ weight: SwiftUI.Font.Weight) -> SwiftUI.Font
  public func bold() -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func leading(_ leading: SwiftUI.Font.Leading) -> SwiftUI.Font
  @available(iOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(macOS, introduced: 11.0, deprecated: 11.0, renamed: "leading")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, renamed: "leading")
  public func _leading(_ leading: SwiftUI.Font._Leading) -> SwiftUI.Font
  public func _stylisticAlternative(_ alternative: SwiftUI.Font._StylisticAlternative) -> SwiftUI.Font
  @frozen public struct Weight : Swift.Hashable {
    internal var value: CoreGraphics.CGFloat
    public static let ultraLight: SwiftUI.Font.Weight
    public static let thin: SwiftUI.Font.Weight
    public static let light: SwiftUI.Font.Weight
    public static let regular: SwiftUI.Font.Weight
    public static let medium: SwiftUI.Font.Weight
    public static let semibold: SwiftUI.Font.Weight
    public static let bold: SwiftUI.Font.Weight
    public static let heavy: SwiftUI.Font.Weight
    public static let black: SwiftUI.Font.Weight
    public static func == (a: SwiftUI.Font.Weight, b: SwiftUI.Font.Weight) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _StylisticAlternative : Swift.Int, Swift.Hashable {
    case one
    case two
    case three
    case four
    case five
    case six
    case seven
    case eight
    case nine
    case ten
    case eleven
    case twelve
    case thirteen
    case fourteen
    case fifteen
    case sixteen
    case seventeen
    case eighteen
    case nineteen
    case twenty
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Leading {
    case standard
    case tight
    case loose
    public static func == (a: SwiftUI.Font.Leading, b: SwiftUI.Font.Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _Leading : Swift.Hashable {
    case tight
    case loose
    case standard
    public static func == (a: SwiftUI.Font._Leading, b: SwiftUI.Font._Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __DesignTimeSelectionIdentifier : Swift.Hashable {
  public let identifier: Swift.String
  public init(_ identifier: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.__DesignTimeSelectionIdentifier, b: SwiftUI.__DesignTimeSelectionIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Animatable {
  associatedtype AnimatableData : SwiftUI.VectorArithmetic
  var animatableData: Self.AnimatableData { get set }
  static func _makeAnimatable(value: inout SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animatable where Self : SwiftUI.VectorArithmetic {
  public var animatableData: Self {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animatable where Self.AnimatableData == SwiftUI.EmptyAnimatableData {
  public var animatableData: SwiftUI.EmptyAnimatableData {
    @inlinable get { return EmptyAnimatableData() }
    @inlinable set {}
  }
  public static func _makeAnimatable(value: inout SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animatable {
  public static func _makeAnimatable(value: inout SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EmptyAnimatableData : SwiftUI.VectorArithmetic {
  @inlinable public init() {}
  @inlinable public static var zero: SwiftUI.EmptyAnimatableData {
    get { return .init() }
  }
  @inlinable public static func += (lhs: inout SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) {}
  @inlinable public static func -= (lhs: inout SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) {}
  @inlinable public static func + (lhs: SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) -> SwiftUI.EmptyAnimatableData {
        return .zero
    }
  @inlinable public static func - (lhs: SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) -> SwiftUI.EmptyAnimatableData {
        return .zero
    }
  @inlinable public mutating func scale(by rhs: Swift.Double) {}
  @inlinable public var magnitudeSquared: Swift.Double {
    get { return 0 }
  }
  public static func == (a: SwiftUI.EmptyAnimatableData, b: SwiftUI.EmptyAnimatableData) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol ToolbarContent {
  associatedtype Body : SwiftUI.ToolbarContent
  @SwiftUI.ToolbarContentBuilder var body: Self.Body { get }
  static func _makeContent(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol CustomizableToolbarContent : SwiftUI.ToolbarContent where Self.Body : SwiftUI.CustomizableToolbarContent {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContent {
  public static func _makeContent(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
extension Never : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItem<ID, Content> : SwiftUI.ToolbarContent where Content : SwiftUI.View {
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.ToolbarItem<ID, Content>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarItem where ID == Swift.Void {
  public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarItem : SwiftUI.CustomizableToolbarContent where ID == Swift.String {
  public init(id: Swift.String, placement: SwiftUI.ToolbarItemPlacement = .automatic, showsByDefault: Swift.Bool = true, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarItem : Swift.Identifiable where ID : Swift.Hashable {
  public var id: ID {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItemGroup<Content> : SwiftUI.ToolbarContent where Content : SwiftUI.View {
  public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.ToolbarItemGroup<Content>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_functionBuilder public struct ToolbarContentBuilder {
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent
  
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItemPlacement {
  public static let automatic: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let principal: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let navigation: SwiftUI.ToolbarItemPlacement
  public static let primaryAction: SwiftUI.ToolbarItemPlacement
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let status: SwiftUI.ToolbarItemPlacement
  public static let confirmationAction: SwiftUI.ToolbarItemPlacement
  public static let cancellationAction: SwiftUI.ToolbarItemPlacement
  public static let destructiveAction: SwiftUI.ToolbarItemPlacement
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let navigationBarLeading: SwiftUI.ToolbarItemPlacement
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let navigationBarTrailing: SwiftUI.ToolbarItemPlacement
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let bottomBar: SwiftUI.ToolbarItemPlacement
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func toolbar<Content>(@SwiftUI.ViewBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  public func toolbar<Content>(@SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.ToolbarContent
  
  public func toolbar<Content>(id: Swift.String, @SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.CustomizableToolbarContent
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ToolbarItemList {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional : SwiftUI.View where Wrapped : SwiftUI.View {
  public typealias Body = Swift.Never
  public static func _makeView(view: SwiftUI._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SeparatorShapeStyle : SwiftUI.ShapeStyle {
  public init()
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI.SeparatorShapeStyle>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _SystemShapeStyle : SwiftUI.ShapeStyle {
  public static let primaryFill: SwiftUI._SystemShapeStyle
  public static let secondaryFill: SwiftUI._SystemShapeStyle
  public static let tertiaryFill: SwiftUI._SystemShapeStyle
  public static let quaternaryFill: SwiftUI._SystemShapeStyle
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI._SystemShapeStyle>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnimatablePair<First, Second> : SwiftUI.VectorArithmetic where First : SwiftUI.VectorArithmetic, Second : SwiftUI.VectorArithmetic {
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        self.first = first
        self.second = second
    }
  @inlinable internal subscript() -> (First, Second) {
    get { return (first, second) }
    set { (first, second) = newValue }
  }
  @_transparent public static var zero: SwiftUI.AnimatablePair<First, Second> {
    @_transparent get {
        return .init(First.zero, Second.zero)
    }
  }
  @_transparent public static func += (lhs: inout SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) {
        lhs.first += rhs.first
        lhs.second += rhs.second
    }
  @_transparent public static func -= (lhs: inout SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) {
        lhs.first -= rhs.first
        lhs.second -= rhs.second
    }
  @_transparent public static func + (lhs: SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) -> SwiftUI.AnimatablePair<First, Second> {
        return .init(lhs.first + rhs.first, lhs.second + rhs.second)
    }
  @_transparent public static func - (lhs: SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) -> SwiftUI.AnimatablePair<First, Second> {
        return .init(lhs.first - rhs.first, lhs.second - rhs.second)
    }
  @_transparent public mutating func scale(by rhs: Swift.Double) {
        first.scale(by: rhs)
        second.scale(by: rhs)
    }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get {
        return first.magnitudeSquared + second.magnitudeSquared
    }
  }
  public static func == (a: SwiftUI.AnimatablePair<First, Second>, b: SwiftUI.AnimatablePair<First, Second>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollView.Main {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ScrollView<Provider>.Main>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ScrollViewAnimationMode {
  case never
  case discreteChanges
  case always
  public static func == (a: SwiftUI._ScrollViewAnimationMode, b: SwiftUI._ScrollViewAnimationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Transaction {
  public var _scrollViewAnimates: SwiftUI._ScrollViewAnimationMode {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static func easeInOut(duration: Swift.Double) -> SwiftUI.Animation
  public static var easeInOut: SwiftUI.Animation {
    get
  }
  public static func easeIn(duration: Swift.Double) -> SwiftUI.Animation
  public static var easeIn: SwiftUI.Animation {
    get
  }
  public static func easeOut(duration: Swift.Double) -> SwiftUI.Animation
  public static var easeOut: SwiftUI.Animation {
    get
  }
  public static func linear(duration: Swift.Double) -> SwiftUI.Animation
  public static var linear: SwiftUI.Animation {
    get
  }
  public static func timingCurve(_ c0x: Swift.Double, _ c0y: Swift.Double, _ c1x: Swift.Double, _ c1y: Swift.Double, duration: Swift.Double = 0.35) -> SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ForEach<Data, ID, Content> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
  public var data: Data
  public var content: (Data.Element) -> Content
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ForEach : SwiftUI.View where Content : SwiftUI.View {
  public typealias Body = Swift.Never
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.ForEach<Data, ID, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.ForEach<Data, ID, Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ForEach where ID == Data.Element.ID, Content : SwiftUI.View, Data.Element : Swift.Identifiable {
  public init(_ data: Data, @SwiftUI.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ForEach where Content : SwiftUI.View {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUI.View {
  public init(_ data: Swift.Range<Swift.Int>, @SwiftUI.ViewBuilder content: @escaping (Swift.Int) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static func interpolatingSpring(mass: Swift.Double = 1.0, stiffness: Swift.Double, damping: Swift.Double, initialVelocity: Swift.Double = 0.0) -> SwiftUI.Animation
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityLabel(_ label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityValue(_ value: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityHint(_ hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityInputLabels(_ inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityAddTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityRemoveTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityActivationPoint(_ activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityActivationPoint(_ activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityLabel(_ label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityValue(_ value: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityHint(_ hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityInputLabels(_ inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityAddTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityRemoveTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityActivationPoint(_ activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityActivationPoint(_ activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func accessibilityLabel(_ labelKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityLabel<S>(_ label: S) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  public func accessibilityValue(_ valueKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityValue<S>(_ value: S) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  public func accessibilityHint(_ hintKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityHint<S>(_ hint: S) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUI.LocalizedStringKey]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityLabel(_ labelKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityLabel<S>(_ label: S) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  public func accessibilityValue(_ valueKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityValue<S>(_ value: S) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  public func accessibilityHint(_ hintKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityHint<S>(_ hint: S) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUI.LocalizedStringKey]) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
extension View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  public func accessibility(hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  public func accessibility(label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  public func accessibility(value: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  public func accessibility(hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  public func accessibility(inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  public func accessibility(addTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  public func accessibility(removeTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  public func accessibility(identifier: Swift.String) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  public func accessibility(sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  public func accessibility(hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  public func accessibility(label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  public func accessibility(value: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  public func accessibility(hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  public func accessibility(inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  public func accessibility(addTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  public func accessibility(removeTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  public func accessibility(identifier: Swift.String) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  public func accessibility(sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
@frozen internal struct IDView<Content, ID> : SwiftUI.View where Content : SwiftUI.View, ID : Swift.Hashable {
  @usableFromInline
  internal var content: Content
  @usableFromInline
  internal var id: ID
  @inlinable internal init(_ content: Content, id: ID) {
        self.content = content
        self.id = id
    }
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func id<ID>(_ id: ID) -> some SwiftUI.View where ID : Swift.Hashable {
        return IDView(self, id: id)
    }
  
}
extension IDView {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  internal static func _makeView(view: SwiftUI._GraphValue<SwiftUI.IDView<Content, ID>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
}
extension IDView {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  internal static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.IDView<Content, ID>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @usableFromInline
  internal static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PreferenceValue<Key> where Key : SwiftUI.PreferenceKey {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _DelayedPreferenceView<Key, Content> : SwiftUI.View where Key : SwiftUI.PreferenceKey, Content : SwiftUI.View {
  public var transform: (SwiftUI._PreferenceValue<Key>) -> Content
  @inlinable public init(transform: @escaping (SwiftUI._PreferenceValue<Key>) -> Content) {
        self.transform = transform
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._DelayedPreferenceView<Key, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreferenceKey {
  @inlinable public static func _delay<T>(_ transform: @escaping (SwiftUI._PreferenceValue<Self>) -> T) -> some SwiftUI.View where T : SwiftUI.View {
        return _DelayedPreferenceView(transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func overlayPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUI.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUI.View where Key : SwiftUI.PreferenceKey, T : SwiftUI.View {
        return Key._delay { self.overlay($0._force(transform)) }
    }
  
  @inlinable public func backgroundPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUI.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUI.View where Key : SwiftUI.PreferenceKey, T : SwiftUI.View {
        return Key._delay { self.background($0._force(transform)) }
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  @inlinable public func onChange<V>(of value: V, perform action: @escaping (V) -> Swift.Void) -> some SwiftUI.View where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Scene {
  @inlinable public func onChange<V>(of value: V, perform action: @escaping (V) -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ValueActionModifier<Value> : SwiftUI.ViewModifier where Value : Swift.Equatable {
  public typealias Body = Swift.Never
  public var value: Value
  public var action: (Value) -> Swift.Void
  @inlinable public init(value: Value, action: @escaping (Value) -> Swift.Void) {
        (self.value, self.action) = (value, action)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension _ValueActionModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public enum _CrownHapticsConfiguration {
  case none
  case infiniteScrolling
  case finiteScrolling(CoreGraphics.CGFloat, CoreGraphics.CGFloat)
  case platters([SwiftUI._CrownHapticsConfiguration.Notch])
  public struct Notch {
    public enum Strength {
      case weak
      case standard
      case strong
      public static func == (a: SwiftUI._CrownHapticsConfiguration.Notch.Strength, b: SwiftUI._CrownHapticsConfiguration.Notch.Strength) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(from: CoreGraphics.CGFloat, to: CoreGraphics.CGFloat, strength: SwiftUI._CrownHapticsConfiguration.Notch.Strength)
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public protocol _CrownHapticsConfigurationProvider {
  func makeConfiguration() -> SwiftUI._CrownHapticsConfiguration
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension _CrownHapticsConfigurationProvider {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func notchRadius(forHeight notchHeight: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public func delay(_ delay: Swift.Double) -> SwiftUI.Animation
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol ProgressViewStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ProgressViewStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ProgressViewStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct CurrentValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let fractionCompleted: Swift.Double?
  public var label: SwiftUI.ProgressViewStyleConfiguration.Label?
  public var currentValueLabel: SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func progressViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ProgressViewStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public func speed(_ speed: Swift.Double) -> SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text : SwiftUI.View {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.Text>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _SymmetricallyScaledText : SwiftUI.View {
  public var source: SwiftUI.Text
  public var reference: SwiftUI.Text
  public init(source: SwiftUI.Text, reference: SwiftUI.Text)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._SymmetricallyScaledText>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ColorPicker<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(selection: SwiftUI.Binding<SwiftUI.Color>, supportsOpacity: Swift.Bool = true, @SwiftUI.ViewBuilder label: () -> Label)
  public init(selection: SwiftUI.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11ColorPickerV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ColorPicker where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<SwiftUI.Color>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<SwiftUI.Color>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct Gauge<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels> : SwiftUI.View where Label : SwiftUI.View, CurrentValueLabel : SwiftUI.View, BoundsLabel : SwiftUI.View, MarkedValueLabels : SwiftUI.View {
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUI.EmptyView, BoundsLabel == SwiftUI.EmptyView, MarkedValueLabels == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where BoundsLabel == SwiftUI.EmptyView, MarkedValueLabels == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUI.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> BoundsLabel) where MarkedValueLabels == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUI.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where BoundsLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUI.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> BoundsLabel, @SwiftUI.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where V : Swift.BinaryFloatingPoint
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5GaugeV4bodyQrvp", 0) 🦸<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels>
}
@available(iOS 14.5, macOS 11.0, tvOS 14.5, watchOS 7.4, *)
@usableFromInline
internal struct IsLeafTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { true }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public func foregroundColor(_ color: SwiftUI.Color?) -> SwiftUI.Text
  public func font(_ font: SwiftUI.Font?) -> SwiftUI.Text
  public func fontWeight(_ weight: SwiftUI.Font.Weight?) -> SwiftUI.Text
  public func bold() -> SwiftUI.Text
  public func italic() -> SwiftUI.Text
  public func strikethrough(_ active: Swift.Bool = true, color: SwiftUI.Color? = nil) -> SwiftUI.Text
  public func underline(_ active: Swift.Bool = true, color: SwiftUI.Color? = nil) -> SwiftUI.Text
  public func kerning(_ kerning: CoreGraphics.CGFloat) -> SwiftUI.Text
  public func tracking(_ tracking: CoreGraphics.CGFloat) -> SwiftUI.Text
  public func baselineOffset(_ baselineOffset: CoreGraphics.CGFloat) -> SwiftUI.Text
  public func _stylisticAlternative(_ alternative: SwiftUI.Font._StylisticAlternative) -> SwiftUI.Text
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ShadowView<Content> : SwiftUI.View where Content : SwiftUI.Shape {
  public var shape: Content
  public var effect: SwiftUI._ShadowEffect
  @inlinable public init(shape: Content, effect: SwiftUI._ShadowEffect) {
        self.shape = shape
        self.effect = effect
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ShadowView<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func asymmetric(insertion: SwiftUI.AnyTransition, removal: SwiftUI.AnyTransition) -> SwiftUI.AnyTransition
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OutlineGroup<Data, ID, Parent, Leaf, Subgroup> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension OutlineGroup where ID == Data.Element.ID, Parent : SwiftUI.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren>, Data.Element : Swift.Identifiable {
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension OutlineGroup where Parent : SwiftUI.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren> {
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension OutlineGroup : SwiftUI.View where Parent : SwiftUI.View, Leaf : SwiftUI.View, Subgroup : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12OutlineGroupVA2A4ViewR0_AaDR1_AaDR2_rlE4bodyQrvp", 0) 🦸<Data, ID, Parent, Leaf, Subgroup>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OutlineSubgroupChildren : SwiftUI.View {
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol Commands {
  associatedtype Body : SwiftUI.Commands
  @SwiftUI.CommandsBuilder var body: Self.Body { get }
  func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Commands {
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyCommands : SwiftUI.Commands {
  public init()
  public func _resolve(into: inout SwiftUI._ResolvedCommands)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ResolvedCommands {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Scene {
  public func commands<Content>(@SwiftUI.CommandsBuilder content: () -> Content) -> some SwiftUI.Scene where Content : SwiftUI.Commands
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUI.EmptyCommands {
        EmptyCommands()
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.Commands {
        content
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol EnvironmentalModifier : SwiftUI.ViewModifier where Self.Body == Swift.Never {
  associatedtype ResolvedModifier : SwiftUI.ViewModifier
  func resolve(in environment: SwiftUI.EnvironmentValues) -> Self.ResolvedModifier
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentalModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Font {
  public static func system(size: CoreGraphics.CGFloat, weight: SwiftUI.Font.Weight = .regular, design: SwiftUI.Font.Design = .default) -> SwiftUI.Font
  public enum Design : Swift.Hashable {
    case `default`
    @available(watchOS 7.0, *)
    case serif
    case rounded
    @available(watchOS 7.0, *)
    case monospaced
    public static func == (a: SwiftUI.Font.Design, b: SwiftUI.Font.Design) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SelectionShapeStyle : SwiftUI.ShapeStyle {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public struct ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUI.EmptyView {
        EmptyView()
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.View {
        content
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.View {
        content
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUI._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
        .init(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUI._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
        .init(storage: .falseContent(second))
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> SwiftUI.AnyView where Content : SwiftUI.View {
        .init(content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _CircleLayout {
  public let radius: CoreGraphics.CGFloat
  public init(radius: CoreGraphics.CGFloat)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct ScrollViewReader<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: (SwiftUI.ScrollViewProxy) -> Content
  @inlinable public init(@SwiftUI.ViewBuilder content: @escaping (SwiftUI.ScrollViewProxy) -> Content) {
        self.content = content
    }
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ScrollViewReaderV4bodyQrvp", 0) 🦸<Content>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ScrollViewProxy {
  public func scrollTo<ID>(_ id: ID, anchor: SwiftUI.UnitPoint? = nil) where ID : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding {
  public init<V>(_ base: SwiftUI.Binding<V>) where Value == V?
  public init?(_ base: SwiftUI.Binding<Value?>)
  public init<V>(_ base: SwiftUI.Binding<V>) where Value == Swift.AnyHashable, V : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Font {
  public static func custom(_ name: Swift.String, size: CoreGraphics.CGFloat) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, size: CoreGraphics.CGFloat, relativeTo textStyle: SwiftUI.Font.TextStyle) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:size:textStyle:)")
  public static func _custom(_ name: Swift.String, size: CoreGraphics.CGFloat, textStyle: SwiftUI.Font.TextStyle) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, fixedSize: CoreGraphics.CGFloat) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:fixedSize:)")
  public static func _custom(_ name: Swift.String, verbatimSize: CoreGraphics.CGFloat) -> SwiftUI.Font
  public init(_ font: CoreText.CTFont)
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination<Item, Content>(item: SwiftUI.Binding<Item?>, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination(isPresented: SwiftUI.Binding<Swift.Bool>, storyboardName: Swift.String) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination<Item>(item: SwiftUI.Binding<Item?>, storyboardName: Swift.String) -> some SwiftUI.View where Item : Swift.Identifiable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func fill<S>(_ content: S, style: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return _ShapeView(shape: self, style: content, fillStyle: style)
    }
  
  @inlinable public func fill(style: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View {
        return _ShapeView(shape: self,
            style: ForegroundStyle(), fillStyle: style)
    }
  
  @inlinable public func stroke<S>(_ content: S, style: SwiftUI.StrokeStyle) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return stroke(style: style).fill(content)
    }
  
  @inlinable public func stroke<S>(_ content: S, lineWidth: CoreGraphics.CGFloat = 1) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return stroke(content, style: StrokeStyle(lineWidth: lineWidth))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  public var body: SwiftUI._ShapeView<Self, SwiftUI.ForegroundStyle> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ShapeStyle where Self : SwiftUI.View, Self.Body == SwiftUI._ShapeView<SwiftUI.Rectangle, Self> {
  public var body: SwiftUI._ShapeView<SwiftUI.Rectangle, Self> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ShapeView<Content, Style> : SwiftUI.View where Content : SwiftUI.Shape, Style : SwiftUI.ShapeStyle {
  public var shape: Content
  public var style: Style
  public var fillStyle: SwiftUI.FillStyle
  @inlinable public init(shape: Content, style: Style, fillStyle: SwiftUI.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
        self.fillStyle = fillStyle
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ShapeView<Content, Style>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ProminentPopUpButtonStyle : SwiftUI._PopUpButtonStyle {
  public init()
  public func body(configuration: SwiftUI._ResolvedPopUpButton) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26_ProminentPopUpButtonStyleV4body13configurationQrAA09_ResolveddeF0V_tF", 0) 🦸
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _PlainPopUpButtonStyle : SwiftUI._PopUpButtonStyle {
  public init(showArrows: Swift.Bool)
  public func body(configuration: SwiftUI._ResolvedPopUpButton) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22_PlainPopUpButtonStyleV4body13configurationQrAA09_ResolveddeF0V_tF", 0) 🦸
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TexturedPopUpButtonStyle : SwiftUI._PopUpButtonStyle {
  public init()
  public func body(configuration: SwiftUI._ResolvedPopUpButton) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25_TexturedPopUpButtonStyleV4body13configurationQrAA09_ResolveddeF0V_tF", 0) 🦸
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct ListItemReuseIdentifierTrait : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.String {
    get { "ListCell" }
  }
  @usableFromInline
  internal typealias Value = Swift.String
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  public static var _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func fileMover(isPresented: SwiftUI.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View
  
  public func fileMover<C>(isPresented: SwiftUI.Binding<Swift.Bool>, files: C, onCompletion: @escaping (Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View where C : Swift.Collection, C.Element == Foundation.URL
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceReadingView<Key, Content> : SwiftUI.View where Key : SwiftUI.PreferenceKey, Content : SwiftUI.View {
  public var value: SwiftUI._PreferenceValue<Key>
  public var transform: (Key.Value) -> Content
  @inlinable public init(value: SwiftUI._PreferenceValue<Key>, transform: @escaping (Key.Value) -> Content) {
        self.value = value
        self.transform = transform
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._PreferenceReadingView<Key, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _PreferenceValue {
  @inlinable public func _force<T>(_ transform: @escaping (Key.Value) -> T) -> SwiftUI._PreferenceReadingView<Key, T> where T : SwiftUI.View {
        return _PreferenceReadingView(value: self, transform: transform)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public func repeatCount(_ repeatCount: Swift.Int, autoreverses: Swift.Bool = true) -> SwiftUI.Animation
  public func repeatForever(autoreverses: Swift.Bool = true) -> SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewListInputs {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ViewListCountInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewListOutputs {
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public protocol GaugeStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GaugeStyleConfiguration
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct GaugeStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct CurrentValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct MinimumValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct MaximumValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct MarkedValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public var value: Swift.Double
  public var label: SwiftUI.GaugeStyleConfiguration.Label
  public var currentValueLabel: SwiftUI.GaugeStyleConfiguration.CurrentValueLabel?
  public var minimumValueLabel: SwiftUI.GaugeStyleConfiguration.MinimumValueLabel?
  public var maximumValueLabel: SwiftUI.GaugeStyleConfiguration.MaximumValueLabel?
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension View {
  public func gaugeStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.GaugeStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct HStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: SwiftUI._VariadicView.Tree<SwiftUI._HStackLayout, Content>
  @inlinable public init(alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _HStackLayout(alignment: alignment, spacing: spacing), content: content())
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.HStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HStackLayout {
  public var alignment: SwiftUI.VerticalAlignment
  public var spacing: CoreGraphics.CGFloat?
  @inlinable public init(alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyHStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyHStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ListItemTint {
  public static func fixed(_ tint: SwiftUI.Color) -> SwiftUI.ListItemTint
  public static func preferred(_ tint: SwiftUI.Color) -> SwiftUI.ListItemTint
  public static let monochrome: SwiftUI.ListItemTint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  @inlinable public func listItemTint(_ tint: SwiftUI.ListItemTint?) -> some SwiftUI.View {
        _trait(ListItemTintTraitKey.self, tint)
    }
  
  @inlinable public func listItemTint(_ tint: SwiftUI.Color?) -> some SwiftUI.View {
        listItemTint(tint.map { .fixed($0) })
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct ListItemTintTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.ListItemTint? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.ListItemTint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityTraits : Swift.SetAlgebra {
  public static let isButton: SwiftUI.AccessibilityTraits
  public static let isHeader: SwiftUI.AccessibilityTraits
  public static let isSelected: SwiftUI.AccessibilityTraits
  public static let isLink: SwiftUI.AccessibilityTraits
  public static let isSearchField: SwiftUI.AccessibilityTraits
  public static let isImage: SwiftUI.AccessibilityTraits
  public static let playsSound: SwiftUI.AccessibilityTraits
  public static let isKeyboardKey: SwiftUI.AccessibilityTraits
  public static let isStaticText: SwiftUI.AccessibilityTraits
  public static let isSummaryElement: SwiftUI.AccessibilityTraits
  public static let updatesFrequently: SwiftUI.AccessibilityTraits
  public static let startsMediaSession: SwiftUI.AccessibilityTraits
  public static let allowsDirectInteraction: SwiftUI.AccessibilityTraits
  public static let causesPageTurn: SwiftUI.AccessibilityTraits
  public static let isModal: SwiftUI.AccessibilityTraits
  public init()
  public mutating func formUnion(_ other: SwiftUI.AccessibilityTraits)
  public func intersection(_ other: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits
  public mutating func formIntersection(_ other: SwiftUI.AccessibilityTraits)
  public func symmetricDifference(_ other: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits
  public mutating func formSymmetricDifference(_ other: SwiftUI.AccessibilityTraits)
  public func contains(_ member: SwiftUI.AccessibilityTraits) -> Swift.Bool
  public func union(_ other: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits
  public mutating func remove(_ member: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits?
  public mutating func insert(_ newMember: SwiftUI.AccessibilityTraits) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUI.AccessibilityTraits)
  public mutating func update(with newMember: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits?
  public static func == (a: SwiftUI.AccessibilityTraits, b: SwiftUI.AccessibilityTraits) -> Swift.Bool
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityTraits
  public typealias Element = SwiftUI.AccessibilityTraits
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public enum AccessibilityLabeledPairRole {
  case label
  case content
  public static func == (a: SwiftUI.AccessibilityLabeledPairRole, b: SwiftUI.AccessibilityLabeledPairRole) -> Swift.Bool
}
extension AccessibilityLabeledPairRole : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func accessibilityLinkedGroup<ID>(id: ID, in namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View where ID : Swift.Hashable
  
  public func accessibilityLabeledPair<ID>(role: SwiftUI.AccessibilityLabeledPairRole, id: ID, in namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View where ID : Swift.Hashable
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SquareBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.SquareBorderTextFieldStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26SquareBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ScrollViewBoundsModifier<Result> : SwiftUI.ViewModifier where Result : SwiftUI.ViewModifier {
  public var transform: (CoreGraphics.CGRect?) -> Result
  @inlinable public init(transform: @escaping (CoreGraphics.CGRect?) -> Result) {
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ScrollViewBoundsModifier<Result>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderedButtonMenuStyle : SwiftUI.MenuStyle {
  public init()
  public func makeBody(configuration: SwiftUI.BorderedButtonMenuStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23BorderedButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderlessButtonMenuStyle : SwiftUI.MenuStyle {
  public init()
  @available(iOS, unavailable)
  public init(showsMenuIndicator: Swift.Bool)
  public func makeBody(configuration: SwiftUI.BorderlessButtonMenuStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25BorderlessButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _defaultContext() -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _Rotation3DEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var angle: SwiftUI.Angle
  public var axis: (x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, z: CoreGraphics.CGFloat)
  public var anchor: SwiftUI.UnitPoint
  public var anchorZ: CoreGraphics.CGFloat
  public var perspective: CoreGraphics.CGFloat
  @inlinable public init(angle: SwiftUI.Angle, axis: (x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, z: CoreGraphics.CGFloat), anchor: SwiftUI.UnitPoint = .center, anchorZ: CoreGraphics.CGFloat = 0, perspective: CoreGraphics.CGFloat = 1) {
        self.angle = angle
        self.axis = axis
        self.anchor = anchor
        self.anchorZ = anchorZ
        self.perspective = perspective
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.Angle.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<SwiftUI.UnitPoint.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>>>>>
  public var animatableData: SwiftUI._Rotation3DEffect.AnimatableData {
    get
    set
  }
  public static func == (lhs: SwiftUI._Rotation3DEffect, rhs: SwiftUI._Rotation3DEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func rotation3DEffect(_ angle: SwiftUI.Angle, axis: (x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, z: CoreGraphics.CGFloat), anchor: SwiftUI.UnitPoint = .center, anchorZ: CoreGraphics.CGFloat = 0, perspective: CoreGraphics.CGFloat = 1) -> some SwiftUI.View {
        return modifier(_Rotation3DEffect(
            angle: angle, axis: axis, anchor: anchor, anchorZ: anchorZ,
            perspective: perspective
        ))
    }
  
}
extension UIHostingController {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Alignment : Swift.Equatable {
  public var horizontal: SwiftUI.HorizontalAlignment
  public var vertical: SwiftUI.VerticalAlignment
  @inlinable public init(horizontal: SwiftUI.HorizontalAlignment, vertical: SwiftUI.VerticalAlignment) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public static let center: SwiftUI.Alignment
  public static let leading: SwiftUI.Alignment
  public static let trailing: SwiftUI.Alignment
  public static let top: SwiftUI.Alignment
  public static let bottom: SwiftUI.Alignment
  public static let topLeading: SwiftUI.Alignment
  public static let topTrailing: SwiftUI.Alignment
  public static let bottomLeading: SwiftUI.Alignment
  public static let bottomTrailing: SwiftUI.Alignment
  public static func == (a: SwiftUI.Alignment, b: SwiftUI.Alignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ZStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: SwiftUI._VariadicView.Tree<SwiftUI._ZStackLayout, Content>
  @inlinable public init(alignment: SwiftUI.Alignment = .center, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _ZStackLayout(alignment: alignment), content: content())
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.ZStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ZStackLayout {
  public var alignment: SwiftUI.Alignment
  @inlinable public init(alignment: SwiftUI.Alignment = .center) {
        self.alignment = alignment
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TouchBarItemPresenceTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.TouchBarItemPresence? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.TouchBarItemPresence?
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func touchBarItemPresence(_ presence: SwiftUI.TouchBarItemPresence) -> some SwiftUI.View {
        return _trait(TouchBarItemPresenceTraitKey.self, presence)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TouchBarItemPrincipalTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func touchBarItemPrincipal(_ principal: Swift.Bool = true) -> some SwiftUI.View {
        return _trait(TouchBarItemPrincipalTraitKey.self, principal)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TouchBarCustomizationLabelTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.Text {
    get { Text("") }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.Text
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func touchBarCustomizationLabel(_ label: SwiftUI.Text) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Angle {
  public var radians: Swift.Double
  @inlinable public var degrees: Swift.Double {
    get { return radians * (180.0 / .pi) }
    set { radians = newValue * (.pi / 180.0) }
  }
  @inlinable public init() {
        self.init(radians: 0.0)
    }
  @inlinable public init(radians: Swift.Double) {
        self.radians = radians
    }
  @inlinable public init(degrees: Swift.Double) {
        self.init(radians: degrees * (.pi / 180.0))
    }
  @inlinable public static func radians(_ radians: Swift.Double) -> SwiftUI.Angle {
        return Angle(radians: radians)
    }
  @inlinable public static func degrees(_ degrees: Swift.Double) -> SwiftUI.Angle {
        return Angle(degrees: degrees)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Angle : Swift.Hashable, Swift.Comparable {
  @inlinable public static func < (lhs: SwiftUI.Angle, rhs: SwiftUI.Angle) -> Swift.Bool {
        return lhs.radians < rhs.radians
    }
  public static func == (a: SwiftUI.Angle, b: SwiftUI.Angle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Angle : SwiftUI.Animatable, SwiftUI._VectorMath {
  public var animatableData: Swift.Double {
    get
    set
  }
  @inlinable public static var zero: SwiftUI.Angle {
    get {
        return .init()
    }
  }
  public typealias AnimatableData = Swift.Double
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct Link<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(destination: Foundation.URL, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4LinkV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Link where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, destination: Foundation.URL)
  @_disfavoredOverload public init<S>(_ title: S, destination: Foundation.URL) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _EnvironmentKeyTransformModifier<Value> : SwiftUI.ViewModifier, SwiftUI._GraphInputsModifier {
  public var keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>
  public var transform: (inout Value) -> Swift.Void
  @inlinable public init(keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>, transform: @escaping (inout Value) -> Swift.Void) {
        self.keyPath = keyPath
        self.transform = transform
    }
  public static func _makeInputs(modifier: SwiftUI._GraphValue<SwiftUI._EnvironmentKeyTransformModifier<Value>>, inputs: inout SwiftUI._GraphInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformEnvironment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, V>, transform: @escaping (inout V) -> Swift.Void) -> some SwiftUI.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: keyPath, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct FetchedResults<Result> : Swift.RandomAccessCollection where Result : CoreData.NSFetchRequestResult {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> Result {
    get
  }
  public typealias Element = Result
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.FetchedResults<Result>>
  public typealias SubSequence = Swift.Slice<SwiftUI.FetchedResults<Result>>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper public struct FetchRequest<Result> : SwiftUI.DynamicProperty where Result : CoreData.NSFetchRequestResult {
  public var wrappedValue: SwiftUI.FetchedResults<Result> {
    get
  }
  public init(entity: CoreData.NSEntityDescription, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
  public init(fetchRequest: CoreData.NSFetchRequest<Result>, animation: SwiftUI.Animation? = nil)
  public init(fetchRequest: CoreData.NSFetchRequest<Result>, transaction: SwiftUI.Transaction)
  public mutating func update()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension FetchRequest where Result : CoreData.NSManagedObject {
  public init(sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PresentationMode {
  public var isPresented: Swift.Bool {
    get
  }
  public mutating func dismiss()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public var presentationMode: SwiftUI.Binding<SwiftUI.PresentationMode> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ViewDimensions {
  public var width: CoreGraphics.CGFloat {
    get
  }
  public var height: CoreGraphics.CGFloat {
    get
  }
  public subscript(guide: SwiftUI.HorizontalAlignment) -> CoreGraphics.CGFloat {
    get
  }
  public subscript(guide: SwiftUI.VerticalAlignment) -> CoreGraphics.CGFloat {
    get
  }
  public subscript(explicit guide: SwiftUI.HorizontalAlignment) -> CoreGraphics.CGFloat? {
    get
  }
  public subscript(explicit guide: SwiftUI.VerticalAlignment) -> CoreGraphics.CGFloat? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewDimensions : Swift.Equatable {
  public static func == (lhs: SwiftUI.ViewDimensions, rhs: SwiftUI.ViewDimensions) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func accessibilityScrollAction(_ handler: @escaping (SwiftUI.Edge) -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityScrollAction(_ handler: @escaping (SwiftUI.Edge) -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public init(_ cgImage: CoreGraphics.CGImage, scale: CoreGraphics.CGFloat, orientation: SwiftUI.Image.Orientation = .up, label: SwiftUI.Text)
  public init(decorative cgImage: CoreGraphics.CGImage, scale: CoreGraphics.CGFloat, orientation: SwiftUI.Image.Orientation = .up)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _CoordinateSpaceModifier<Name> : SwiftUI.ViewModifier, Swift.Equatable where Name : Swift.Hashable {
  public var name: Name
  @inlinable public init(name: Name) {
        self.name = name
    }
  public static func _makeViewInputs(modifier: SwiftUI._GraphValue<SwiftUI._CoordinateSpaceModifier<Name>>, inputs: inout SwiftUI._ViewInputs)
  public static func == (a: SwiftUI._CoordinateSpaceModifier<Name>, b: SwiftUI._CoordinateSpaceModifier<Name>) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func coordinateSpace<T>(name: T) -> some SwiftUI.View where T : Swift.Hashable {
        return modifier(_CoordinateSpaceModifier(name: name))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ContentShapeModifier<ContentShape> : SwiftUI.ViewModifier where ContentShape : SwiftUI.Shape {
  public var shape: ContentShape
  public var eoFill: Swift.Bool
  @inlinable public init(shape: ContentShape, eoFill: Swift.Bool = false) {
        self.shape = shape
        self.eoFill = eoFill
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ContentShapeModifier<ContentShape>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func contentShape<S>(_ shape: S, eoFill: Swift.Bool = false) -> some SwiftUI.View where S : SwiftUI.Shape {
        return modifier(_ContentShapeModifier(shape: shape, eoFill: eoFill))
    }
  
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct PageIndexViewStyle : SwiftUI.IndexViewStyle {
  public struct BackgroundDisplayMode {
    public static let automatic: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    public static let interactive: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    public static let always: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    public static let never: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
  }
  public init(backgroundDisplayMode: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode = .automatic)
  public func _makeBody(configuration: SwiftUI.PageIndexViewStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI18PageIndexViewStyleV9_makeBody13configurationQrAA01_deF13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _BenchmarkHost {
  public func viewForIdentifier<I, V>(_ identifier: I, _ type: V.Type) -> V? where I : Swift.Hashable, V : SwiftUI.View
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type, in _: V.Type) -> SwiftUI.Binding<S>? where I : Swift.Hashable, V : SwiftUI.View
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct UnifiedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceWritingModifier<Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var value: Key.Value
  public typealias Body = Swift.Never
  @inlinable public init(key: Key.Type = Key.self, value: Key.Value) {
        self.value = value
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceWritingModifier<Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceWritingModifier<Key>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _PreferenceWritingModifier : Swift.Equatable where Key.Value : Swift.Equatable {
  public static func == (a: SwiftUI._PreferenceWritingModifier<Key>, b: SwiftUI._PreferenceWritingModifier<Key>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func preference<K>(key: K.Type = K.self, value: K.Value) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_PreferenceWritingModifier<K>(value: value))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transaction(_ transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) -> some SwiftUI.View {
        return modifier(_TransactionModifier(transform: transform))
    }
  
  @inlinable public func animation(_ animation: SwiftUI.Animation?) -> some SwiftUI.View {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier {
  @inlinable public func transaction(_ transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) -> some SwiftUI.ViewModifier {
        return _PushPopTransactionModifier(content: self, transform: transform)
    }
  
  @inlinable public func animation(_ animation: SwiftUI.Animation?) -> some SwiftUI.ViewModifier {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TransactionModifier : SwiftUI.ViewModifier, SwiftUI._GraphInputsModifier {
  public var transform: (inout SwiftUI.Transaction) -> Swift.Void
  @inlinable public init(transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) {
        self.transform = transform
    }
  public static func _makeInputs(modifier: SwiftUI._GraphValue<SwiftUI._TransactionModifier>, inputs: inout SwiftUI._GraphInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PushPopTransactionModifier<Content> : SwiftUI.ViewModifier where Content : SwiftUI.ViewModifier {
  public var content: Content
  public var base: SwiftUI._TransactionModifier
  @inlinable public init(content: Content, transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) {
        self.content = content
        base = .init(transform: transform)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PushPopTransactionModifier<Content>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _RendererConfiguration {
  public enum Renderer {
    case `default`
    indirect case rasterized(_: SwiftUI._RendererConfiguration.RasterizationOptions = .init())
  }
  public var renderer: SwiftUI._RendererConfiguration.Renderer
  public var minFrameInterval: Swift.Double
  public init(renderer: SwiftUI._RendererConfiguration.Renderer = .default)
  public static func rasterized(_ options: SwiftUI._RendererConfiguration.RasterizationOptions = .init()) -> SwiftUI._RendererConfiguration
  public struct RasterizationOptions {
    public var colorMode: SwiftUI.ColorRenderingMode
    public var rbColorMode: Swift.Int32?
    public var rendersAsynchronously: Swift.Bool
    public var isOpaque: Swift.Bool
    public var drawsPlatformViews: Swift.Bool
    public var prefersDisplayCompositing: Swift.Bool
    public var maxDrawableCount: Swift.Int
    public init()
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func accessibilityElement(children: SwiftUI.AccessibilityChildBehavior = .ignore) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public var _defaultSwiftUIActivityEnvironmentLoggingEnabled: Swift.Bool
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func userActivity(_ activityType: Swift.String, isActive: Swift.Bool = true, _ update: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUI.View
  
  public func userActivity<P>(_ activityType: Swift.String, element: P?, _ update: @escaping (P, Foundation.NSUserActivity) -> ()) -> some SwiftUI.View
  
  public func onContinueUserActivity(_ activityType: Swift.String, perform action: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUI.View
  
  public func onOpenURL(perform action: @escaping (Foundation.URL) -> ()) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func handlesExternalEvents(preferring: Swift.Set<Swift.String>, allowing: Swift.Set<Swift.String>) -> some SwiftUI.View
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public enum _DigitalCrownDecelerationRate {
  case immediate
  case fast
  case normal
  public static func == (a: SwiftUI._DigitalCrownDecelerationRate, b: SwiftUI._DigitalCrownDecelerationRate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _DigitalCrownConfiguration {
  public var _isScrollIndicatorAlwaysOnScreen: Swift.Bool
  public var _onlyUseMinorDetents: Swift.Bool
  public var _decelerationRate: SwiftUI._DigitalCrownDecelerationRate
  public var _hapticsStrength: SwiftUI._CrownHapticsConfiguration.Notch.Strength
  public var isContinuous: Swift.Bool {
    get
    set
  }
  public var isHapticFeedbackEnabled: Swift.Bool
  public var rotationalSensitivity: SwiftUI.DigitalCrownRotationalSensitivity
  public init(minValue: Swift.Double, maxValue: Swift.Double, stride: Swift.Double.Stride? = nil)
}
public func __previewThunksHaveFinishedLoading()
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func fileExporter<D>(isPresented: SwiftUI.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View where D : SwiftUI.FileDocument
  
  public func fileExporter<C>(isPresented: SwiftUI.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  public func fileExporter<D>(isPresented: SwiftUI.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View where D : SwiftUI.ReferenceFileDocument
  
  public func fileExporter<C>(isPresented: SwiftUI.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Detachable {
  static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUI.PreferenceKey
  static var detachedProperties: SwiftUI._DetachableProperties { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachableProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let position: SwiftUI._DetachableProperties
  public static let dimensions: SwiftUI._DetachableProperties
  public static let environment: SwiftUI._DetachableProperties
  public static let transaction: SwiftUI._DetachableProperties
  public static let layout: SwiftUI._DetachableProperties
  public static let all: SwiftUI._DetachableProperties
  public typealias ArrayLiteralElement = SwiftUI._DetachableProperties
  public typealias Element = SwiftUI._DetachableProperties
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Detachable {
  public static var detachedProperties: SwiftUI._DetachableProperties {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _DetachedView<Detached, Content, Child> : SwiftUI.View where Detached : SwiftUI._Detachable, Content : SwiftUI.View, Child : SwiftUI.View {
  public var content: Content
  public var transform: (SwiftUI._DetachedPlaceholder<Detached>) -> Child
  @inlinable public init(content: Content, transform: @escaping (SwiftUI._DetachedPlaceholder<Detached>) -> Child) {
        self.content = content
        self.transform = transform
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._DetachedView<Detached, Content, Child>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func _detached<T, U>(with _: T.Type = T.self, _ transform: @escaping (SwiftUI._DetachedPlaceholder<T>) -> U) -> some SwiftUI.View where T : SwiftUI._Detachable, U : SwiftUI.View {
        return _DetachedView(content: self, transform: transform)
    }
  
  @inlinable public func _detached<T>(_ transform: @escaping (SwiftUI._DetachedPlaceholder<SwiftUI._EmptyDetached>) -> T) -> some SwiftUI.View where T : SwiftUI.View {
        return _DetachedView(content: self, transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachedKey<Key> : SwiftUI._Detachable where Key : SwiftUI.PreferenceKey {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUI.PreferenceKey
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EmptyDetached : SwiftUI._Detachable {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUI.PreferenceKey
  public static var detachedProperties: SwiftUI._DetachableProperties {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachedPlaceholder<Detached> : SwiftUI.View where Detached : SwiftUI._Detachable {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._DetachedPlaceholder<Detached>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DynamicPropertyBuffer {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct DefaultTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GraphInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _GraphInputsModifier {
  static func _makeInputs(modifier: SwiftUI._GraphValue<Self>, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func layoutPriority(_ value: Swift.Double) -> some SwiftUI.View {
        return _trait(LayoutPriorityTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct LayoutPriorityTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @usableFromInline
  internal typealias Value = Swift.Double
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Group<Content> {
  public typealias Body = Swift.Never
  @usableFromInline
  internal var content: Content
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Group : SwiftUI.View where Content : SwiftUI.View {
  @inlinable public init(@SwiftUI.ViewBuilder content: () -> Content) {
        self.content = content()
    }
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct DepthTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Int {
    get { 0 }
  }
  @usableFromInline
  internal typealias Value = Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsSectionedTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsEmptyViewTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsSectionFooterTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol TextFieldStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: SwiftUI.TextField<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._TextFieldStyleLabel
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _TextFieldStyleLabel : SwiftUI.View {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func textFieldStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.TextFieldStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
@frozen internal struct PropertyList : Swift.CustomStringConvertible {
  @usableFromInline
  internal var elements: SwiftUI.PropertyList.Element?
  @inlinable internal init() { elements = nil }
  @usableFromInline
  internal var description: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  internal class Tracker {
    @objc @usableFromInline
    deinit
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  internal class Element : Swift.CustomStringConvertible {
    @usableFromInline
    internal var description: Swift.String {
      get
    }
    @objc @usableFromInline
    deinit
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct DefaultGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultGaugeStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) 🦸
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol _PopUpButtonStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func body(configuration: SwiftUI._ResolvedPopUpButton) -> Self.Body
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ResolvedPopUpButton : SwiftUI.View {
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func _popUpButtonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI._PopUpButtonStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func mask<Mask>(_ mask: Mask) -> some SwiftUI.View where Mask : SwiftUI.View {
        return modifier(_MaskEffect(mask: mask))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _MaskEffect<Mask> : SwiftUI.ViewModifier where Mask : SwiftUI.View {
  public var mask: Mask
  @inlinable public init(mask: Mask) {
        self.mask = mask
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._MaskEffect<Mask>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _MaskEffect : Swift.Equatable where Mask : Swift.Equatable {
  public static func == (a: SwiftUI._MaskEffect<Mask>, b: SwiftUI._MaskEffect<Mask>) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func navigationTitle(_ title: SwiftUI.Text) -> some SwiftUI.View
  
  public func navigationTitle(_ titleKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  @_disfavoredOverload public func navigationTitle<S>(_ title: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func navigationTitle<V>(@SwiftUI.ViewBuilder _ title: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func navigationBarTitleDisplayMode(_ displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View
  
}
@available(macCatalyst 14.0, macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func navigationSubtitle(_ subtitle: SwiftUI.Text) -> some SwiftUI.View
  
  public func navigationSubtitle(_ subtitleKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  @_disfavoredOverload public func navigationSubtitle<S>(_ subtitle: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper public struct Environment<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.EnvironmentValues, Value>)
    case value(Value)
  }
  @usableFromInline
  internal var content: SwiftUI.Environment<Value>.Content
  @inlinable public init(_ keyPath: Swift.KeyPath<SwiftUI.EnvironmentValues, Value>) {
        content = .keyPath(keyPath)
    }
  @inlinable public var wrappedValue: Value {
    get {
        switch content {
        case let .value(value):
            return value
        case let .keyPath(keyPath):
            // not bound to a view, return the default value.
            return EnvironmentValues()[keyPath : keyPath]
        }
    }
  }
  @usableFromInline
  internal func error() -> Swift.Never
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper @dynamicMemberLookup public struct Binding<Value> {
  public var transaction: SwiftUI.Transaction
  internal var location: SwiftUI.AnyLocation<Value>
  fileprivate var _value: Value
  public init(get: @escaping () -> Value, set: @escaping (Value) -> Swift.Void)
  public init(get: @escaping () -> Value, set: @escaping (Value, SwiftUI.Transaction) -> Swift.Void)
  public static func constant(_ value: Value) -> SwiftUI.Binding<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  public subscript<Subject>(dynamicMember keyPath: Swift.WritableKeyPath<Value, Subject>) -> SwiftUI.Binding<Subject> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding {
  public func transaction(_ transaction: SwiftUI.Transaction) -> SwiftUI.Binding<Value>
  public func animation(_ animation: SwiftUI.Animation? = .default) -> SwiftUI.Binding<Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding : SwiftUI.DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Anchor.Source where Value == CoreGraphics.CGRect {
  public static func rect(_ r: CoreGraphics.CGRect) -> SwiftUI.Anchor<Value>.Source
  public static var bounds: SwiftUI.Anchor<CoreGraphics.CGRect>.Source {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_typeEraser(AnyView) public protocol View {
  static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Never : SwiftUI.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _UnaryViewAdaptor<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: Content
  @inlinable public init(_ content: Content) { self.content = content }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._UnaryViewAdaptor<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct Label<Title, Icon> : SwiftUI.View where Title : SwiftUI.View, Icon : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5LabelV4bodyQrvp", 0) 🦸<Title, Icon>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Label where Title == SwiftUI.Text, Icon == SwiftUI.Image {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, image name: Swift.String)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, systemImage name: Swift.String)
  @_disfavoredOverload public init<S>(_ title: S, image name: Swift.String) where S : Swift.StringProtocol
  @_disfavoredOverload public init<S>(_ title: S, systemImage name: Swift.String) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Label where Title == SwiftUI.LabelStyleConfiguration.Title, Icon == SwiftUI.LabelStyleConfiguration.Icon {
  public init(_ configuration: SwiftUI.LabelStyleConfiguration)
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension Image {
  public init(uiImage: UIKit.UIImage)
}
extension RangeReplaceableCollection where Self : Swift.MutableCollection {
  public mutating func remove(atOffsets offsets: Foundation.IndexSet)
}
extension MutableCollection {
  public mutating func move(fromOffsets source: Foundation.IndexSet, toOffset destination: Swift.Int)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __SimpleColumnLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension Color {
  public init(_ color: UIKit.UIColor)
}
extension UIColor {
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  @available(macOS, unavailable)
  convenience public init(_ color: SwiftUI.Color)
}
extension ColorScheme {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceStyle: UIKit.UIUserInterfaceStyle)
}
extension UIUserInterfaceStyle {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorScheme: SwiftUI.ColorScheme?)
}
extension ColorSchemeContrast {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiAccessibilityContrast: UIKit.UIAccessibilityContrast)
}
extension UIAccessibilityContrast {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorSchemeContrast: SwiftUI.ColorSchemeContrast?)
}
extension ContentSizeCategory {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiSizeCategory: UIKit.UIContentSizeCategory)
}
extension UIContentSizeCategory {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeCategory: SwiftUI.ContentSizeCategory?)
}
extension LayoutDirection {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLayoutDirection: UIKit.UITraitEnvironmentLayoutDirection)
}
extension UITraitEnvironmentLayoutDirection {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ layoutDirection: SwiftUI.LayoutDirection)
}
extension LegibilityWeight {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLegibilityWeight: UIKit.UILegibilityWeight)
}
extension UILegibilityWeight {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ legibilityWeight: SwiftUI.LegibilityWeight?)
}
extension UserInterfaceSizeClass {
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceSizeClass: UIKit.UIUserInterfaceSizeClass)
}
extension UIUserInterfaceSizeClass {
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeClass: SwiftUI.UserInterfaceSizeClass?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum AccessibilityAdjustmentDirection {
  case increment
  case decrement
  public static func == (a: SwiftUI.AccessibilityAdjustmentDirection, b: SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, tvOS 13.0, watchOS 7.0, *)
@available(macOS, unavailable)
public struct StackNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI24StackNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) 🦸
}
@available(tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
extension View {
  public func prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true, in namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View
  
  public func focusScope(_ namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func _prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true) -> some SwiftUI.View
  
}
@available(macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
public struct _DefaultFocusModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DefaultFocusModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 11.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
public struct _FocusSystem {
  @available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
  public func resetToDefault()
}
@available(tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
public struct ResetFocusAction {
  public func callAsFunction(in namespace: SwiftUI.Namespace.ID)
}
@available(tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
extension EnvironmentValues {
  public var resetFocus: SwiftUI.ResetFocusAction {
    get
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension EnvironmentValues {
  public var _focusSystem: SwiftUI._FocusSystem {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct AppStorage<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var location: SwiftUI.UserDefaultLocation<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AppStorage {
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AppStorage where Value : Swift.ExpressibleByNilLiteral {
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Scene {
  public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  @usableFromInline
  internal var defaultAppStorageDefaults: Foundation.UserDefaults {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class UserDefaultLocation<Value> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGPoint : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>
  public var animatableData: CoreGraphics.CGPoint.AnimatableData {
    @inlinable get { return .init(x, y) }
    @inlinable set { (x, y) = newValue[] }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGSize : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>
  public var animatableData: CoreGraphics.CGSize.AnimatableData {
    @inlinable get { return .init(width, height) }
    @inlinable set { (width, height) = newValue[] }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGRect : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGPoint.AnimatableData, CoreGraphics.CGSize.AnimatableData>
  public var animatableData: CoreGraphics.CGRect.AnimatableData {
    @inlinable get {
            return .init(origin.animatableData, size.animatableData)
        }
    @inlinable set {
            (origin.animatableData, size.animatableData) = newValue[]
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Form<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4FormV4bodyQrvp", 0) 🦸<Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol VectorArithmetic : Swift.AdditiveArithmetic {
  mutating func scale(by rhs: Swift.Double)
  var magnitudeSquared: Swift.Double { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Float : SwiftUI.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= Float(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Double : SwiftUI.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= rhs }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return self * self }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGFloat : SwiftUI.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= CGFloat(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol UIViewRepresentable : SwiftUI.View where Self.Body == Swift.Never {
  associatedtype UIViewType : UIKit.UIView
  func makeUIView(context: Self.Context) -> Self.UIViewType
  func updateUIView(_ uiView: Self.UIViewType, context: Self.Context)
  static func dismantleUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  func makeCoordinator() -> Self.Coordinator
  func _identifiedViewTree(in uiView: Self.UIViewType) -> SwiftUI._IdentifiedViewTree
  func _overrideSizeThatFits(_ size: inout CoreGraphics.CGSize, in proposedSize: SwiftUI._ProposedSize, uiView: Self.UIViewType)
  func _overrideLayoutTraits(_ layoutTraits: inout SwiftUI._LayoutTraits, for uiView: Self.UIViewType)
  typealias Context = SwiftUI.UIViewRepresentableContext<Self>
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension UIViewRepresentable where Self.Coordinator == Swift.Void {
  public func makeCoordinator() -> Self.Coordinator
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension UIViewRepresentable {
  public static func dismantleUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator)
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public func _identifiedViewTree(in uiView: Self.UIViewType) -> SwiftUI._IdentifiedViewTree
  public func _overrideSizeThatFits(_ size: inout CoreGraphics.CGSize, in proposedSize: SwiftUI._ProposedSize, uiView: Self.UIViewType)
  public func _overrideLayoutTraits(_ layoutTraits: inout SwiftUI._LayoutTraits, for uiView: Self.UIViewType)
  public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct UIViewRepresentableContext<Representable> where Representable : SwiftUI.UIViewRepresentable {
  public let coordinator: Representable.Coordinator
  public var transaction: SwiftUI.Transaction {
    get
  }
  public var environment: SwiftUI.EnvironmentValues {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Button<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(action: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ButtonV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Button where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, action: @escaping () -> Swift.Void)
  @_disfavoredOverload public init<S>(_ title: S, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Button where Label == SwiftUI.PrimitiveButtonStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public init(_ configuration: SwiftUI.PrimitiveButtonStyleConfiguration)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Picker<Label, SelectionValue, Content> : SwiftUI.View where Label : SwiftUI.View, SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  public init(selection: SwiftUI.Binding<SelectionValue>, label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6PickerV4bodyQrvp", 0) 🦸<Label, SelectionValue, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Picker where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<SelectionValue>, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<SelectionValue>, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct EnvironmentValues : Swift.CustomStringConvertible {
  public init()
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUI.EnvironmentKey {
    get
    set
  }
  public var description: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PreferenceKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)
  static var _includesRemovedValues: Swift.Bool { get }
  static var _isReadableByHost: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreferenceKey where Self.Value : Swift.ExpressibleByNilLiteral {
  public static var defaultValue: Self.Value {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreferenceKey {
  public static var _includesRemovedValues: Swift.Bool {
    get
  }
  public static var _isReadableByHost: Swift.Bool {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TupleCommandContent<T> : SwiftUI.Commands {
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Group : SwiftUI.Commands where Content : SwiftUI.Commands {
  @inlinable public init(@SwiftUI.CommandsBuilder content: () -> Content) {
        self.content = content()
    }
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Transaction {
  @usableFromInline
  internal var plist: SwiftUI.PropertyList
  @inlinable public init() {
        plist = PropertyList()
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func withTransaction<Result>(_ transaction: SwiftUI.Transaction, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func withAnimation<Result>(_ animation: SwiftUI.Animation? = .default, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public func opacity(_ opacity: Swift.Double) -> SwiftUI.Color
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ExpandedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Anchor.Source where Value == CoreGraphics.CGPoint {
  public static func point(_ p: CoreGraphics.CGPoint) -> SwiftUI.Anchor<Value>.Source
  public static func unitPoint(_ p: SwiftUI.UnitPoint) -> SwiftUI.Anchor<Value>.Source
  public static var topLeading: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var top: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var topTrailing: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var leading: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var center: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var trailing: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var bottomLeading: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var bottom: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var bottomTrailing: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.PullDownMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI23PullDownMenuButtonStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) 🦸
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderlessPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessPullDownMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI33BorderlessPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) 🦸
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderlessButtonMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessButtonMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI020BorderlessButtonMenuD5StyleV5_body13configurationQrAA01_edF13ConfigurationV_tF", 0) 🦸
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `TexturedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TexturedPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI._TexturedPullDownMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI32_TexturedPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol EnvironmentKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUI.View
  
  public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping ([Foundation.NSItemProvider], CoreGraphics.CGPoint) -> Swift.Bool) -> some SwiftUI.View
  
  public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], delegate: SwiftUI.DropDelegate) -> some SwiftUI.View
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropInfo {
  public var location: CoreGraphics.CGPoint {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  public func hasItemsConforming(to contentTypes: [UniformTypeIdentifiers.UTType]) -> Swift.Bool
  @available(iOS 14.0, macOS 11.0, *)
  public func itemProviders(for contentTypes: [UniformTypeIdentifiers.UTType]) -> [Foundation.NSItemProvider]
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DropDelegate {
  func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  func performDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  func dropEntered(info: SwiftUI.DropInfo)
  func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  func dropExited(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DropDelegate {
  public func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  public func dropEntered(info: SwiftUI.DropInfo)
  public func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  public func dropExited(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum DropOperation {
  case cancel
  case forbidden
  case copy
  case move
  public static func == (a: SwiftUI.DropOperation, b: SwiftUI.DropOperation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropProposal {
  public let operation: SwiftUI.DropOperation
  public init(operation: SwiftUI.DropOperation)
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping ([Foundation.NSItemProvider], CoreGraphics.CGPoint) -> Swift.Bool) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrop(of supportedTypes: [Swift.String], delegate: SwiftUI.DropDelegate) -> some SwiftUI.View
  
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DropInfo {
  public func hasItemsConforming(to types: [Swift.String]) -> Swift.Bool
  public func itemProviders(for types: [Swift.String]) -> [Foundation.NSItemProvider]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Anchor<Value> {
  fileprivate let box: SwiftUI.AnchorValueBoxBase<Value>
  @frozen public struct Source {
    private var box: SwiftUI.AnchorBoxBase<Value>
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnchorBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnchorValueBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Anchor.Source {
  public init<T>(_ array: [SwiftUI.Anchor<T>.Source]) where Value == [T]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Anchor.Source {
  public init<T>(_ anchor: SwiftUI.Anchor<T>.Source?) where Value == T?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VectorMath : SwiftUI.Animatable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VectorMath {
  @inlinable public var magnitude: Swift.Double {
    get {
        return animatableData.magnitudeSquared.squareRoot()
    }
  }
  @inlinable public mutating func negate() {
        animatableData = .zero - animatableData
    }
  @inlinable prefix public static func - (operand: Self) -> Self {
        var result = operand
        result.negate()
        return result
    }
  @inlinable public static func += (lhs: inout Self, rhs: Self) {
        lhs.animatableData += rhs.animatableData
    }
  @inlinable public static func + (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result += rhs
        return result
    }
  @inlinable public static func -= (lhs: inout Self, rhs: Self) {
        lhs.animatableData -= rhs.animatableData
    }
  @inlinable public static func - (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result -= rhs
        return result
    }
  @inlinable public static func *= (lhs: inout Self, rhs: Swift.Double) {
        lhs.animatableData.scale(by: rhs)
    }
  @inlinable public static func * (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result *= rhs
        return result
    }
  @inlinable public static func /= (lhs: inout Self, rhs: Swift.Double) {
        lhs *= 1 / rhs
    }
  @inlinable public static func / (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result /= rhs
        return result
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ProjectionEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var transform: SwiftUI.ProjectionTransform
  @inlinable public init(transform: SwiftUI.ProjectionTransform) {
        self.transform = transform
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public static func == (a: SwiftUI._ProjectionEffect, b: SwiftUI._ProjectionEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func projectionEffect(_ transform: SwiftUI.ProjectionTransform) -> some SwiftUI.View {
        return modifier(_ProjectionEffect(transform: transform))
    }
  
}
public protocol _PerformanceTest : SwiftUI._Test {
  var name: Swift.String { get }
  func runTest(host: SwiftUI._BenchmarkHost, options: [Swift.AnyHashable : Any])
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension __App {
  public static func _registerPerformanceTests(_ tests: [SwiftUI._PerformanceTest])
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension _BenchmarkHost {
  public func _started(test: SwiftUI._PerformanceTest)
  public func _finished(test: SwiftUI._PerformanceTest)
  public func _failed(test: SwiftUI._PerformanceTest)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __SpiralLayout {
  public typealias AnimatableData = SwiftUI.Angle.AnimatableData
  public init(spacing: SwiftUI.Angle)
  public var animatableData: SwiftUI.__SpiralLayout.AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _BackdropEffect<Backdrop> where Backdrop : SwiftUI.View {
  @usableFromInline
  internal var backdrop: Backdrop
  @inlinable internal init(backdrop: Backdrop) {
        self.backdrop = backdrop
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BackdropEffect<Backdrop>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _BackdropEffectPlaceholder {
  @inlinable internal init() {}
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._BackdropEffectPlaceholder>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
  public func help(_ textKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  public func help(_ text: SwiftUI.Text) -> some SwiftUI.View
  
  @_disfavoredOverload public func help<S>(_ text: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ToolbarCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ToolbarCommandsV4bodyQrvp", 0) 🦸
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SidebarCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15SidebarCommandsV4bodyQrvp", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal enum Log {
  @usableFromInline
  internal static var runtimeIssuesLog: os.OSLog
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol Widget {
  associatedtype Body : SwiftUI.WidgetConfiguration
  init()
  var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Graph {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GraphValue<Value> : Swift.Equatable {
  public subscript<U>(keyPath: Swift.KeyPath<Value, U>) -> SwiftUI._GraphValue<U> {
    get
  }
  public static func == (a: SwiftUI._GraphValue<Value>, b: SwiftUI._GraphValue<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ConditionalContent<TrueContent, FalseContent> {
  @usableFromInline
  @frozen internal enum Storage {
    case trueContent(TrueContent)
    case falseContent(FalseContent)
  }
  @usableFromInline
  internal let storage: SwiftUI._ConditionalContent<TrueContent, FalseContent>.Storage
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ConditionalContent : SwiftUI.View where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  public typealias Body = Swift.Never
  @usableFromInline
  internal init(storage: SwiftUI._ConditionalContent<TrueContent, FalseContent>.Storage)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(macOS 10.15, tvOS 13.0, watchOS 7.0, *)
@available(iOS, unavailable)
public struct BorderedButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.BorderedButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19BorderedButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) 🦸
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum CoordinateSpace {
  case global
  case local
  case named(Swift.AnyHashable)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoordinateSpace {
  public var isGlobal: Swift.Bool {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoordinateSpace : Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.CoordinateSpace, rhs: SwiftUI.CoordinateSpace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __RadialLayout {
  public var radius: CoreGraphics.CGFloat
  public var size: CoreGraphics.CGSize
  public init(radius: CoreGraphics.CGFloat, size: CoreGraphics.CGSize)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Animation : Swift.Equatable {
  internal var box: SwiftUI.AnimationBoxBase
  public static func == (lhs: SwiftUI.Animation, rhs: SwiftUI.Animation) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomReflectable {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var customMirror: Swift.Mirror {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnimationBoxBase {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DatePicker<Label> : SwiftUI.View where Label : SwiftUI.View {
  public typealias Components = SwiftUI.DatePickerComponents
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10DatePickerV4bodyQrvp", 0) 🦸<Label>
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DatePicker {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DatePicker where Label == SwiftUI.Text {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DatePickerComponents : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let hourAndMinute: SwiftUI.DatePickerComponents
  public static let date: SwiftUI.DatePickerComponents
  public typealias ArrayLiteralElement = SwiftUI.DatePickerComponents
  public typealias Element = SwiftUI.DatePickerComponents
  public typealias RawValue = Swift.UInt
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _StrokedShape<S> : SwiftUI.Shape where S : SwiftUI.Shape {
  public var shape: S
  public var style: SwiftUI.StrokeStyle
  @inlinable public init(shape: S, style: SwiftUI.StrokeStyle) {
        self.shape = shape
        self.style = style
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.AnimatablePair<S.AnimatableData, SwiftUI.StrokeStyle.AnimatableData>
  public var animatableData: SwiftUI._StrokedShape<S>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI._StrokedShape<S>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func stroke(style: SwiftUI.StrokeStyle) -> some SwiftUI.Shape {
        return _StrokedShape(shape: self, style: style)
    }
  
  @inlinable public func stroke(lineWidth: CoreGraphics.CGFloat = 1) -> some SwiftUI.Shape {
        return stroke(style: StrokeStyle(lineWidth: lineWidth))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Scene {
  public func handlesExternalEvents(matching conditions: Swift.Set<Swift.String>) -> some SwiftUI.Scene
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct GridItem {
  public enum Size {
    case fixed(_: CoreGraphics.CGFloat)
    case flexible(minimum: CoreGraphics.CGFloat = 10, maximum: CoreGraphics.CGFloat = .infinity)
    case adaptive(minimum: CoreGraphics.CGFloat, maximum: CoreGraphics.CGFloat = .infinity)
  }
  public var size: SwiftUI.GridItem.Size
  public var spacing: CoreGraphics.CGFloat?
  public var alignment: SwiftUI.Alignment?
  public init(_ size: SwiftUI.GridItem.Size = .flexible(), spacing: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment? = nil)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyHGrid<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(rows: [SwiftUI.GridItem], alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyHGrid<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyVGrid<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(columns: [SwiftUI.GridItem], alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyVGrid<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension View {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func statusBar(hidden: Swift.Bool) -> some SwiftUI.View
  
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _statusBar(hidden: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper public struct EnvironmentObject<ObjectType> : SwiftUI.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @frozen public struct Wrapper {
    internal let root: ObjectType
    public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUI.Binding<Subject> {
      get
    }
  }
  @inlinable public var wrappedValue: ObjectType {
    get {
      guard let store = _store else { error() }
      return store
    }
  }
  @usableFromInline
  internal var _store: ObjectType?
  @usableFromInline
  internal var _seed: Swift.Int = 0
  public var projectedValue: SwiftUI.EnvironmentObject<ObjectType>.Wrapper {
    get
  }
  @usableFromInline
  internal func error() -> Swift.Never
  public init()
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func environmentObject<T>(_ object: T) -> some SwiftUI.View where T : Combine.ObservableObject {
        return environment(T.environmentStore, object)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ObservableObject {
  @usableFromInline
  internal static var environmentStore: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Self?> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Alert {
  public init(title: SwiftUI.Text, message: SwiftUI.Text? = nil, dismissButton: SwiftUI.Alert.Button? = nil)
  public init(title: SwiftUI.Text, message: SwiftUI.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public static func sideBySideButtons(title: SwiftUI.Text, message: SwiftUI.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button) -> SwiftUI.Alert
  public struct Button {
    public static func `default`(_ label: SwiftUI.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func cancel(_ label: SwiftUI.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func cancel(_ action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func destructive(_ label: SwiftUI.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func alert<Item>(item: SwiftUI.Binding<Item?>, content: (Item) -> SwiftUI.Alert) -> some SwiftUI.View where Item : Swift.Identifiable
  
  public func alert(isPresented: SwiftUI.Binding<Swift.Bool>, content: () -> SwiftUI.Alert) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public enum ResizingMode {
    case tile
    case stretch
    public static func == (a: SwiftUI.Image.ResizingMode, b: SwiftUI.Image.ResizingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func resizable(capInsets: SwiftUI.EdgeInsets = EdgeInsets(), resizingMode: SwiftUI.Image.ResizingMode = .stretch) -> SwiftUI.Image
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent, C9 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent, C9 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget {
        return TupleWidget<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget, C2 : SwiftUI.Widget {
        return TupleWidget<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget, C2 : SwiftUI.Widget, C3 : SwiftUI.Widget {
        return TupleWidget<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget, C2 : SwiftUI.Widget, C3 : SwiftUI.Widget, C4 : SwiftUI.Widget {
        return TupleWidget<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands {
        TupleCommandContent((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands, C9 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleView<(C0, C1)> where C0 : SwiftUI.View, C1 : SwiftUI.View {
        return .init((c0, c1))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleView<(C0, C1, C2)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View {
        return .init((c0, c1, c2))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleView<(C0, C1, C2, C3)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View {
        return .init((c0, c1, c2, c3))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6, C7)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View, C8 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View, C8 : SwiftUI.View, C9 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene {
        return _TupleScene((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene, C7 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene, C7 : SwiftUI.Scene, C8 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene, C7 : SwiftUI.Scene, C8 : SwiftUI.Scene, C9 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
extension View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<L, T>(leading: L, trailing: T) -> some SwiftUI.View where L : SwiftUI.View, T : SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<L>(leading: L) -> some SwiftUI.View where L : SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<T>(trailing: T) -> some SwiftUI.View where T : SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
open class _UIHostingView<Content> : UIKit.UIView where Content : SwiftUI.View {
  required public init(rootView: Content)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  final public var _rendererConfiguration: SwiftUI._RendererConfiguration {
    get
    set
  }
  final public var _rendererObject: Swift.AnyObject? {
    get
  }
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open func didMoveToSuperview()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func safeAreaInsetsDidChange()
  @objc override dynamic open var safeAreaInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  final public func _viewDebugData() -> [SwiftUI._ViewDebug.Data]
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector!) -> Swift.Bool
  @objc override dynamic open func canPerformAction(_ selector: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic open func target(forAction selector: ObjectiveC.Selector, withSender sender: Any?) -> Any?
  @objc override dynamic open func forwardingTarget(for selector: ObjectiveC.Selector!) -> Any?
  @objc override dynamic open var preferredFocusEnvironments: [UIKit.UIFocusEnvironment] {
    @objc get
  }
  @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension _UIHostingView {
  public func _renderForTest(interval: Swift.Double)
  public func _performScrollTest(startOffset: CoreGraphics.CGFloat = 0.0, iterations: Swift.Int = 0, delta: CoreGraphics.CGFloat = 0.0, length: CoreGraphics.CGFloat = 0.0, completion: (() -> Swift.Void)? = nil)
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
open class UIHostingController<Content> : UIKit.UIViewController where Content : SwiftUI.View {
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  public init(rootView: Content)
  public init?(coder aDecoder: Foundation.NSCoder, rootView: Content)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func loadView()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  public var rootView: Content {
    get
    set
  }
  public func sizeThatFits(in size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  public func _render(seconds: Swift.Double)
  public func _forEachIdentifiedView(body: (SwiftUI._IdentifiedViewProxy) -> Swift.Void)
  public var _disableSafeArea: Swift.Bool {
    get
    set
  }
  @objc override dynamic open func preferredContentSizeDidChange(forChildContentContainer container: UIKit.UIContentContainer)
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
  @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func willMove(toParent parent: UIKit.UIViewController?)
  @objc override dynamic open func didMove(toParent parent: UIKit.UIViewController?)
  final public var _rendererConfiguration: SwiftUI._RendererConfiguration {
    get
    set
  }
  final public var _rendererObject: Swift.AnyObject? {
    get
  }
  @objc override dynamic open func target(forAction action: ObjectiveC.Selector, withSender sender: Any?) -> Any?
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._TraitWritingModifier : SwiftUI.ViewModifier {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 11.0, *)
extension SwiftUI.Image.Scale : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 11.0, *)
extension SwiftUI.Image.Scale : Swift.Hashable {}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UserInterfaceSizeClass : Swift.Equatable {}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UserInterfaceSizeClass : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.Commands {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._UIHostingView : SwiftUI._BenchmarkHost {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout.FillDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout.FillDirection : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OverlayLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OverlayLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OverlayLayout : SwiftUI._VariadicView_ViewRoot {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color.RGBColorSpace : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color.RGBColorSpace : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__BedtimeTickLabelsLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__BedtimeTickLabelsLayout : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.BackgroundStyle : SwiftUI.ShapeStyle {}
@available(iOS, introduced: 14.0, deprecated: 14.0, renamed: "BackgroundStyle")
@available(macOS, introduced: 11.0, deprecated: 11.0, renamed: "BackgroundStyle")
@available(tvOS, introduced: 14.0, deprecated: 14.0, renamed: "BackgroundStyle")
@available(watchOS, introduced: 7.0, deprecated: 7.0, renamed: "BackgroundStyle")
extension SwiftUI._BackgroundStyle : SwiftUI.ShapeStyle {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ViewRemovalLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ViewRemovalLayout : SwiftUI.Animatable {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Equatable {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerViewModifier : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerViewModifier : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerColorMatrixEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AspectRatioLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AspectRatioLayout : SwiftUI.ViewModifier {}
extension SwiftUI._FixedSizeLayout : SwiftUI.Animatable {}
extension SwiftUI._FixedSizeLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForegroundStyle : SwiftUI.ShapeStyle {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScenePhase : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FourUpLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FourUpLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PaddingLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PaddingLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VAlignment : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VAlignment : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AlignmentLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AlignmentLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SafeAreaIgnoringLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SafeAreaIgnoringLayout : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SafeAreaRegionsIgnoringLayout : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SafeAreaRegionsIgnoringLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__IconLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__IconLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font.TextStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font.TextStyle : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlurEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlurEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BrightnessEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BrightnessEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorInvertEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorInvertEffect : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMatrixEffect : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMatrixEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.Orientation : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorMultiplyEffect._Resolved : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorMultiplyEffect._Resolved : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ContrastEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ContrastEffect : SwiftUI.ViewModifier {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._GrayscaleEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._GrayscaleEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HueRotationEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HueRotationEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._LuminanceToAlphaEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._LuminanceToAlphaEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SaturationEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SaturationEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OpacityEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OpacityEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ResizableImagesExampleLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ResizableImagesExampleLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlendModeEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlendModeEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorRenderingMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CompositingGroupEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CompositingGroupEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ClipEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ClipEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ShadowEffect._Resolved : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ShadowEffect._Resolved : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.TemplateRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.TemplateRenderingMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorScheme : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorScheme : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorSchemeContrast : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorSchemeContrast : Swift.Hashable {}
@available(macCatalyst 13.0, macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlActiveState : Swift.Hashable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._DeviceVariant : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FrameLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FrameLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlexFrameLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlexFrameLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge : Swift.RawRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Title : SwiftUI.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Icon : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.RoundedCornerStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.RoundedCornerStyle : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.BlendMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.BlendMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.Interpolation : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.Interpolation : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._MatchedGeometryEffect : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMonochromeEffect._Resolved : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMonochromeEffect._Resolved : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewModifier_Content : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FluidSpringTestLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FluidSpringTestLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SetFrameLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SetFrameLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VStackLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VStackLayout : SwiftUI.Animatable {}
extension SwiftUI._VStackLayout : SwiftUI._VariadicView_ViewRoot {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._EndedGesture : SwiftUI.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ChangedGesture : SwiftUI.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Spacer : SwiftUI.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._TextBaselineRelativeSpacer : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HSpacer : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VSpacer : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._MapGesture : SwiftUI.Gesture {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text.TruncationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text.TruncationMode : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Text.Case : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Text.Case : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewDebug.Property : Swift.RawRepresentable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Hashable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlSize : Swift.Equatable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlSize : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font._StylisticAlternative : Swift.RawRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Font.Leading : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Font.Leading : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Hashable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.Strength : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.Strength : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CircleLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CircleLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HStackLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HStackLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ZStackLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ZStackLayout : SwiftUI.Animatable {}
extension SwiftUI._ZStackLayout : SwiftUI._VariadicView_ViewRoot {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._DigitalCrownDecelerationRate : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._DigitalCrownDecelerationRate : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SimpleColumnLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SimpleColumnLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Hashable {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Equatable {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SpiralLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SpiralLayout : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._BackdropEffect : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._BackdropEffectPlaceholder : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__RadialLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__RadialLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.ResizingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.ResizingMode : Swift.Hashable {}
