---
archs:           [ armv7, armv7s, arm64 ]
platform:        ios
install-name:    /System/Library/PrivateFrameworks/NanoLeash.framework/NanoLeash
exports:         
  - archs:           [ armv7, armv7s, arm64 ]
    symbols:         [ _NFMFindGizmoIdentifier, '+[NFMIDSMessageInstance newMessageInstanceWithAction:retryCount:retryInterval:]', 
                       '+[NFMWhereIsMyCompanionConnection sharedDeviceConnection]', 
                       '+[NFMWiFiManager sharedManager]', '-[IDSMessageContext(NFMProtoAdditions) nfmDescription]', 
                       '-[IDSProtobuf(NFMProtoAdditions) nfmDescription]', 
                       '-[NFMIDSMessageInstance .cxx_destruct]', '-[NFMIDSMessageInstance description]', 
                       '-[NFMIDSMessageInstance retryAction]', '-[NFMIDSMessageInstance retryCount]', 
                       '-[NFMIDSMessageInstance retryInterval]', '-[NFMIDSMessageInstance setRetryAction:]', 
                       '-[NFMIDSMessageInstance setRetryCount:]', '-[NFMIDSMessageInstance setRetryInterval:]', 
                       '-[NFMIDSServiceDelegate .cxx_destruct]', '-[NFMIDSServiceDelegate _enqueueMessage:service:priority:responseIdentifier:expectsResponse:retryCount:retryInterval:idsIdentifier:]', 
                       '-[NFMIDSServiceDelegate _sendProtoBuf:service:priority:responseIdentifier:expectsResponse:]', 
                       '-[NFMIDSServiceDelegate connectionStateWithDevices:accounts:]', 
                       '-[NFMIDSServiceDelegate inflightMessages]', '-[NFMIDSServiceDelegate init]', 
                       '-[NFMIDSServiceDelegate pendingMessages]', '-[NFMIDSServiceDelegate sendProtoBuf:service:priority:responseIdentifier:expectsResponse:retryCount:retryInterval:]', 
                       '-[NFMIDSServiceDelegate service:account:identifier:didSendWithSuccess:error:]', 
                       '-[NFMIDSServiceDelegate service:account:incomingUnhandledProtobuf:fromID:context:]', 
                       '-[NFMIDSServiceDelegate setInflightMessages:]', 
                       '-[NFMIDSServiceDelegate setPendingMessages:]', 
                       '-[NFMLeashManager .cxx_destruct]', '-[NFMLeashManager beginMonitoringLeash]', 
                       '-[NFMLeashManager centralManager:didConnectPeripheral:]', 
                       '-[NFMLeashManager centralManager:didDiscoverPeripheral:advertisementData:RSSI:]', 
                       '-[NFMLeashManager centralManager:didFailToConnectPeripheral:error:]', 
                       '-[NFMLeashManager centralManagerDidUpdateState:]', 
                       '-[NFMLeashManager centralManager]', '-[NFMLeashManager centralPhase]', 
                       '-[NFMLeashManager connect]', '-[NFMLeashManager connected]', 
                       '-[NFMLeashManager dealloc]', '-[NFMLeashManager discoveredPeripheral]', 
                       '-[NFMLeashManager externalQueue]', '-[NFMLeashManager init]', 
                       '-[NFMLeashManager leashDelegate]', '-[NFMLeashManager leashDispatchSourceTimer]', 
                       '-[NFMLeashManager leashIdentifier]', '-[NFMLeashManager leashMode]', 
                       '-[NFMLeashManager leashTest]', '-[NFMLeashManager needsToScanForPeripheral]', 
                       '-[NFMLeashManager peripheralDidUpdateRSSI:error:]', 
                       '-[NFMLeashManager peripheral]', '-[NFMLeashManager pipeManager]', 
                       '-[NFMLeashManager pipe]', '-[NFMLeashManager scalablePipeManager:didRegisterEndpoint:error:]', 
                       '-[NFMLeashManager scalablePipeManager:didUnregisterEndpoint:]', 
                       '-[NFMLeashManager scalablePipeManager:pipeDidConnect:]', 
                       '-[NFMLeashManager scalablePipeManager:pipeDidDisconnect:error:]', 
                       '-[NFMLeashManager scalablePipeManagerDidUpdateState:]', 
                       '-[NFMLeashManager serviceUUID]', '-[NFMLeashManager setCentralManager:]', 
                       '-[NFMLeashManager setCentralPhase:]', '-[NFMLeashManager setConnected:]', 
                       '-[NFMLeashManager setDelegate:queue:]', '-[NFMLeashManager setDiscoveredPeripheral:]', 
                       '-[NFMLeashManager setExternalQueue:]', '-[NFMLeashManager setLeashDelegate:]', 
                       '-[NFMLeashManager setLeashDispatchSourceTimer:]', 
                       '-[NFMLeashManager setLeashIdentifier:]', '-[NFMLeashManager setLeashMode:]', 
                       '-[NFMLeashManager setNeedsToScanForPeripheral:]', 
                       '-[NFMLeashManager setPeripheral:]', '-[NFMLeashManager setPipe:]', 
                       '-[NFMLeashManager setPipeManager:]', '-[NFMLeashManager setProximityChangeHandler:]', 
                       '-[NFMLeashManager setServiceUUID:]', '-[NFMLeashManager setTestMode:]', 
                       '-[NFMLeashManager stopMonitoringLeash]', '-[NFMLeashManager testMode]', 
                       '-[NFMLeashManager update:]', '-[NFMProtoDidPlaySoundAndFlashLEDResponse copyTo:]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse copyWithZone:]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse description]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse dictionaryRepresentation]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse didPlay]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse hash]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse isEqual:]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse readFrom:]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse setDidPlay:]', 
                       '-[NFMProtoDidPlaySoundAndFlashLEDResponse writeTo:]', 
                       '-[NFMProtoDidPlaySoundResponse copyTo:]', '-[NFMProtoDidPlaySoundResponse copyWithZone:]', 
                       '-[NFMProtoDidPlaySoundResponse description]', '-[NFMProtoDidPlaySoundResponse dictionaryRepresentation]', 
                       '-[NFMProtoDidPlaySoundResponse didPlay]', '-[NFMProtoDidPlaySoundResponse hash]', 
                       '-[NFMProtoDidPlaySoundResponse isEqual:]', '-[NFMProtoDidPlaySoundResponse readFrom:]', 
                       '-[NFMProtoDidPlaySoundResponse setDidPlay:]', '-[NFMProtoDidPlaySoundResponse writeTo:]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest copyTo:]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest copyWithZone:]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest description]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest dictionaryRepresentation]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest hasTimeStamp]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest hash]', '-[NFMProtoPlaySoundAndFlashLEDRequest isEqual:]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest readFrom:]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest setHasTimeStamp:]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest setTimeStamp:]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest timeStamp]', 
                       '-[NFMProtoPlaySoundAndFlashLEDRequest writeTo:]', 
                       '-[NFMProtoPlaySoundRequest copyTo:]', '-[NFMProtoPlaySoundRequest copyWithZone:]', 
                       '-[NFMProtoPlaySoundRequest description]', '-[NFMProtoPlaySoundRequest dictionaryRepresentation]', 
                       '-[NFMProtoPlaySoundRequest hasTimeStamp]', '-[NFMProtoPlaySoundRequest hash]', 
                       '-[NFMProtoPlaySoundRequest isEqual:]', '-[NFMProtoPlaySoundRequest readFrom:]', 
                       '-[NFMProtoPlaySoundRequest setHasTimeStamp:]', 
                       '-[NFMProtoPlaySoundRequest setTimeStamp:]', '-[NFMProtoPlaySoundRequest timeStamp]', 
                       '-[NFMProtoPlaySoundRequest writeTo:]', '-[NFMWhereIsMyCompanionConnection .cxx_destruct]', 
                       '-[NFMWhereIsMyCompanionConnection applicationIdentifierWithReply:]', 
                       '-[NFMWhereIsMyCompanionConnection init]', '-[NFMWhereIsMyCompanionConnection playSoundAndLEDCompletion]', 
                       '-[NFMWhereIsMyCompanionConnection playSoundAndLightsOnCompanionWithCompletion:]', 
                       '-[NFMWhereIsMyCompanionConnection playSoundCompletion]', 
                       '-[NFMWhereIsMyCompanionConnection playSoundOnCompanionWithCompletion:]', 
                       '-[NFMWhereIsMyCompanionConnection playedSound:]', 
                       '-[NFMWhereIsMyCompanionConnection playedSoundAndLED:]', 
                       '-[NFMWhereIsMyCompanionConnection serverConnection]', 
                       '-[NFMWhereIsMyCompanionConnection setPlaySoundAndLEDCompletion:]', 
                       '-[NFMWhereIsMyCompanionConnection setPlaySoundCompletion:]', 
                       '-[NFMWhereIsMyCompanionConnection setServerConnection:]', 
                       '-[NFMWiFiManager setHoldWiFiAssertion:]', GCC_except_table14, 
                       _HeatBeatTimeForMode, _MobileWiFiLibrary, _MobileWiFiLibrary.frameworkLibrary, 
                       _NFMFindLocalDeviceEntitlementName, _NFMFindLocalDeviceServerName, 
                       _NFMHotterColderIdentifier, _NFMLeashIdentifier, 
                       _NFMLeashManagerLeashWarningCloseValue, _NFMLeashManagerLeashWarningFarValue, 
                       _NFMLeashManagerLeashWarningImmediateValue, _NFMLeashManagerLeashWarningInsaneDistanceValue, 
                       _NFMPEPLog, _NFMProtoDidPlaySoundAndFlashLEDResponseReadFrom, 
                       _NFMProtoDidPlaySoundResponseReadFrom, _NFMProtoPlaySoundAndFlashLEDRequestReadFrom, 
                       _NFMProtoPlaySoundRequestReadFrom, _NFMProtoSend, 
                       _NFMUnlockIdentifier, __NFMPEPLogHandleEnabledChanged, 
                       '___115-[NFMIDSServiceDelegate sendProtoBuf:service:priority:responseIdentifier:expectsResponse:retryCount:retryInterval:]_block_invoke', 
                       '___132-[NFMIDSServiceDelegate _enqueueMessage:service:priority:responseIdentifier:expectsResponse:retryCount:retryInterval:idsIdentifier:]_block_invoke', 
                       '___28-[NFMLeashManager leashTest]_block_invoke', 
                       '___31+[NFMWiFiManager sharedManager]_block_invoke', 
                       '___31-[NFMLeashManager setTestMode:]_block_invoke', 
                       '___31-[NFMLeashManager setTestMode:]_block_invoke_2', 
                       '___32-[NFMLeashManager setLeashMode:]_block_invoke', 
                       '___34-[NFMLeashManager setServiceUUID:]_block_invoke', 
                       '___37-[NFMLeashManager setDelegate:queue:]_block_invoke', 
                       '___38-[NFMLeashManager setLeashIdentifier:]_block_invoke', 
                       '___38-[NFMLeashManager stopMonitoringLeash]_block_invoke', 
                       '___39-[NFMLeashManager beginMonitoringLeash]_block_invoke', 
                       '___45-[NFMLeashManager setProximityChangeHandler:]_block_invoke', 
                       '___49-[NFMLeashManager peripheralDidUpdateRSSI:error:]_block_invoke', 
                       '___54-[NFMLeashManager scalablePipeManager:pipeDidConnect:]_block_invoke', 
                       '___55-[NFMLeashManager centralManager:didConnectPeripheral:]_block_invoke', 
                       '___57+[NFMWhereIsMyCompanionConnection sharedDeviceConnection]_block_invoke', 
                       '___63-[NFMLeashManager scalablePipeManager:pipeDidDisconnect:error:]_block_invoke', 
                       '___77-[NFMIDSServiceDelegate service:account:identifier:didSendWithSuccess:error:]_block_invoke', 
                       '___91-[NFMIDSServiceDelegate _sendProtoBuf:service:priority:responseIdentifier:expectsResponse:]_block_invoke', 
                       ___NFMPEPLogLevels, ___NFMPEPLog_block_invoke, ___block_descriptor_tmp, 
                       ___block_descriptor_tmp, ___block_descriptor_tmp, 
                       ___block_descriptor_tmp, ___block_descriptor_tmp, 
                       ___block_descriptor_tmp, ___block_descriptor_tmp.105, 
                       ___block_descriptor_tmp.110, ___block_descriptor_tmp.15, 
                       ___block_descriptor_tmp.20, ___block_descriptor_tmp.23, 
                       ___block_descriptor_tmp.26, ___block_descriptor_tmp.46, 
                       ___block_descriptor_tmp.51, ___block_descriptor_tmp.57, 
                       ___block_descriptor_tmp.59, ___block_descriptor_tmp.60, 
                       ___block_descriptor_tmp.69, ___block_descriptor_tmp.72, 
                       ___block_descriptor_tmp.75, ___block_descriptor_tmp.87, 
                       ___block_descriptor_tmp.90, ___block_literal_global, 
                       ___block_literal_global, ___block_literal_global, 
                       ___copy_helper_block_, ___copy_helper_block_, ___copy_helper_block_.103, 
                       ___copy_helper_block_.108, ___copy_helper_block_.13, 
                       ___copy_helper_block_.18, ___copy_helper_block_.21, 
                       ___copy_helper_block_.24, ___copy_helper_block_.44, 
                       ___copy_helper_block_.48, ___copy_helper_block_.55, 
                       ___copy_helper_block_.57, ___copy_helper_block_.58, 
                       ___copy_helper_block_.67, ___copy_helper_block_.70, 
                       ___copy_helper_block_.73, ___copy_helper_block_.85, 
                       ___copy_helper_block_.88, ___destroy_helper_block_, 
                       ___destroy_helper_block_, ___destroy_helper_block_.104, 
                       ___destroy_helper_block_.109, ___destroy_helper_block_.14, 
                       ___destroy_helper_block_.19, ___destroy_helper_block_.22, 
                       ___destroy_helper_block_.25, ___destroy_helper_block_.45, 
                       ___destroy_helper_block_.49, ___destroy_helper_block_.56, 
                       ___destroy_helper_block_.58, ___destroy_helper_block_.59, 
                       ___destroy_helper_block_.68, ___destroy_helper_block_.71, 
                       ___destroy_helper_block_.74, ___destroy_helper_block_.86, 
                       ___destroy_helper_block_.89, ___nfm_log_block_invoke, 
                       ___wifiManager, _count, _initWiFiManagerClientCreate, 
                       _initWiFiManagerClientGetType, _initWiFiManagerClientSetType, 
                       _nfm_log, _nfm_log.__logger, _nfm_log.onceToken, 
                       _sharedDeviceConnection.__sharedDeviceConnection, 
                       _sharedDeviceConnection.onceToken, _sharedManager.__sharedManager, 
                       _sharedManager.onceToken, _softLinkWiFiManagerClientCreate, 
                       _softLinkWiFiManagerClientGetType, _softLinkWiFiManagerClientSetType ]
    objc-classes:    [ _NFMIDSMessageInstance, _NFMIDSServiceDelegate, 
                       _NFMLeashManager, _NFMProtoDidPlaySoundAndFlashLEDResponse, 
                       _NFMProtoDidPlaySoundResponse, _NFMProtoPlaySoundAndFlashLEDRequest, 
                       _NFMProtoPlaySoundRequest, _NFMWhereIsMyCompanionConnection, 
                       _NFMWiFiManager ]
    objc-ivars:      [ _NFMLeashManager._proximityChangeHandler, _NFMIDSMessageInstance._retryAction, 
                       _NFMIDSMessageInstance._retryCount, _NFMIDSMessageInstance._retryInterval, 
                       _NFMIDSServiceDelegate._inflightMessages, _NFMIDSServiceDelegate._pendingMessages, 
                       _NFMLeashManager._centralManager, _NFMLeashManager._centralPhase, 
                       _NFMLeashManager._centralQueue, _NFMLeashManager._connected, 
                       _NFMLeashManager._discoveredPeripheral, _NFMLeashManager._externalQueue, 
                       _NFMLeashManager._leashDelegate, _NFMLeashManager._leashDispatchSourceTimer, 
                       _NFMLeashManager._leashIdentifier, _NFMLeashManager._leashMode, 
                       _NFMLeashManager._needsToScanForPeripheral, _NFMLeashManager._peripheral, 
                       _NFMLeashManager._pipe, _NFMLeashManager._pipeManager, 
                       _NFMLeashManager._serviceUUID, _NFMLeashManager._testMode, 
                       _NFMProtoDidPlaySoundAndFlashLEDResponse._didPlay, 
                       _NFMProtoDidPlaySoundResponse._didPlay, _NFMProtoPlaySoundAndFlashLEDRequest._has, 
                       _NFMProtoPlaySoundAndFlashLEDRequest._timeStamp, 
                       _NFMProtoPlaySoundRequest._has, _NFMProtoPlaySoundRequest._timeStamp, 
                       _NFMWhereIsMyCompanionConnection._playSoundAndLEDCompletion, 
                       _NFMWhereIsMyCompanionConnection._playSoundCompletion, 
                       _NFMWhereIsMyCompanionConnection._serverConnection ]
...
