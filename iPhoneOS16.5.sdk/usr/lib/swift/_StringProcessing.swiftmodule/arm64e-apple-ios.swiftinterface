// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64e-apple-ios16.4 -enable-objc-interop -enable-library-evolution -module-link-name swift_StringProcessing -swift-version 5 -O -library-level api -enforce-exclusivity=unchecked -module-name _StringProcessing
// swift-module-flags-ignorable: -enable-lexical-lifetimes=false -target-min-inlining-version min -user-module-version 5.8.0.117.59
import Swift
extension Swift.Collection where Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func contains<C>(_ other: C) -> Swift.Bool where C : Swift.Collection, Self.Element == C.Element
}
extension Swift.StringProtocol {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func contains(_ other: Swift.String) -> Swift.Bool
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func contains(_ other: Swift.Substring) -> Swift.Bool
}
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func contains(_ regex: some RegexComponent) -> Swift.Bool
}
extension Swift.Collection where Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func firstRange<C>(of other: C) -> Swift.Range<Self.Index>? where C : Swift.Collection, Self.Element == C.Element
}
extension Swift.BidirectionalCollection where Self.Element : Swift.Comparable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func firstRange<C>(of other: C) -> Swift.Range<Self.Index>? where C : Swift.Collection, Self.Element == C.Element
}
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func firstRange(of regex: some RegexComponent) -> Swift.Range<Self.Index>?
}
extension Swift.Collection where Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func ranges<C>(of other: C) -> [Swift.Range<Self.Index>] where C : Swift.Collection, Self.Element == C.Element
}
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func ranges(of regex: some RegexComponent) -> [Swift.Range<Self.Index>]
}
extension Swift.RangeReplaceableCollection where Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func replacing<C, Replacement>(_ other: C, with replacement: Replacement, subrange: Swift.Range<Self.Index>, maxReplacements: Swift.Int = .max) -> Self where C : Swift.Collection, Replacement : Swift.Collection, Self.Element == C.Element, C.Element == Replacement.Element
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func replacing<C, Replacement>(_ other: C, with replacement: Replacement, maxReplacements: Swift.Int = .max) -> Self where C : Swift.Collection, Replacement : Swift.Collection, Self.Element == C.Element, C.Element == Replacement.Element
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public mutating func replace<C, Replacement>(_ other: C, with replacement: Replacement, maxReplacements: Swift.Int = .max) where C : Swift.Collection, Replacement : Swift.Collection, Self.Element == C.Element, C.Element == Replacement.Element
}
extension Swift.RangeReplaceableCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func replacing<Replacement>(_ regex: some RegexComponent, with replacement: Replacement, subrange: Swift.Range<Self.Index>, maxReplacements: Swift.Int = .max) -> Self where Replacement : Swift.Collection, Replacement.Element == Swift.Character
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func replacing<Replacement>(_ regex: some RegexComponent, with replacement: Replacement, maxReplacements: Swift.Int = .max) -> Self where Replacement : Swift.Collection, Replacement.Element == Swift.Character
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public mutating func replace<Replacement>(_ regex: some RegexComponent, with replacement: Replacement, maxReplacements: Swift.Int = .max) where Replacement : Swift.Collection, Replacement.Element == Swift.Character
}
extension Swift.Collection where Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func split<C>(separator: C, maxSplits: Swift.Int = .max, omittingEmptySubsequences: Swift.Bool = true) -> [Self.SubSequence] where C : Swift.Collection, Self.Element == C.Element
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  @_disfavoredOverload public func split(separator: some RegexComponent, maxSplits: Swift.Int = .max, omittingEmptySubsequences: Swift.Bool = true) -> [Self.SubSequence]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  public func starts(with regex: some RegexComponent) -> Swift.Bool
}
extension Swift.Collection {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func trimmingPrefix(while predicate: (Self.Element) throws -> Swift.Bool) rethrows -> Self.SubSequence
}
extension Swift.Collection where Self == Self.SubSequence {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public mutating func trimPrefix(while predicate: (Self.Element) throws -> Swift.Bool) throws
}
extension Swift.RangeReplaceableCollection {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public mutating func trimPrefix(while predicate: (Self.Element) throws -> Swift.Bool) rethrows
}
extension Swift.Collection where Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func trimmingPrefix<Prefix>(_ prefix: Prefix) -> Self.SubSequence where Prefix : Swift.Sequence, Self.Element == Prefix.Element
}
extension Swift.Collection where Self == Self.SubSequence, Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public mutating func trimPrefix<Prefix>(_ prefix: Prefix) where Prefix : Swift.Sequence, Self.Element == Prefix.Element
}
extension Swift.RangeReplaceableCollection where Self.Element : Swift.Equatable {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public mutating func trimPrefix<Prefix>(_ prefix: Prefix) where Prefix : Swift.Sequence, Self.Element == Prefix.Element
}
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public func trimmingPrefix(_ regex: some RegexComponent) -> Self.SubSequence
}
extension Swift.RangeReplaceableCollection where Self : Swift.BidirectionalCollection, Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @_disfavoredOverload public mutating func trimPrefix(_ regex: some RegexComponent)
}
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func firstMatch<Output>(of r: some RegexComponent<Output>) -> _StringProcessing.Regex<Output>.Match?
}
extension Swift.RangeReplaceableCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func replacing<Output, Replacement>(_ regex: some RegexComponent<Output>, subrange: Swift.Range<Self.Index>, maxReplacements: Swift.Int = .max, with replacement: (_StringProcessing.Regex<Output>.Match) throws -> Replacement) rethrows -> Self where Replacement : Swift.Collection, Replacement.Element == Swift.Character
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func replacing<Output, Replacement>(_ regex: some RegexComponent<Output>, maxReplacements: Swift.Int = .max, with replacement: (_StringProcessing.Regex<Output>.Match) throws -> Replacement) rethrows -> Self where Replacement : Swift.Collection, Replacement.Element == Swift.Character
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public mutating func replace<Output, Replacement>(_ regex: some RegexComponent<Output>, maxReplacements: Swift.Int = .max, with replacement: (_StringProcessing.Regex<Output>.Match) throws -> Replacement) rethrows where Replacement : Swift.Collection, Replacement.Element == Swift.Character
}
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func matches<Output>(of r: some RegexComponent<Output>) -> [_StringProcessing.Regex<Output>.Match]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AnyRegexOutput {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.AnyRegexOutput {
  public init<Output>(_ match: _StringProcessing.Regex<Output>.Match)
  public func extractValues<Output>(as outputType: Output.Type = Output.self) -> Output?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.AnyRegexOutput : Swift.RandomAccessCollection {
  public struct Element {
    public var range: Swift.Range<Swift.String.Index>? {
      get
    }
    public var substring: Swift.Substring? {
      get
    }
    public var value: Any? {
      get
    }
    public var type: any Any.Type {
      get
    }
    public var name: Swift.String? {
      get
    }
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func index(before i: Swift.Int) -> Swift.Int
  public subscript(position: Swift.Int) -> _StringProcessing.AnyRegexOutput.Element {
    get
  }
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<_StringProcessing.AnyRegexOutput>
  public typealias SubSequence = Swift.Slice<_StringProcessing.AnyRegexOutput>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.AnyRegexOutput {
  public subscript(name: Swift.String) -> _StringProcessing.AnyRegexOutput.Element? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex.Match where Output == _StringProcessing.AnyRegexOutput {
  public subscript(dynamicMember _keyPath: Swift.KeyPath<(Swift.Substring, _doNotUse: ()), Swift.Substring>) -> Swift.Substring {
    get
  }
  public subscript(name: Swift.String) -> _StringProcessing.AnyRegexOutput.Element? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex where Output == _StringProcessing.AnyRegexOutput {
  public init(_ pattern: Swift.String) throws
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex {
  public init(_ pattern: Swift.String, as outputType: Output.Type = Output.self) throws
  public init(verbatim verbatimString: Swift.String)
  public func contains(captureNamed name: Swift.String) -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex where Output == _StringProcessing.AnyRegexOutput {
  public init<Output>(_ regex: _StringProcessing.Regex<Output>)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex.Match where Output == _StringProcessing.AnyRegexOutput {
  public init<Output>(_ match: _StringProcessing.Regex<Output>.Match)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex {
  public init?(_ regex: _StringProcessing.Regex<_StringProcessing.AnyRegexOutput>, as outputType: Output.Type = Output.self)
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol RegexComponent<RegexOutput> {
  associatedtype RegexOutput
  var regex: _StringProcessing.Regex<Self.RegexOutput> { get }
}
#else
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol RegexComponent {
  associatedtype RegexOutput
  var regex: _StringProcessing.Regex<Self.RegexOutput> { get }
}
#endif
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct Regex<Output> : _StringProcessing.RegexComponent {
  @usableFromInline
  internal init(_regexString pattern: Swift.String)
  @usableFromInline
  internal init(_regexString pattern: Swift.String, version: Swift.Int)
  public var regex: _StringProcessing.Regex<Output> {
    get
  }
  public typealias RegexOutput = Output
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex {
  @available(*, deprecated, renamed: "init(verbatim:)")
  public init(quoting _string: Swift.String)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol CustomConsumingRegexComponent : _StringProcessing.RegexComponent {
  func consuming(_ input: Swift.String, startingAt index: Swift.String.Index, in bounds: Swift.Range<Swift.String.Index>) throws -> (upperBound: Swift.String.Index, output: Self.RegexOutput)?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.CustomConsumingRegexComponent {
  public var regex: _StringProcessing.Regex<Self.RegexOutput> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex {
  @dynamicMemberLookup public struct Match {
    public let range: Swift.Range<Swift.String.Index>
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex.Match {
  public var output: Output {
    get
  }
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Output, T>) -> T {
    get
  }
  @_disfavoredOverload public subscript(dynamicMember _keyPath: Swift.KeyPath<(Output, _doNotUse: ()), Output>) -> Output {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex {
  public func wholeMatch(in string: Swift.String) throws -> _StringProcessing.Regex<Output>.Match?
  public func prefixMatch(in string: Swift.String) throws -> _StringProcessing.Regex<Output>.Match?
  public func firstMatch(in string: Swift.String) throws -> _StringProcessing.Regex<Output>.Match?
  public func wholeMatch(in string: Swift.Substring) throws -> _StringProcessing.Regex<Output>.Match?
  public func prefixMatch(in string: Swift.Substring) throws -> _StringProcessing.Regex<Output>.Match?
  public func firstMatch(in string: Swift.Substring) throws -> _StringProcessing.Regex<Output>.Match?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.BidirectionalCollection where Self.SubSequence == Swift.Substring {
  public func wholeMatch<R>(of regex: R) -> _StringProcessing.Regex<R.RegexOutput>.Match? where R : _StringProcessing.RegexComponent
  public func prefixMatch<R>(of regex: R) -> _StringProcessing.Regex<R.RegexOutput>.Match? where R : _StringProcessing.RegexComponent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.Regex {
  public func ignoresCase(_ ignoresCase: Swift.Bool = true) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func asciiOnlyWordCharacters(_ useASCII: Swift.Bool = true) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func asciiOnlyDigits(_ useASCII: Swift.Bool = true) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func asciiOnlyWhitespace(_ useASCII: Swift.Bool = true) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func asciiOnlyCharacterClasses(_ useASCII: Swift.Bool = true) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func wordBoundaryKind(_ wordBoundaryKind: _StringProcessing.RegexWordBoundaryKind) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func dotMatchesNewlines(_ dotMatchesNewlines: Swift.Bool = true) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func anchorsMatchLineEndings(_ matchLineEndings: Swift.Bool = true) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func repetitionBehavior(_ behavior: _StringProcessing.RegexRepetitionBehavior) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
  public func matchingSemantics(_ semanticLevel: _StringProcessing.RegexSemanticLevel) -> _StringProcessing.Regex<_StringProcessing.Regex<Output>.RegexOutput>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct RegexSemanticLevel : Swift.Hashable {
  public static var graphemeCluster: _StringProcessing.RegexSemanticLevel {
    get
  }
  public static var unicodeScalar: _StringProcessing.RegexSemanticLevel {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: _StringProcessing.RegexSemanticLevel, b: _StringProcessing.RegexSemanticLevel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct RegexWordBoundaryKind : Swift.Hashable {
  public static var simple: _StringProcessing.RegexWordBoundaryKind {
    get
  }
  public static var `default`: _StringProcessing.RegexWordBoundaryKind {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: _StringProcessing.RegexWordBoundaryKind, b: _StringProcessing.RegexWordBoundaryKind) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct RegexRepetitionBehavior : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: _StringProcessing.RegexRepetitionBehavior, b: _StringProcessing.RegexRepetitionBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension _StringProcessing.RegexRepetitionBehavior {
  public static var eager: _StringProcessing.RegexRepetitionBehavior {
    get
  }
  public static var reluctant: _StringProcessing.RegexRepetitionBehavior {
    get
  }
  public static var possessive: _StringProcessing.RegexRepetitionBehavior {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _RegexFactory {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func accumulate<Output>(_ left: some RegexComponent, _ right: some RegexComponent) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func accumulateAlternation<Output>(_ left: some RegexComponent, _ right: some RegexComponent) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func zeroOrOne<Output>(_ component: some RegexComponent, _ behavior: _StringProcessing.RegexRepetitionBehavior? = nil) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func zeroOrMore<Output>(_ component: some RegexComponent, _ behavior: _StringProcessing.RegexRepetitionBehavior? = nil) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func oneOrMore<Output>(_ component: some RegexComponent, _ behavior: _StringProcessing.RegexRepetitionBehavior? = nil) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func exactly<Output>(_ count: Swift.Int, _ component: some RegexComponent) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func repeating<Output>(_ range: Swift.Range<Swift.Int>, _ behavior: _StringProcessing.RegexRepetitionBehavior?, _ component: some RegexComponent) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func atomicNonCapturing<Output>(_ component: some RegexComponent) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func orderedChoice<Output>(_ component: some RegexComponent) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func capture<Output>(_ r: some RegexComponent) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func capture<Output>(_ component: some RegexComponent, _ reference: Swift.Int) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func capture<Output, W, NewCapture>(_ component: some RegexComponent, _ reference: Swift.Int? = nil, _ transform: @escaping (W) throws -> NewCapture) -> _StringProcessing.Regex<Output>
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public func captureOptional<Output, W, NewCapture>(_ component: some RegexComponent, _ reference: Swift.Int? = nil, _ transform: @escaping (W) throws -> NewCapture?) -> _StringProcessing.Regex<Output>
}
