// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64e-apple-ios16.4 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftExtensionKit -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name ExtensionKit
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 99.4.9
@_exported import ExtensionFoundation
@_exported import ExtensionKit
import Foundation
import OSLog
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import os.log
import os
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AppExtensionSceneConfiguration : ExtensionFoundation.AppExtensionConfiguration {
  public init<Content, Configuration>(_ content: @autoclosure @escaping () -> Content, configuration: Configuration? = nil) where Content : ExtensionKit.AppExtensionScene, Configuration : ExtensionFoundation.AppExtensionConfiguration
  public init<Content>(_ content: @autoclosure @escaping () -> Content) where Content : ExtensionKit.AppExtensionScene
  public func accept(connection: Foundation.NSXPCConnection) -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppExtensionScene {
  associatedtype Body : ExtensionKit.AppExtensionScene
  var body: Self.Body { get }
  func _makeScene(with id: Swift.String) -> ExtensionKit.PrimitiveAppExtensionScene?
}
extension ExtensionKit.AppExtensionScene {
  public func _makeScene(with id: Swift.String) -> ExtensionKit.PrimitiveAppExtensionScene?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct PrimitiveAppExtensionScene : ExtensionKit.AppExtensionScene {
  public init<Content>(id: Swift.String, @SwiftUI.ViewBuilder content: @escaping () -> Content, onConnection: @escaping (Foundation.NSXPCConnection) -> Swift.Bool = { _ in false }) where Content : SwiftUI.View
  public var body: Swift.Never {
    get
  }
  public typealias Body = Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Never : ExtensionKit.AppExtensionScene {
  public func _makeScene(with id: Swift.String) -> ExtensionKit.PrimitiveAppExtensionScene?
  public var body: Swift.Never {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Array : ExtensionKit.AppExtensionScene where Element : ExtensionKit.AppExtensionScene {
  public var body: Swift.Never {
    get
  }
  public typealias Body = Swift.Never
  public func _makeScene(with id: Swift.String) -> ExtensionKit.PrimitiveAppExtensionScene?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public struct AppExtensionSceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some ExtensionKit.AppExtensionScene where Content : ExtensionKit.AppExtensionScene {
        return content
    }
  
}
extension ExtensionKit.PrimitiveAppExtensionScene : Swift.CustomDebugStringConvertible {
  public func _makeScene(with id: Swift.String) -> ExtensionKit.PrimitiveAppExtensionScene?
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _AnyAppExtensionScene : ExtensionKit.AppExtensionScene {
  public init<T>(erasing scene: T) where T : ExtensionKit.AppExtensionScene
  public var body: some ExtensionKit.AppExtensionScene {
    get
  }
  public func _makeScene(with id: Swift.String) -> ExtensionKit.PrimitiveAppExtensionScene?
  public typealias Body = @_opaqueReturnTypeOf("$s12ExtensionKit07_AnyAppA5SceneV4bodyQrvp", 0) __
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension ExtensionFoundation.AppExtension where Self.Configuration == ExtensionKit.AppExtensionSceneConfiguration {
  public static func main() throws
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ExtensionKit.EXHostViewController {
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct Configuration {
    public var appExtension: ExtensionFoundation.AppExtensionIdentity
    public var sceneID: Swift.String
    public init(appExtension: ExtensionFoundation.AppExtensionIdentity, sceneID: Swift.String)
  }
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor(unsafe) public var configuration: ExtensionKit.EXHostViewController.Configuration? {
    get
    set
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension ExtensionKit.AppExtensionSceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene, C3 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2), _AnyAppExtensionScene(erasing:c3)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene, C3 : ExtensionKit.AppExtensionScene, C4 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2), _AnyAppExtensionScene(erasing:c3), _AnyAppExtensionScene(erasing:c4)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene, C3 : ExtensionKit.AppExtensionScene, C4 : ExtensionKit.AppExtensionScene, C5 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2), _AnyAppExtensionScene(erasing:c3), _AnyAppExtensionScene(erasing:c4), _AnyAppExtensionScene(erasing:c5)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene, C3 : ExtensionKit.AppExtensionScene, C4 : ExtensionKit.AppExtensionScene, C5 : ExtensionKit.AppExtensionScene, C6 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2), _AnyAppExtensionScene(erasing:c3), _AnyAppExtensionScene(erasing:c4), _AnyAppExtensionScene(erasing:c5), _AnyAppExtensionScene(erasing:c6)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene, C3 : ExtensionKit.AppExtensionScene, C4 : ExtensionKit.AppExtensionScene, C5 : ExtensionKit.AppExtensionScene, C6 : ExtensionKit.AppExtensionScene, C7 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2), _AnyAppExtensionScene(erasing:c3), _AnyAppExtensionScene(erasing:c4), _AnyAppExtensionScene(erasing:c5), _AnyAppExtensionScene(erasing:c6), _AnyAppExtensionScene(erasing:c7)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene, C3 : ExtensionKit.AppExtensionScene, C4 : ExtensionKit.AppExtensionScene, C5 : ExtensionKit.AppExtensionScene, C6 : ExtensionKit.AppExtensionScene, C7 : ExtensionKit.AppExtensionScene, C8 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2), _AnyAppExtensionScene(erasing:c3), _AnyAppExtensionScene(erasing:c4), _AnyAppExtensionScene(erasing:c5), _AnyAppExtensionScene(erasing:c6), _AnyAppExtensionScene(erasing:c7), _AnyAppExtensionScene(erasing:c8)]
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some ExtensionKit.AppExtensionScene where C0 : ExtensionKit.AppExtensionScene, C1 : ExtensionKit.AppExtensionScene, C2 : ExtensionKit.AppExtensionScene, C3 : ExtensionKit.AppExtensionScene, C4 : ExtensionKit.AppExtensionScene, C5 : ExtensionKit.AppExtensionScene, C6 : ExtensionKit.AppExtensionScene, C7 : ExtensionKit.AppExtensionScene, C8 : ExtensionKit.AppExtensionScene, C9 : ExtensionKit.AppExtensionScene {
        return [_AnyAppExtensionScene(erasing:c0), _AnyAppExtensionScene(erasing:c1), _AnyAppExtensionScene(erasing:c2), _AnyAppExtensionScene(erasing:c3), _AnyAppExtensionScene(erasing:c4), _AnyAppExtensionScene(erasing:c5), _AnyAppExtensionScene(erasing:c6), _AnyAppExtensionScene(erasing:c7), _AnyAppExtensionScene(erasing:c8), _AnyAppExtensionScene(erasing:c9)]
    }
  
}
