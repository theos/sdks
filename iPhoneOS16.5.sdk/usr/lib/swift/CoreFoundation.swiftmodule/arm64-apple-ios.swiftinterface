// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreFoundation -swift-version 5 -enforce-exclusivity=unchecked -O -library-level api -enable-experimental-concurrency -module-name CoreFoundation
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 1955
@_exported import CoreFoundation
import Swift
import _Concurrency
import _StringProcessing
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
@frozen public struct CGFloat {
  public typealias NativeType = Swift.Double
  @_transparent public init() {
    self.native = 0.0
  }
  @_transparent public init(_ value: Swift.Float) {
    self.native = NativeType(value)
  }
  @_transparent public init(_ value: Swift.Double) {
    self.native = NativeType(value)
  }
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self.native = value.native
  }
  public var native: CoreFoundation.CGFloat.NativeType
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.SignedNumeric {
  @_alwaysEmitIntoClient public init<T>(_ source: T) where T : Swift.BinaryInteger {
    self.native = NativeType(source)
  }
  @_transparent public init?<T>(exactly source: T) where T : Swift.BinaryInteger {
    guard let native = NativeType(exactly: source) else { return nil }
    self.native = native
  }
  @_transparent public var magnitude: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(native.magnitude)
  }
  }
  public typealias IntegerLiteralType = Swift.Int
  public typealias Magnitude = CoreFoundation.CGFloat
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.BinaryFloatingPoint {
  public typealias RawSignificand = Swift.UInt
  public typealias Exponent = Swift.Int
  @_transparent public static var exponentBitCount: Swift.Int {
    @_transparent get {
    return NativeType.exponentBitCount
  }
  }
  @_transparent public static var significandBitCount: Swift.Int {
    @_transparent get {
    return NativeType.significandBitCount
  }
  }
  @_transparent public var bitPattern: Swift.UInt {
    @_transparent get {
    return UInt(native.bitPattern)
  }
  }
  @_transparent public init(bitPattern: Swift.UInt) {
    native = NativeType(bitPattern: UInt64(bitPattern))
  }
  @_transparent public var sign: Swift.FloatingPointSign {
    @_transparent get {
    return native.sign
  }
  }
  @_transparent public var exponentBitPattern: Swift.UInt {
    @_transparent get {
    return native.exponentBitPattern
  }
  }
  @_transparent public var significandBitPattern: Swift.UInt {
    @_transparent get {
    return UInt(native.significandBitPattern)
  }
  }
  @_transparent public init(sign: Swift.FloatingPointSign, exponentBitPattern: Swift.UInt, significandBitPattern: Swift.UInt) {
    native = NativeType(sign: sign,
      exponentBitPattern: exponentBitPattern,
      significandBitPattern: NativeType.RawSignificand(significandBitPattern))
  }
  @_transparent public init(nan payload: CoreFoundation.CGFloat.RawSignificand, signaling: Swift.Bool) {
    native = NativeType(nan: NativeType.RawSignificand(payload),
                        signaling: signaling)
  }
  @_transparent public static var infinity: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(NativeType.infinity)
  }
  }
  @_transparent public static var nan: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(NativeType.nan)
  }
  }
  @_transparent public static var signalingNaN: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(NativeType.signalingNaN)
  }
  }
  @available(*, unavailable, renamed: "nan")
  public static var quietNaN: CoreFoundation.CGFloat {
    get
  }
  @_transparent public static var greatestFiniteMagnitude: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(NativeType.greatestFiniteMagnitude)
  }
  }
  @_transparent public static var pi: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(NativeType.pi)
  }
  }
  @_transparent public var ulp: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(native.ulp)
  }
  }
  @_transparent public static var leastNormalMagnitude: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(NativeType.leastNormalMagnitude)
  }
  }
  @_transparent public static var leastNonzeroMagnitude: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(NativeType.leastNonzeroMagnitude)
  }
  }
  @_transparent public var exponent: Swift.Int {
    @_transparent get {
    return native.exponent
  }
  }
  @_transparent public var significand: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(native.significand)
  }
  }
  @_transparent public init(sign: Swift.FloatingPointSign, exponent: Swift.Int, significand: CoreFoundation.CGFloat) {
    native = NativeType(sign: sign,
      exponent: exponent, significand: significand.native)
  }
  @_transparent public mutating func round(_ rule: Swift.FloatingPointRoundingRule) {
    native.round(rule)
  }
  @_transparent public var nextUp: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(native.nextUp)
  }
  }
  @_transparent public mutating func negate() {
    native.negate()
  }
  @_transparent public static func += (lhs: inout CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) {
    lhs.native += rhs.native
  }
  @_transparent public static func -= (lhs: inout CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) {
    lhs.native -= rhs.native
  }
  @_transparent public static func *= (lhs: inout CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) {
    lhs.native *= rhs.native
  }
  @_transparent public static func /= (lhs: inout CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) {
    lhs.native /= rhs.native
  }
  @_transparent public mutating func formTruncatingRemainder(dividingBy other: CoreFoundation.CGFloat) {
    native.formTruncatingRemainder(dividingBy: other.native)
  }
  @_transparent public mutating func formRemainder(dividingBy other: CoreFoundation.CGFloat) {
    native.formRemainder(dividingBy: other.native)
  }
  @_transparent public mutating func formSquareRoot() {
    native.formSquareRoot( )
  }
  @_transparent public mutating func addProduct(_ lhs: CoreFoundation.CGFloat, _ rhs: CoreFoundation.CGFloat) {
    native.addProduct(lhs.native, rhs.native)
  }
  @_transparent public func isEqual(to other: CoreFoundation.CGFloat) -> Swift.Bool {
    return self.native.isEqual(to: other.native)
  }
  @_transparent public func isLess(than other: CoreFoundation.CGFloat) -> Swift.Bool {
    return self.native.isLess(than: other.native)
  }
  @_transparent public func isLessThanOrEqualTo(_ other: CoreFoundation.CGFloat) -> Swift.Bool {
    return self.native.isLessThanOrEqualTo(other.native)
  }
  @_transparent public var isNormal: Swift.Bool {
    @_transparent get {
    return native.isNormal
  }
  }
  @_transparent public var isFinite: Swift.Bool {
    @_transparent get {
    return native.isFinite
  }
  }
  @_transparent public var isZero: Swift.Bool {
    @_transparent get {
    return native.isZero
  }
  }
  @_transparent public var isSubnormal: Swift.Bool {
    @_transparent get {
    return native.isSubnormal
  }
  }
  @_transparent public var isInfinite: Swift.Bool {
    @_transparent get {
    return native.isInfinite
  }
  }
  @_transparent public var isNaN: Swift.Bool {
    @_transparent get {
    return native.isNaN
  }
  }
  @_transparent public var isSignalingNaN: Swift.Bool {
    @_transparent get {
    return native.isSignalingNaN
  }
  }
  @available(*, unavailable, renamed: "isSignalingNaN")
  public var isSignaling: Swift.Bool {
    get
  }
  @_transparent public var isCanonical: Swift.Bool {
    @_transparent get {
    return true
  }
  }
  @_transparent public var floatingPointClass: Swift.FloatingPointClassification {
    @_transparent get {
    return native.floatingPointClass
  }
  }
  @_transparent public var binade: CoreFoundation.CGFloat {
    @_transparent get {
    return CGFloat(native.binade)
  }
  }
  @_transparent public var significandWidth: Swift.Int {
    @_transparent get {
    return native.significandWidth
  }
  }
  @_transparent public init(floatLiteral value: CoreFoundation.CGFloat.NativeType) {
    native = value
  }
  @_transparent public init(integerLiteral value: Swift.Int) {
    native = NativeType(value)
  }
  public typealias FloatLiteralType = CoreFoundation.CGFloat.NativeType
  public typealias RawExponent = Swift.UInt
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.CustomStringConvertible {
  @_transparent public var description: Swift.String {
    @_transparent get {
    return native.description
  }
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.Hashable {
  @_transparent public var hashValue: Swift.Int {
    @_transparent get {
    return native.hashValue
  }
  }
  @inlinable @_transparent public func hash(into hasher: inout Swift.Hasher) {
    hasher.combine(native)
  }
  @_alwaysEmitIntoClient @inlinable public func _rawHashValue(seed: Swift.Int) -> Swift.Int {
    return native._rawHashValue(seed: seed)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.UInt8 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = UInt8(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.Int8 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = Int8(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.UInt16 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = UInt16(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.Int16 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = Int16(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.UInt32 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = UInt32(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.Int32 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = Int32(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.UInt64 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = UInt64(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.Int64 {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = Int64(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.UInt {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = UInt(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.Int {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = Int(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.Double {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = Double(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension Swift.Float {
  @_transparent public init(_ value: CoreFoundation.CGFloat) {
    self = Float(value.native)
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat {
  @_transparent public static func + (lhs: CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat {
    var lhs = lhs
    lhs += rhs
    return lhs
  }
  @_transparent public static func - (lhs: CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat {
    var lhs = lhs
    lhs -= rhs
    return lhs
  }
  @_transparent public static func * (lhs: CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat {
    var lhs = lhs
    lhs *= rhs
    return lhs
  }
  @_transparent public static func / (lhs: CoreFoundation.CGFloat, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat {
    var lhs = lhs
    lhs /= rhs
    return lhs
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.Strideable {
  @_transparent public func distance(to other: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat {
    return CGFloat(other.native - self.native)
  }
  @_transparent public func advanced(by amount: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat {
    return CGFloat(self.native + amount.native)
  }
  public typealias Stride = CoreFoundation.CGFloat
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift._CVarArgPassedAsDouble, Swift._CVarArgAligned {
  @_transparent public var _cVarArgEncoding: [Swift.Int] {
    @_transparent get {
    return native._cVarArgEncoding
  }
  }
  @_transparent public var _cVarArgAlignment: Swift.Int {
    @_transparent get {
    return native._cVarArgAlignment
  }
  }
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.Codable {
  @_transparent public init(from decoder: any Swift.Decoder) throws {
    let container = try decoder.singleValueContainer()
    do {
      self.native = try container.decode(NativeType.self)
    } catch DecodingError.typeMismatch(let type, let context) {
      // We may have encoded as a different type on a different platform. A
      // strict fixed-format decoder may disallow a conversion, so let's try the
      // other type.
      do {
        if NativeType.self == Float.self {
          self.native = NativeType(try container.decode(Double.self))
        } else {
          self.native = NativeType(try container.decode(Float.self))
        }
      } catch {
        // Failed to decode as the other type, too. This is neither a Float nor
        // a Double. Throw the old error; we don't want to clobber the original
        // info.
        throw DecodingError.typeMismatch(type, context)
      }
    }
  }
  @_transparent public func encode(to encoder: any Swift.Encoder) throws {
    var container = encoder.singleValueContainer()
    try container.encode(self.native)
  }
}
public protocol _CFObject : AnyObject, Swift.Hashable {
}
extension CoreFoundation._CFObject {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (left: Self, right: Self) -> Swift.Bool
}
@available(macOS 10.0, macCatalyst 13.0, iOS 2.0, watchOS 1.0, tvOS 9.0, *)
@_originallyDefinedIn(module: "CoreGraphics", macOS 10.0)
@_originallyDefinedIn(module: "CoreGraphics", macCatalyst 13.0)
@_originallyDefinedIn(module: "CoreGraphics", iOS 2.0)
@_originallyDefinedIn(module: "CoreGraphics", watchOS 1.0)
@_originallyDefinedIn(module: "CoreGraphics", tvOS 9.0)
extension CoreFoundation.CGFloat : Swift.Sendable {}
