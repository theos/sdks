// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64e-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name _AuthenticationServices_SwiftUI
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 7615.1.26.10.2
@_exported import AuthenticationServices
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import os
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct SignInWithAppleButton : SwiftUI.View {
  public init(_ label: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label = .signIn, onRequest: @escaping (AuthenticationServices.ASAuthorizationAppleIDRequest) -> Swift.Void, onCompletion: @escaping ((Swift.Result<AuthenticationServices.ASAuthorization, any Swift.Error>) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public struct Label {
    public static let signIn: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label
    public static let `continue`: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label
    public static let signUp: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label
  }
  public struct Style {
    public static let black: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style
    public static let white: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style
    public static let whiteOutline: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style
  }
  public typealias Body = @_opaqueReturnTypeOf("$s31_AuthenticationServices_SwiftUI21SignInWithAppleButtonV4bodyQrvp", 0) __
}
extension SwiftUI.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func signInWithAppleButtonStyle(_ style: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style) -> some SwiftUI.View
  
}
@available(iOS 16.4, macOS 13.3, watchOS 9.4, tvOS 16.4, *)
public enum ASAuthorizationResult : Swift.Sendable {
  case password(AuthenticationServices.ASPasswordCredential)
  case appleID(AuthenticationServices.ASAuthorizationAppleIDCredential)
  @available(watchOS, unavailable)
  case passkeyAssertion(AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion)
  @available(watchOS, unavailable)
  case passkeyRegistration(AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  case securityKeyAssertion(AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertion)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  case securityKeyRegistration(AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistration)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  case customMethod(AuthenticationServices.ASAuthorizationCustomMethod)
}
@available(iOS 16.4, macOS 13.3, watchOS 9.4, tvOS 16.4, *)
public struct AuthorizationController {
  #if compiler(>=5.3) && $AsyncAwait
  public func performRequests(_ requests: [AuthenticationServices.ASAuthorizationRequest]) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func performRequest(_ request: AuthenticationServices.ASAuthorizationRequest) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func performRequests(_ requests: [AuthenticationServices.ASAuthorizationRequest], options: AuthenticationServices.ASAuthorizationController.RequestOptions) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func performRequest(_ request: AuthenticationServices.ASAuthorizationRequest, options: AuthenticationServices.ASAuthorizationController.RequestOptions) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func performRequests(_ requests: [AuthenticationServices.ASAuthorizationRequest], customMethods: [AuthenticationServices.ASAuthorizationCustomMethod]) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func performRequest(_ request: AuthenticationServices.ASAuthorizationRequest, customMethods: [AuthenticationServices.ASAuthorizationCustomMethod]) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func performAutoFillAssistedRequests(_ requests: [AuthenticationServices.ASAuthorizationRequest]) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func performAutoFillAssistedRequest(_ request: AuthenticationServices.ASAuthorizationRequest) async throws -> _AuthenticationServices_SwiftUI.ASAuthorizationResult
  #endif
}
extension SwiftUI.EnvironmentValues {
  @available(iOS 16.4, macOS 13.3, watchOS 9.4, tvOS 16.4, *)
  public var authorizationController: _AuthenticationServices_SwiftUI.AuthorizationController {
    get
  }
}
@available(iOS 16.4, macOS 13.3, watchOS 9.4, tvOS 16.4, *)
public struct WebAuthenticationSession {
  public struct BrowserSession : Swift.Sendable {
    public static var ephemeral: _AuthenticationServices_SwiftUI.WebAuthenticationSession.BrowserSession {
      get
    }
    public static var shared: _AuthenticationServices_SwiftUI.WebAuthenticationSession.BrowserSession {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func authenticate(using url: Foundation.URL, callbackURLScheme: Swift.String, preferredBrowserSession: _AuthenticationServices_SwiftUI.WebAuthenticationSession.BrowserSession? = nil) async throws -> Foundation.URL
  #endif
}
extension SwiftUI.EnvironmentValues {
  @available(iOS 16.4, macOS 13.3, watchOS 9.4, tvOS 16.4, *)
  public var webAuthenticationSession: _AuthenticationServices_SwiftUI.WebAuthenticationSession {
    get
  }
}
