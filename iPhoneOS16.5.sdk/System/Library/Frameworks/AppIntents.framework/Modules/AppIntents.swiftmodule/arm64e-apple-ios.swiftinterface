// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64e-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name AppIntents
// swift-module-flags-ignorable: -target-min-inlining-version min -enable-bare-slash-regex -user-module-version 136.100.13
@_exported import AppIntents
import CoreGraphics
import CoreLocation
import ExtensionFoundation
import Foundation
import Swift
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentFile : Swift.Sendable {
  public var data: Foundation.Data {
    get
  }
  public var filename: Swift.String {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  public var type: UniformTypeIdentifiers.UTType? {
    get
  }
  public var removedOnCompletion: Swift.Bool {
    get
    set
  }
  public init(data: Foundation.Data, filename: Swift.String, type: UniformTypeIdentifiers.UTType? = nil)
  public init(fileURL: Foundation.URL, filename: Swift.String? = nil, type: UniformTypeIdentifiers.UTType? = nil)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentFile {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentFile : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentFile : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentFile> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentFile>
  public typealias UnwrappedType = AppIntents.IntentFile
  public typealias ValueType = AppIntents.IntentFile
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AnyIntentValue : Swift.Sendable {
  associatedtype Value : AppIntents._IntentValue, Swift.Sendable
  var isOptional: Swift.Bool { get }
  var title: Foundation.LocalizedStringResource { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  #if compiler(>=5.3) && $AsyncAwait
  final public func requestValue(_ dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func requestDisambiguation(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func requestConfirmation(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil) async throws -> Swift.Bool
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  final public func needsValueError(_ dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
  final public func needsDisambiguationError(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  @available(*, deprecated, message: "Please use needsValueError(_ dialog:)")
  final public func requestValue(_ dialog: AppIntents.IntentDialog? = nil) -> any Swift.Error
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityQuery : AppIntents.DynamicOptionsProvider, AppIntents.PersistentlyIdentifiable, Swift.Sendable {
  associatedtype Entity : AppIntents.AppEntity = Self.Result.Result.ValueType where Self.Entity == Self.Result.Result
  associatedtype Result = [Self.Entity]
  init()
  #if compiler(>=5.3) && $AsyncAwait
  func entities(for identifiers: [Self.Entity.ID]) async throws -> [Self.Entity]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func suggestedEntities() async throws -> Self.Result
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuery {
  #if compiler(>=5.3) && $AsyncAwait
  public func suggestedEntities() async throws -> Self.Result
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func results() async throws -> Self.Result
  #endif
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@propertyWrapper final public class AppDependency<Value> : @unchecked Swift.Sendable where Value : Swift.Sendable {
  final public var projectedValue: AppIntents.AppDependency<Value> {
    get
  }
  final public var wrappedValue: Value {
    get
    set
  }
  convenience public init(key: Swift.AnyHashable? = nil, manager: AppIntents.AppDependencyManager = .shared)
  convenience public init(key: Swift.AnyHashable? = nil, manager: AppIntents.AppDependencyManager = .shared, default defaultValueProvider: @autoclosure @escaping () -> Value)
  #if compiler(>=5.3) && $AsyncAwait
  convenience public init(key: Swift.AnyHashable? = nil, manager: AppIntents.AppDependencyManager = .shared, default defaultValueProvider: @escaping () async throws -> Value)
  #endif
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _SnippetViewContainer {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppIntent : AppIntents.PersistentlyIdentifiable, AppIntents._SupportsAppDependencies, Swift.Sendable {
  associatedtype PerformResult : AppIntents.IntentResult
  static var title: Foundation.LocalizedStringResource { get }
  static var openAppWhenRun: Swift.Bool { get }
  static var authenticationPolicy: AppIntents.IntentAuthenticationPolicy { get }
  associatedtype SummaryContent : AppIntents.ParameterSummary
  static var parameterSummary: Self.SummaryContent { get }
  static var description: AppIntents.IntentDescription? { get }
  #if compiler(>=5.3) && $AsyncAwait
  func perform() async throws -> Self.PerformResult
  #endif
  init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  public typealias Parameter = AppIntents.IntentParameter
  public typealias When = AppIntents.ParameterSummaryWhenCondition
  public typealias Switch<Value, CaseCondition> = AppIntents.ParameterSummarySwitchCondition<Self, Value, CaseCondition> where Value : AppIntents._IntentValue, CaseCondition : AppIntents._ParameterSummarySwitchCase
  public typealias Case = AppIntents.ParameterSummaryCaseCondition
  public typealias DefaultCase = AppIntents.ParameterSummaryDefaultCaseCondition
  public typealias Summary = AppIntents.IntentParameterSummary<Self>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
  public static var authenticationPolicy: AppIntents.IntentAuthenticationPolicy {
    get
  }
  public static var description: AppIntents.IntentDescription? {
    get
  }
  public static var persistentIdentifier: Swift.String {
    get
  }
  public static var parameterSummary: some AppIntents.ParameterSummary {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func donate() async throws -> AppIntents.IntentDonationIdentifier
  #endif
  @discardableResult
  public func donate() -> AppIntents.IntentDonationIdentifier
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func donate(result: some IntentResult) async throws -> AppIntents.IntentDonationIdentifier
  #endif
  @discardableResult
  public func donate(result: some IntentResult) -> AppIntents.IntentDonationIdentifier
  #if compiler(>=5.3) && $AsyncAwait
  public func callAsFunction(donate donateOnCompletion: Swift.Bool = true) async throws -> Self.PerformResult.Value where Self.PerformResult : AppIntents.ReturnsValue
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func callAsFunction(donate donateOnCompletion: Swift.Bool = true) async throws where Self.PerformResult.Value == Swift.Never
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum IntentAuthenticationPolicy {
  case alwaysAllowed
  case requiresAuthentication
  case requiresLocalDeviceAuthentication
  public static func == (a: AppIntents.IntentAuthenticationPolicy, b: AppIntents.IntentAuthenticationPolicy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummarySwitchCondition<Intent, Value, CaseCondition> : AppIntents.ParameterSummary where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, CaseCondition : AppIntents._ParameterSummarySwitchCase {
  public init(_ keyPath: Swift.KeyPath<Intent, AppIntents.IntentParameter<Value>>, @AppIntents.ParameterSummaryCaseBuilder<Intent, Value> _ builder: () -> CaseCondition)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryCaseCondition<Intent, Value, Summary> : AppIntents._ParameterSummarySwitchCase where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Summary : AppIntents.ParameterSummary {
  public init(_ value: Value, @AppIntents.ParameterSummaryBuilder<Intent> _ parameterSummary: () -> Summary)
  public init(_ value: [Value], @AppIntents.ParameterSummaryBuilder<Intent> _ parameterSummary: () -> Summary)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryDefaultCaseCondition<Intent, Value, Summary> : AppIntents._ParameterSummarySwitchCase where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Summary : AppIntents.ParameterSummary {
  public init(@AppIntents.ParameterSummaryBuilder<Intent> _ parameterSummary: () -> Summary)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol _ParameterSummarySwitchCase {
  associatedtype Intent : AppIntents.AppIntent
  associatedtype Value : AppIntents._IntentValue
  associatedtype Summary : AppIntents.ParameterSummary
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum InputConnectionBehavior {
  case `default`
  case never
  case connectToPreviousIntentResult
  public static func == (a: AppIntents.InputConnectionBehavior, b: AppIntents.InputConnectionBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityIdentifierConvertible {
  var entityIdentifierString: Swift.String { get }
  static func entityIdentifier(for entityIdentifierString: Swift.String) -> Self?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Swift.String?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.UUID : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Foundation.UUID?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Int : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Swift.Int?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Float : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Swift.Float?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityIdentifier : Swift.CustomStringConvertible, Swift.Hashable, Swift.Sendable {
  public let entityType: any AppIntents.AppEntity.Type
  public let identifier: Swift.String
  public static let valueMaximumLength: Swift.Int
  public var description: Swift.String {
    get
  }
  public init<Entity>(for entity: Entity) where Entity : AppIntents.AppEntity
  public init<Entity>(for entityType: Entity.Type, identifier: Entity.ID) where Entity : AppIntents.AppEntity
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AppIntents.EntityIdentifier, rhs: AppIntents.EntityIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityIdentifier : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.EntityIdentifier>
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.EntityIdentifier>
  public typealias UnwrappedType = AppIntents.EntityIdentifier
  public typealias ValueType = AppIntents.EntityIdentifier
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ParameterSummary {
  associatedtype Intent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum ParameterSummaryBuilder<Intent> where Intent : AppIntents.AppIntent {
  public static func buildExpression<Summary>(_ expression: Summary) -> Summary where Intent == Summary.Intent, Summary : AppIntents.ParameterSummary
  public static func buildBlock<Summary>(_ block: Summary) -> Summary where Intent == Summary.Intent, Summary : AppIntents.ParameterSummary
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum AppShortcutPhraseToken {
  case applicationName
  public static func == (a: AppIntents.AppShortcutPhraseToken, b: AppIntents.AppShortcutPhraseToken) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AppShortcutPhrase<Intent> : Swift.ExpressibleByStringInterpolation where Intent : AppIntents.AppIntent {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.AppShortcutPhrase<Intent>.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation(_ token: AppIntents.AppShortcutPhraseToken)
    public mutating func appendInterpolation<Value, Subject>(_ subject: Subject) where Value : AppIntents._IntentValue, Value : Swift.Sendable, Subject : Swift.KeyPath<Intent, AppIntents.IntentParameter<Value>>
    public typealias StringLiteralType = Swift.String
  }
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum ShortcutTileColor {
  case red
  case orange
  case tangerine
  case yellow
  case lime
  case teal
  case lightBlue
  case blue
  case navy
  case grape
  case purple
  case pink
  case grayBlue
  case grayGreen
  case grayBrown
  public static func == (a: AppIntents.ShortcutTileColor, b: AppIntents.ShortcutTileColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol DisplayRepresentable : AppIntents.InstanceDisplayRepresentable, AppIntents.TypeDisplayRepresentable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol StaticDisplayRepresentable : AppIntents.CaseDisplayRepresentable, AppIntents.TypeDisplayRepresentable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol TypeDisplayRepresentable {
  static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct TypeDisplayRepresentation : Swift.ExpressibleByStringLiteral {
  public var name: Foundation.LocalizedStringResource
  public var numericFormat: Foundation.LocalizedStringResource?
  public init(name: Foundation.LocalizedStringResource, numericFormat: Foundation.LocalizedStringResource? = nil)
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol InstanceDisplayRepresentable : Foundation.CustomLocalizedStringResourceConvertible {
  var displayRepresentation: AppIntents.DisplayRepresentation { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.InstanceDisplayRepresentable {
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol CaseDisplayRepresentable : Foundation.CustomLocalizedStringResourceConvertible, Swift.CaseIterable, Swift.Hashable {
  static var caseDisplayRepresentations: [Self : AppIntents.DisplayRepresentation] { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.CaseDisplayRepresentable {
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.CaseDisplayRepresentable where Self : AppIntents.InstanceDisplayRepresentable {
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol DeleteIntent : AppIntents.SystemIntent {
  associatedtype Entity : AppIntents.AppEntity
  var entities: [Self.Entity] { get }
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol LiveActivityStartingIntent : AppIntents.SystemIntent {
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@propertyWrapper final public class IntentParameter<Value> : @unchecked Swift.Sendable where Value : AppIntents._IntentValue, Value : Swift.Sendable {
  final public let defaultValue: Value.UnwrappedType?
  final public let title: Foundation.LocalizedStringResource
  final public var isOptional: Swift.Bool {
    get
  }
  final public var projectedValue: AppIntents.IntentParameter<Value> {
    get
  }
  final public var wrappedValue: Value {
    get
    set
  }
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDescription : Swift.ExpressibleByStringLiteral {
  public var descriptionText: Foundation.LocalizedStringResource
  public var categoryName: Foundation.LocalizedStringResource?
  public var searchKeywords: [Foundation.LocalizedStringResource]
  public init(_ descriptionText: Foundation.LocalizedStringResource, categoryName: Foundation.LocalizedStringResource? = nil, searchKeywords: [Foundation.LocalizedStringResource] = [])
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol SystemIntent : AppIntents.AppIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Int : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  public typealias Specification = @_opaqueReturnTypeOf("$sSi10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  public typealias UnwrappedType = Swift.Int
  public typealias ValueType = Swift.Int
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Int : AppIntents.RangeComparableProperty {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntResolver : AppIntents.RangeCheckingResolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.Int, context: AppIntents.IntentParameterContext<Swift.Int>) async throws -> Swift.Int?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.IntResolver, b: AppIntents.IntResolver) -> Swift.Bool
  public typealias Input = Swift.Int
  public typealias Output = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntFromStringResolver : AppIntents.RangeCheckingResolver {
  public var radix: Swift.Int
  public init(radix: Swift.Int = 10)
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Swift.Int>) async throws -> Swift.Int?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.IntFromStringResolver, b: AppIntents.IntFromStringResolver) -> Swift.Bool
  public typealias Input = Swift.String
  public typealias Output = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntFromDoubleResolver : AppIntents.RangeCheckingResolver {
  public var roundingRule: Swift.FloatingPointRoundingRule
  public init(roundingRule: Swift.FloatingPointRoundingRule = .towardZero)
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.Double, context: AppIntents.IntentParameterContext<Swift.Int>) async throws -> Swift.Int?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.IntFromDoubleResolver, b: AppIntents.IntFromDoubleResolver) -> Swift.Bool
  public typealias Input = Swift.Double
  public typealias Output = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum IntControlStyle {
    case stepper
    case field
    public static func == (a: AppIntents.IntentParameter<Value>.IntControlStyle, b: AppIntents.IntentParameter<Value>.IntControlStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Int {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Int {
  final public var controlStyle: AppIntents.IntentParameter<Value>.IntControlStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Swift.Int {
  public var controlStyle: AppIntents.IntentParameter<Value>.IntControlStyle? {
    get
  }
  public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Swift.Int>? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.AttributedString : AppIntents._IntentValue, @unchecked Swift.Sendable {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation16AttributedStringV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  public typealias UnwrappedType = Foundation.AttributedString
  public typealias ValueType = Foundation.AttributedString
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AttributedStringFromStringResolver : AppIntents.Resolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Foundation.AttributedString>) async throws -> Foundation.AttributedString?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.AttributedStringFromStringResolver, b: AppIntents.AttributedStringFromStringResolver) -> Swift.Bool
  public typealias Input = Swift.String
  public typealias Output = Foundation.AttributedString
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.AttributedString {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentCurrencyAmount : Swift.Equatable, Swift.Hashable, @unchecked Swift.Sendable {
  public let amount: Foundation.Decimal
  public let currencyCode: Swift.String
  public init(amount: Foundation.Decimal, currencyCode: Swift.String)
  public static func == (a: AppIntents.IntentCurrencyAmount, b: AppIntents.IntentCurrencyAmount) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentCurrencyAmount : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentCurrencyAmount : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentCurrencyAmount> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentCurrencyAmount>
  public typealias UnwrappedType = AppIntents.IntentCurrencyAmount
  public typealias ValueType = AppIntents.IntentCurrencyAmount
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentCurrencyAmount {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentCurrencyAmount {
  final public var currencyCodes: [Swift.String]? {
    get
  }
  final public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == AppIntents.IntentCurrencyAmount {
  public var currencyCodes: [Swift.String]? {
    get
  }
  public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AudioStartingIntent : AppIntents.SystemIntent {
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public class EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum EntityQueryComparatorsBuilder<Entity, Subject, Property, PropertyType, ComparatorMappingType> where Entity : AppIntents.AppEntity, Subject : AppIntents.AppEntity, Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable {
  public static func buildExpression(_ expression: AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>
  public static func buildExpression(_ expression: AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where PropertyType : Swift.ExpressibleByNilLiteral
  public static func buildExpression<InputType>(_ expression: AppIntents.ContainsComparator<Property, PropertyType, InputType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where InputType : AppIntents._IntentValue
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public static func buildExpression<InputType>(_ expression: AppIntents.IsBetweenComparator<Property, PropertyType, InputType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where InputType : Swift.Comparable, InputType == PropertyType.UnwrappedType
  public static func buildBlock(_ components: AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>...) -> [AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryWhenCondition<Intent, WhenCondition, Otherwise> : AppIntents.ParameterSummary where Intent : AppIntents.AppIntent, WhenCondition : AppIntents.ParameterSummary, Otherwise : AppIntents.ParameterSummary {
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.HasValueComparisonOperator, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType : Swift.Equatable, ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: ValueType.ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType : Swift.ExpressibleByNilLiteral, ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue, ValueType.ValueType : Swift.Equatable
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.OneOfComparisonOperator, _ values: [ValueType.ValueType], @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue, ValueType.ValueType : Swift.Equatable
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType : Swift.Comparable, ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue
  public init<Value, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: Value.ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Value : Swift.ExpressibleByNilLiteral, Value == Parameter.Value, Parameter : AppIntents.AnyIntentValue, Value.ValueType : Swift.Comparable
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.OneOfComparisonOperator, _ values: [Swift.String], @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.OneOfComparisonOperator, _ values: [Parameter.Value.ValueType.ID], @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: Swift.String, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: Parameter.Value.ValueType.ID, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
  public init<IntentType, Parameter>(_ keyPath: Swift.KeyPath<IntentType, Parameter>, identifier comparisonOperator: AppIntents.StringComparisonOperator, _ value: Swift.String, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where IntentType : AppIntents.AppIntent, Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  public init<IntentType, Parameter>(_ keyPath: Swift.KeyPath<IntentType, Parameter>, identifier comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: Parameter.Value.ValueType.ID, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where IntentType : AppIntents.AppIntent, Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
  @available(macOS 13.0, iOS 16.1, watchOS 9.1, tvOS 16.1, *)
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.StringComparisonOperator, _ value: Swift.String, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  @available(macOS 13.0, iOS 16.1, watchOS 9.1, tvOS 16.1, *)
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: Parameter.Value.ValueType.ID, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum HasValueComparisonOperator {
  case hasNoValue
  case hasAnyValue
  public static func == (a: AppIntents.HasValueComparisonOperator, b: AppIntents.HasValueComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum EquatableComparisonOperator {
  case notEqualTo
  case equalTo
  public static func == (a: AppIntents.EquatableComparisonOperator, b: AppIntents.EquatableComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum OneOfComparisonOperator {
  case oneOf
  public static func == (a: AppIntents.OneOfComparisonOperator, b: AppIntents.OneOfComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum ComparableComparisonOperator {
  case lessThan
  case lessThanOrEqualTo
  case greaterThan
  case greaterThanOrEqualTo
  public static func == (a: AppIntents.ComparableComparisonOperator, b: AppIntents.ComparableComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum StringComparisonOperator {
  case doesNotContain
  case contains
  case hasPrefix
  case hasSuffix
  public static func == (a: AppIntents.StringComparisonOperator, b: AppIntents.StringComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppIntentsExtension : ExtensionFoundation.AppExtension {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntentsExtension {
  public var configuration: some ExtensionFoundation.AppExtensionConfiguration {
    get
  }
}
@available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
@available(watchOSApplicationExtension, unavailable)
@available(macCatalystApplicationExtension, unavailable)
@available(macOSApplicationExtension, unavailable)
public protocol ForegroundContinuableIntent : AppIntents.AppIntent {
}
@available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
@available(watchOSApplicationExtension, unavailable)
@available(macCatalystApplicationExtension, unavailable)
@available(macOSApplicationExtension, unavailable)
extension AppIntents.ForegroundContinuableIntent {
  #if compiler(>=5.3) && $AsyncAwait
  public func needsToContinueInForegroundError(_ dialog: AppIntents.IntentDialog? = nil, continuation: (@_Concurrency.MainActor () async throws -> Swift.Void)? = nil) -> AppIntents.AppIntentError
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func requestToContinueInForeground<ResultValue>(_ dialog: AppIntents.IntentDialog? = nil, continuation: (@_Concurrency.MainActor () async throws -> ResultValue) = { () }) async throws -> ResultValue where ResultValue : Swift.Sendable
  #endif
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class EqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Equatable, PropertyType : Swift.Sendable {
  public init(mappingTransform: @escaping (PropertyType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class NotEqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Equatable, PropertyType : Swift.Sendable {
  public init(mappingTransform: @escaping (PropertyType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class GreaterThanComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class LessThanComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class GreaterThanOrEqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class LessThanOrEqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class IsBetweenComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : Swift.Comparable, InputType == PropertyType.UnwrappedType {
  public init(mappingTransform: @escaping (InputType, InputType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<InputType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType, InputType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class ContainsComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : AppIntents._SequenceIntentValue, PropertyType : Swift.Sequence, InputType : Swift.Equatable, InputType == PropertyType.Element
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : AppIntents._SequenceIntentValue, PropertyType : Swift.Sequence, InputType : Swift.Equatable, InputType == PropertyType.Element, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType : Swift.Equatable, InputType == PropertyType.UnwrappedType.Element, PropertyType.UnwrappedType : AppIntents._SequenceIntentValue, PropertyType.UnwrappedType : Swift.Sequence
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType : Swift.Equatable, InputType == PropertyType.UnwrappedType.Element, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType : AppIntents._SequenceIntentValue, PropertyType.UnwrappedType : Swift.Sequence
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, PropertyType.UnwrappedType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Swift.String
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Foundation.AttributedString>, PropertyType == Foundation.AttributedString, InputType == Foundation.AttributedString
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Foundation.AttributedString.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Foundation.AttributedString>, PropertyType == Foundation.AttributedString, InputType == Foundation.AttributedString, Spec : AppIntents.ResolverSpecification
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Foundation.AttributedString, PropertyType.UnwrappedType == Foundation.AttributedString
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Foundation.AttributedString> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Foundation.AttributedString, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Foundation.AttributedString
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class HasPrefixComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, PropertyType.UnwrappedType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class HasSuffixComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, PropertyType.UnwrappedType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Swift.String
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppValue : AppIntents.PersistentlyIdentifiable, AppIntents.TypeDisplayRepresentable, AppIntents._IntentValue, Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum IntentPredictionsBuilder<Intent> where Intent : AppIntents.AppIntent {
  public static func buildExpression<A0>(_ expression: A0) -> A0 where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration
  public static func buildBlock<A0>(_ block: A0) -> A0 where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct TupleIntentPrediction<Intent, T> : AppIntents.IntentPredictionConfiguration where Intent : AppIntents.AppIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol _IntentValue {
  associatedtype ValueType : AppIntents._IntentValue = Self
  associatedtype UnwrappedType : AppIntents._IntentValue = Self
  associatedtype Specification : AppIntents.ResolverSpecification
  static var defaultResolverSpecification: Self.Specification { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Optional : AppIntents._IntentValue where Wrapped : AppIntents._IntentValue {
  public typealias ValueType = Wrapped.ValueType
  public typealias UnwrappedType = Wrapped.UnwrappedType
  public static var defaultResolverSpecification: Wrapped.UnwrappedType.Specification {
    get
  }
  public typealias Specification = Wrapped.UnwrappedType.Specification
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQuerySort<Entity> where Entity : AppIntents.AppEntity {
  @frozen public enum Ordering {
    case ascending
    case descending
    public static func == (a: AppIntents.EntityQuerySort<Entity>.Ordering, b: AppIntents.EntityQuerySort<Entity>.Ordering) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let by: Swift.PartialKeyPath<Entity>
  public let order: AppIntents.EntityQuerySort<Entity>.Ordering
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQuerySortableByProperty<Entity> where Entity : AppIntents.AppEntity {
  public init<Property>(_ keyPath: Swift.KeyPath<Entity, Property>) where Property : AppIntents.AnyIntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentItemCollection<Result> : AppIntents.ResultsCollection where Result : AppIntents._IntentValue {
  public var sections: [AppIntents.IntentItemSection<Result>]
  public var promptLabel: Foundation.LocalizedStringResource?
  public var usesIndexedCollation: Swift.Bool
  public init(promptLabel: Foundation.LocalizedStringResource? = nil, usesIndexedCollation: Swift.Bool = false, @AppIntents.IntentItemSection<Result>.Builder sectionsBuilder: () -> [AppIntents.IntentItemSection<Result>])
  public init(promptLabel: Foundation.LocalizedStringResource? = nil, usesIndexedCollation: Swift.Bool = false, items: [Result]) where Result : AppIntents.DisplayRepresentable
  public init(promptLabel: Foundation.LocalizedStringResource? = nil, usesIndexedCollation: Swift.Bool = false, sections: [AppIntents.IntentItemSection<Result>])
  public var items: [Result.ValueType] {
    get
  }
  public static var empty: AppIntents.IntentItemCollection<Result> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ResumeWorkoutIntent : AppIntents.SystemIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum PlacemarkDisplayStyle {
    case name
    case address
    case city
    public static func == (a: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle, b: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension CoreLocation.CLPlacemark : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension CoreLocation.CLPlacemark : AppIntents._IntentValue, @unchecked Swift.Sendable {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<CoreLocation.CLPlacemark> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<CoreLocation.CLPlacemark>
  public typealias UnwrappedType = CoreLocation.CLPlacemark
  public typealias ValueType = CoreLocation.CLPlacemark
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == CoreLocation.CLPlacemark {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == CoreLocation.CLPlacemark {
  final public var displayStyle: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == CoreLocation.CLPlacemark {
  public var displayStyle: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Double : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  public typealias Specification = @_opaqueReturnTypeOf("$sSd10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  public typealias UnwrappedType = Swift.Double
  public typealias ValueType = Swift.Double
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Double : AppIntents.RangeComparableProperty {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DoubleResolver : AppIntents.RangeCheckingResolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.Double, context: AppIntents.IntentParameterContext<Swift.Double>) async throws -> Swift.Double?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.DoubleResolver, b: AppIntents.DoubleResolver) -> Swift.Bool
  public typealias Input = Swift.Double
  public typealias Output = Swift.Double
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DoubleFromStringResolver : AppIntents.RangeCheckingResolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Swift.Double>) async throws -> Swift.Double?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.DoubleFromStringResolver, b: AppIntents.DoubleFromStringResolver) -> Swift.Bool
  public typealias Input = Swift.String
  public typealias Output = Swift.Double
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DoubleFromIntResolver : AppIntents.RangeCheckingResolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.Int, context: AppIntents.IntentParameterContext<Swift.Double>) async throws -> Swift.Double?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.DoubleFromIntResolver, b: AppIntents.DoubleFromIntResolver) -> Swift.Bool
  public typealias Input = Swift.Int
  public typealias Output = Swift.Double
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum DoubleControlStyle {
    case stepper
    case field
    case slider
    public static func == (a: AppIntents.IntentParameter<Value>.DoubleControlStyle, b: AppIntents.IntentParameter<Value>.DoubleControlStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias InclusiveRange<Bound> = (lowerBound: Bound, upperBound: Bound) where Bound : Swift.Comparable
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Double {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Double {
  final public var controlStyle: AppIntents.IntentParameter<Value>.DoubleControlStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Swift.Double {
  public var controlStyle: AppIntents.IntentParameter<Value>.DoubleControlStyle? {
    get
  }
  public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Swift.Double>? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppEntity : AppIntents.AppValue, AppIntents.DisplayRepresentable, Swift.Identifiable where Self == Self.ValueType, Self.ID : AppIntents.EntityIdentifierConvertible {
  associatedtype DefaultQuery : AppIntents.EntityQuery where Self.ValueType == Self.DefaultQuery.Entity
  static var defaultQuery: Self.DefaultQuery { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity {
  public typealias Property = AppIntents.EntityProperty
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Self> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentParameterSummary<Intent> : AppIntents.ParameterSummary where Intent : AppIntents.AppIntent {
  public init(_ string: AppIntents.ParameterSummaryString<Intent>, table: Swift.String? = nil, @AppIntents.IntentParameterSummary<Intent>.ParameterKeyPathsBuilder _ additionalParameterKeyPaths: () -> [Swift.PartialKeyPath<Intent>])
  public init(_ string: AppIntents.ParameterSummaryString<Intent>, table: Swift.String? = nil)
  public init(@AppIntents.IntentParameterSummary<Intent>.ParameterKeyPathsBuilder _ additionalParameterKeyPaths: () -> [Swift.PartialKeyPath<Intent>])
  public init()
  @_functionBuilder public enum ParameterKeyPathsBuilder {
    public static func buildExpression<ValueType>(_ expression: Swift.KeyPath<Intent, AppIntents.IntentParameter<ValueType>>) -> Swift.PartialKeyPath<Intent> where ValueType : AppIntents._IntentValue, ValueType : Swift.Sendable
    public static func buildBlock(_ blocks: Swift.PartialKeyPath<Intent>...) -> [Swift.PartialKeyPath<Intent>]
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol PauseWorkoutIntent : AppIntents.SystemIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentItemSection<Result> where Result : AppIntents._IntentValue {
  public var description: AppIntents.DisplayRepresentation?
  public var items: [AppIntents.IntentItem<Result>]
  public init(items: [AppIntents.IntentItem<Result>])
  @available(*, deprecated, renamed: "init(_:items:)")
  public init(title: Foundation.LocalizedStringResource, items: [AppIntents.IntentItem<Result>])
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  public init(_ title: Foundation.LocalizedStringResource, items: [AppIntents.IntentItem<Result>])
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  public init(_ title: Foundation.LocalizedStringResource, items: [Result])
  public init(_ title: Foundation.LocalizedStringResource? = nil, @AppIntents.IntentItem<Result>.Builder itemsBuilder: () -> [AppIntents.IntentItem<Result>])
  public init(_ title: Foundation.LocalizedStringResource, subtitle: Foundation.LocalizedStringResource? = nil, image: AppIntents.DisplayRepresentation.Image? = nil, @AppIntents.IntentItem<Result>.Builder itemsBuilder: () -> [AppIntents.IntentItem<Result>])
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentItemSection {
  @_functionBuilder public enum Builder {
    public static func buildBlock() -> [AppIntents.IntentItemSection<Result>]
    public static func buildBlock(_ sections: AppIntents.IntentItemSection<Result>...) -> [AppIntents.IntentItemSection<Result>]
    public static func buildBlock(_ items: AppIntents.IntentItem<Result>...) -> [AppIntents.IntentItemSection<Result>]
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext {
  #if compiler(>=5.3) && $AsyncAwait
  public func requestValue(_ dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestDisambiguation(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestConfirmation(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil) async throws -> Swift.Bool
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext {
  public func needsValueError(_ dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
  public func needsDisambiguationError(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol CustomIntentMigratedAppIntent : AppIntents.AppIntent {
  static var intentClassName: Swift.String { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.CustomIntentMigratedAppIntent {
  public static var persistentIdentifier: Swift.String {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AppIntentError : Swift.Error {
  public static var restartPerform: AppIntents.AppIntentError {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQueryProperties<Entity, ComparatorMappingType> where Entity : AppIntents.AppEntity {
  public init(@AppIntents.EntityQueryPropertiesBuilder<Entity, ComparatorMappingType> properties: () -> [AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>])
  public subscript(index: Swift.Int) -> AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum EntityQueryPropertiesBuilder<Entity, ComparatorMappingType> where Entity : AppIntents.AppEntity {
  public static func buildExpression(_ expression: AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>) -> AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>
  public static func buildBlock(_ components: AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>...) -> [AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppShortcutsProvider {
  @AppIntents.AppShortcutsBuilder static var appShortcuts: [AppIntents.AppShortcut] { get }
  static var shortcutTileColor: AppIntents.ShortcutTileColor { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppShortcutsProvider {
  public static var shortcutTileColor: AppIntents.ShortcutTileColor {
    get
  }
  public static func updateAppShortcutParameters()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum AppShortcutsBuilder {
  public static func buildExpression(_ component: AppIntents.AppShortcut) -> AppIntents.AppShortcut
  public static func buildBlock(_ components: AppIntents.AppShortcut...) -> [AppIntents.AppShortcut]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  public enum Duration {
    case hours
    case microseconds
    case milliseconds
    case minutes
    case nanoseconds
    case picoseconds
    case seconds
    public static func == (a: AppIntents.IntentParameter<Value>.Duration, b: AppIntents.IntentParameter<Value>.Duration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  public enum Energy {
    case calories
    case joules
    case kilocalories
    case kilojoules
    case kilowattHours
    public static func == (a: AppIntents.IntentParameter<Value>.Energy, b: AppIntents.IntentParameter<Value>.Energy) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  public enum Length {
    case astronomicalUnits
    case centimeters
    case decameters
    case decimeters
    case fathoms
    case feet
    case furlongs
    case hectometers
    case inches
    case kilometers
    case lightyears
    case megameters
    case meters
    case micrometers
    case miles
    case millimeters
    case nanometers
    case nauticalMiles
    case parsecs
    case picometers
    case scandinavianMiles
    case yards
    public static func == (a: AppIntents.IntentParameter<Value>.Length, b: AppIntents.IntentParameter<Value>.Length) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  public enum Mass {
    case carats
    case centigrams
    case decigrams
    case grams
    case kilograms
    case metricTons
    case micrograms
    case milligrams
    case nanograms
    case ounces
    case ouncesTroy
    case picograms
    case pounds
    case shortTons
    case slugs
    case stones
    public static func == (a: AppIntents.IntentParameter<Value>.Mass, b: AppIntents.IntentParameter<Value>.Mass) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  public enum Speed {
    case kilometersPerHour
    case knots
    case metersPerSecond
    case milesPerHour
    public static func == (a: AppIntents.IntentParameter<Value>.Speed, b: AppIntents.IntentParameter<Value>.Speed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  public enum Temperature {
    case celsius
    case fahrenheit
    case kelvin
    public static func == (a: AppIntents.IntentParameter<Value>.Temperature, b: AppIntents.IntentParameter<Value>.Temperature) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  public enum Volume {
    case acreFeet
    case bushels
    case centiliters
    case cubicCentimeters
    case cubicDecimeters
    case cubicFeet
    case cubicInches
    case cubicKilometers
    case cubicMeters
    case cubicMiles
    case cubicMillimeters
    case cubicYards
    case cups
    case deciliters
    case fluidOunces
    case gallons
    case imperialFluidOunces
    case imperialGallons
    case imperialPints
    case imperialQuarts
    case imperialTablespoons
    case imperialTeaspoons
    case kiloliters
    case liters
    case megaliters
    case metricCups
    case milliliters
    case pints
    case quarts
    case tablespoons
    case teaspoons
    public static func == (a: AppIntents.IntentParameter<Value>.Volume, b: AppIntents.IntentParameter<Value>.Volume) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol _SupportsAppDependencies {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents._SupportsAppDependencies {
  public typealias Dependency = AppIntents.AppDependency
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentPrediction<Intent, T> : AppIntents.IntentPredictionConfiguration where Intent : AppIntents.AppIntent {
  public init(displayRepresentation: @escaping () -> AppIntents.DisplayRepresentation) where T == ()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDonationMatchingPredicate {
  public static func donationIdentifier(_ identifier: AppIntents.IntentDonationIdentifier) -> AppIntents.IntentDonationMatchingPredicate
  public static func entityIdentifier(_ identifier: AppIntents.EntityIdentifier) -> AppIntents.IntentDonationMatchingPredicate
  public static func intentType(_ intentType: any AppIntents.AppIntent.Type, entityIdentifier: AppIntents.EntityIdentifier? = nil) -> AppIntents.IntentDonationMatchingPredicate
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDonationManager {
  public static var shared: AppIntents.IntentDonationManager {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func donate(intent: some AppIntent) async throws -> AppIntents.IntentDonationIdentifier
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func donate(intent: some AppIntent, result: some IntentResult) async throws -> AppIntents.IntentDonationIdentifier
  #endif
  @discardableResult
  public func donate(intent: some AppIntent) -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func donate(intent: some AppIntent, result: some IntentResult) -> AppIntents.IntentDonationIdentifier
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func deleteDonations(matching predicate: AppIntents.IntentDonationMatchingPredicate) async throws -> [AppIntents.IntentDonationIdentifier]
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum ParameterSummaryCaseBuilder<Intent, Value> where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue {
  public static func buildExpression<C0>(_ expression: C0) -> C0 where Intent == C0.Intent, Value == C0.Value, C0 : AppIntents._ParameterSummarySwitchCase
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Never : AppIntents.AppIntent {
  public static var title: Foundation.LocalizedStringResource
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func perform() async throws -> AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>
  #endif
  public typealias PerformResult = AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>
  public typealias SummaryContent = @_opaqueReturnTypeOf("$s10AppIntents0A6IntentPAAE16parameterSummaryQrvpZ", 0) __<Swift.Never>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Never : AppIntents._IntentValue, AppIntents.ParameterSummary {
  public typealias Intent = Swift.Never
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Swift.Never> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<Swift.Never>
  public typealias UnwrappedType = Swift.Never
  public typealias ValueType = Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryTupleCaseCondition<Intent, Value, ValueType> : AppIntents._ParameterSummarySwitchCase where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue {
  public typealias Summary = Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol DynamicOptionsProvider : AppIntents._SupportsAppDependencies {
  associatedtype Result : AppIntents.ResultsCollection
  associatedtype DefaultValue : AppIntents._IntentValue = Self.Result.Result where Self.DefaultValue.ValueType == Self.Result.Result.ValueType
  #if compiler(>=5.3) && $AsyncAwait
  func results() async throws -> Self.Result
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func defaultResult() async -> Self.DefaultValue?
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DynamicOptionsProvider {
  public typealias ItemCollection = AppIntents.IntentItemCollection
  public typealias ItemSection<R> = AppIntents.IntentItemSection<R> where R == Self.Result.Result
  public typealias Item<R> = AppIntents.IntentItem<R> where R == Self.Result.Result
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DynamicOptionsProvider {
  #if compiler(>=5.3) && $AsyncAwait
  public func defaultResult() async -> Self.DefaultValue?
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDialog : Swift.ExpressibleByStringInterpolation {
  public init(_ string: Foundation.LocalizedStringResource)
  public init(full: Foundation.LocalizedStringResource, supporting: Foundation.LocalizedStringResource)
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  @_semantics("localization_key.init_interpolation") public init(stringInterpolation: Swift.String.LocalizationValue.StringInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = Swift.String.LocalizationValue.StringInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public protocol StartDiveIntent : AppIntents.SystemIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  #if compiler(>=5.3) && $AsyncAwait
  public func requestConfirmation<Result>(result: Result, confirmationActionName: AppIntents.ConfirmationActionName = .`continue`, showPrompt: Swift.Bool = true) async throws where Result : AppIntents.IntentResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestConfirmation() async throws
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  #if compiler(>=5.3) && $AsyncAwait
  @available(*, deprecated, message: "Please use requestConfirmation(result:confirmationActionName:showPrompt:)")
  public func requestConfirmation<Result>(output: Result, confirmationActionName: AppIntents.ConfirmationActionName = .`continue`, showPrompt: Swift.Bool = true) async throws where Result : AppIntents.IntentResult
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol IntentResult {
  associatedtype Value : AppIntents._IntentValue = Swift.Never
  associatedtype OpensAppIntent : AppIntents.AppIntent = Swift.Never
  associatedtype Snippet = Swift.Never
  associatedtype Dialog = Swift.Never
  var value: Self.Value? { get }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ReturnsValue<Value> : AppIntents.IntentResult {
}
#else
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ReturnsValue : AppIntents.IntentResult {
}
#endif
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol OpensIntent : AppIntents.IntentResult {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ProvidesDialog : AppIntents.IntentResult where Self.Dialog == AppIntents.IntentDialog {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ShowsSnippetView : AppIntents.IntentResult where Self.Snippet == AppIntents._SnippetViewContainer {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentResultContainer<Value, OpensAppIntent, Snippet, Dialog> : AppIntents.IntentResult where Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent {
  public var value: Value?
  public var dialog: AppIntents.IntentDialog?
  public var opensIntent: OpensAppIntent?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.ReturnsValue {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.OpensIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.ProvidesDialog where Dialog == AppIntents.IntentDialog {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.ShowsSnippetView where Snippet == AppIntents._SnippetViewContainer {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result() -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value>(value: Value) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<OpensAppIntent>(opensIntent: OpensAppIntent) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, Swift.Never, Swift.Never>, OpensAppIntent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result(dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, AppIntents.IntentDialog>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value>(value: Value, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent
}
@available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
extension AppIntents.IntentResult {
  public static func result<OpensAppIntent>(opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, Swift.Never, AppIntents.IntentDialog>, OpensAppIntent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Intent>(actionButtonIntent: Intent) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>, Intent : AppIntents.AppIntent
  public static func result<Intent>(actionButtonIntent: Intent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Intent : AppIntents.AppIntent
  public static func result<Value, Intent>(value: Value, actionButtonIntent: Intent) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue, Intent : AppIntents.AppIntent
  public static func result<Value, Intent>(value: Value, actionButtonIntent: Intent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, Intent : AppIntents.AppIntent
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@propertyWrapper final public class EntityProperty<Value> : AppIntents.AnyIntentValue, @unchecked Swift.Sendable where Value : AppIntents._IntentValue, Value : Swift.Sendable {
  final public var title: Foundation.LocalizedStringResource
  final public var isOptional: Swift.Bool {
    get
  }
  final public var projectedValue: AppIntents.EntityProperty<Value> {
    get
  }
  final public var wrappedValue: Value {
    get
    set
  }
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentPaymentMethod : Swift.Sendable {
  public init(type: AppIntents.IntentPaymentMethod.PaymentType, name: Foundation.LocalizedStringResource? = nil, identificationHint: Swift.String? = nil, icon: AppIntents.DisplayRepresentation.Image? = nil)
  public var paymentType: AppIntents.IntentPaymentMethod.PaymentType {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var icon: AppIntents.DisplayRepresentation.Image? {
    get
  }
  public var identificationHint: Swift.String? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod {
  public enum PaymentType : Swift.Sendable {
    case unknown
    case checking
    case savings
    case brokerage
    case debit
    case credit
    case prepaid
    case store
    case applePay
    public static func == (a: AppIntents.IntentPaymentMethod.PaymentType, b: AppIntents.IntentPaymentMethod.PaymentType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentPaymentMethod {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentPaymentMethod> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentPaymentMethod>
  public typealias UnwrappedType = AppIntents.IntentPaymentMethod
  public typealias ValueType = AppIntents.IntentPaymentMethod
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentItem<Value> where Value : AppIntents._IntentValue {
  public var value: Value
  public var description: AppIntents.DisplayRepresentation
  public init(_ value: Value, title: Foundation.LocalizedStringResource, subtitle: Foundation.LocalizedStringResource? = nil, image: AppIntents.DisplayRepresentation.Image? = nil)
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  public init(_ value: Value)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentItem {
  @_functionBuilder public enum Builder {
    public static func buildExpression(_ expression: Value) -> AppIntents.IntentItem<Value>
    public static func buildExpression<ExpressionValue>(_ expression: AppIntents.IntentItem<ExpressionValue>) -> AppIntents.IntentItem<ExpressionValue> where ExpressionValue : AppIntents._IntentValue
    public static func buildBlock(_ items: AppIntents.IntentItem<Value>...) -> [AppIntents.IntentItem<Value>]
    @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
    @_backDeploy(before: macOS 13.3)
    @_backDeploy(before: iOS 16.4)
    @_backDeploy(before: watchOS 9.4)
    @_backDeploy(before: tvOS 16.4)
    public static func buildBlock(_ items: [AppIntents.IntentItem<Value>]) -> [AppIntents.IntentItem<Value>] { items }
    @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
    @_backDeploy(before: macOS 13.3)
    @_backDeploy(before: iOS 16.4)
    @_backDeploy(before: watchOS 9.4)
    @_backDeploy(before: tvOS 16.4)
    public static func buildArray(_ components: [[AppIntents.IntentItem<Value>]]) -> [AppIntents.IntentItem<Value>] {
            components.flatMap { $0 }
        }
    public static func buildBlock() -> [Value]
  }
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType> where Entity : AppIntents.AppEntity, Subject : AppIntents.AppEntity, Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable {
  public typealias QueryComparators = [AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>]
  public init(_ keyPath: Swift.KeyPath<Subject, Property>, entityProvider: @escaping (Entity) -> Subject, @AppIntents.EntityQueryComparatorsBuilder<Entity, Subject, Property, PropertyType, ComparatorMappingType> comparators: () -> AppIntents.EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType>.QueryComparators)
  convenience public init(_ keyPath: Swift.KeyPath<Subject, Property>, @AppIntents.EntityQueryComparatorsBuilder<Entity, Entity, Property, PropertyType, ComparatorMappingType> comparators: () -> AppIntents.EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType>.QueryComparators) where Entity == Subject
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public class EntityQueryPropertyDeclaration<Entity, ComparatorMappingType> {
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityStringQuery : AppIntents.EntityQuery {
  #if compiler(>=5.3) && $AsyncAwait
  func entities(matching string: Swift.String) async throws -> Self.Result
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol TransientAppEntity : AppIntents.AppEntity {
  init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.TransientAppEntity {
  public var id: Foundation.UUID {
    get
  }
  public static var defaultQuery: AppIntents._TransientAppEntityQuery<Self> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _TransientAppEntityQuery<Entity> : AppIntents.EntityQuery where Entity : AppIntents.TransientAppEntity {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func entities(for identifiers: [Entity.ID]) async throws -> [Entity]
  #endif
  public typealias DefaultValue = Swift.Array<Entity>.Result
  public typealias Result = [Entity]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class AppDependencyManager {
  public static var shared: AppIntents.AppDependencyManager {
    get
  }
  public init()
  final public func add<Dependency>(key: Swift.AnyHashable? = nil, dependency dependencyProvider: @autoclosure @escaping () -> Dependency) where Dependency : Swift.Sendable
  final public func add<Dependency>(key: Swift.AnyHashable? = nil, dependency dependencyProvider: @autoclosure @escaping () -> () throws -> Dependency) where Dependency : Swift.Sendable
  #if compiler(>=5.3) && $AsyncAwait
  final public func add<Dependency>(key: Swift.AnyHashable? = nil, dependency dependencyProvider: @escaping () async throws -> Dependency) where Dependency : Swift.Sendable
  #endif
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppDependencyManager {
  public enum Error<Value> : Foundation.LocalizedError {
    case failedToRetrieveDependency(Swift.AnyHashable, Value.Type)
    case failedToLoadDependency(Swift.AnyHashable, Value.Type)
    case incorrectDependencyType(Swift.AnyHashable, Value.Type, any Any.Type)
    public var errorDescription: Swift.String? {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.Date : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Foundation.Date> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<Foundation.Date>
  public typealias UnwrappedType = Foundation.Date
  public typealias ValueType = Foundation.Date
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum DateKind {
    case date
    case time
    case dateTime
    public static func == (a: AppIntents.IntentParameter<Value>.DateKind, b: AppIntents.IntentParameter<Value>.DateKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Date {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Date {
  final public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Date {
  public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct FocusFilterAppContext {
  public let notificationFilterPredicate: Foundation.NSPredicate?
  public init(notificationFilterPredicate: Foundation.NSPredicate? = nil)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct FocusFilterSuggestionContext {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentSystemContext {
  public var preciseTimestamp: Foundation.Date? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  public var systemContext: AppIntents.IntentSystemContext {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol StartWorkoutIntent : AppIntents.InstanceDisplayRepresentable, AppIntents.SystemIntent {
  associatedtype WorkoutStyle : AppIntents.AppValue
  var workoutStyle: Self.WorkoutStyle { get set }
  static var suggestedWorkouts: [Self] { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.StartWorkoutIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
  public static func invalidateSuggestedWorkouts()
  public init(style: Self.WorkoutStyle)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DisplayRepresentation : Swift.ExpressibleByStringLiteral, Swift.Equatable {
  public var title: Foundation.LocalizedStringResource
  public var subtitle: Foundation.LocalizedStringResource?
  public var image: AppIntents.DisplayRepresentation.Image?
  public init(title: Foundation.LocalizedStringResource, subtitle: Foundation.LocalizedStringResource? = nil, image: AppIntents.DisplayRepresentation.Image? = nil)
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  public static func == (a: AppIntents.DisplayRepresentation, b: AppIntents.DisplayRepresentation) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityPropertyQuery : AppIntents.EntityQuery {
  associatedtype ComparatorMappingType
  static var properties: Self.QueryProperties { get }
  static var sortingOptions: Self.SortingOptions { get }
  #if compiler(>=5.3) && $AsyncAwait
  func entities(matching comparators: [Self.ComparatorMappingType], mode: Self.ComparatorMode, sortedBy: [AppIntents.EntityQuerySort<Self.Entity>], limit: Swift.Int?) async throws -> Self.Result
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityPropertyQuery {
  public typealias ComparatorMode = AppIntents.EntityQueryComparatorMode
  public typealias QueryProperties = AppIntents.EntityQueryProperties<Self.Entity, Self.ComparatorMappingType>
  public typealias Property = AppIntents.EntityQueryProperty
  public typealias SortingOptions = AppIntents.EntityQuerySortingOptions<Self.Entity>
  public typealias SortableBy = AppIntents.EntityQuerySortableByProperty<Self.Entity>
  public typealias Sort = AppIntents.EntityQuerySort
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@frozen public enum EntityQueryComparatorMode {
  case and
  case or
  public static func == (a: AppIntents.EntityQueryComparatorMode, b: AppIntents.EntityQueryComparatorMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol _SequenceIntentValue : AppIntents._IntentValue {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Array : AppIntents._IntentValue, AppIntents._SequenceIntentValue where Element : AppIntents._IntentValue {
  public typealias ValueType = Element
  public typealias UnwrappedType = Swift.Array<Element>
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Swift.Array<Element>> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<Swift.Array<Element>>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Set : AppIntents._IntentValue, AppIntents._SequenceIntentValue where Element : AppIntents._IntentValue {
  public typealias ValueType = Element
  public typealias UnwrappedType = Swift.Set<Element>
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  public typealias Specification = @_opaqueReturnTypeOf("$sSh10AppIntentsAA12_IntentValueRzrlE28defaultResolverSpecificationQrvpZ", 0) __<Element>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.URL : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation3URLV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  public typealias UnwrappedType = Foundation.URL
  public typealias ValueType = Foundation.URL
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct URLFromStringResolver : AppIntents.Resolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Foundation.URL>) async throws -> Foundation.URL?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.URLFromStringResolver, b: AppIntents.URLFromStringResolver) -> Swift.Bool
  public typealias Input = Swift.String
  public typealias Output = Foundation.URL
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.URL {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ResolverSpecification : Swift.Hashable, Swift.Sendable, Swift.Sequence where Self.Element == any AppIntents.Resolver {
  associatedtype Output : AppIntents._IntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum ResolverSpecificationBuilder<Property> where Property : AppIntents._IntentValue {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock() -> some AppIntents.ResolverSpecification
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EmptyResolverSpecification<Value> : AppIntents.ResolverSpecification where Value : AppIntents._IntentValue {
  public typealias Output = Value
  public init()
  public func makeIterator() -> Swift.IndexingIterator<[any AppIntents.Resolver]>
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.EmptyResolverSpecification<Value>, b: AppIntents.EmptyResolverSpecification<Value>) -> Swift.Bool
  public typealias Element = Swift.IndexingIterator<[any AppIntents.Resolver]>.Element
  public typealias Iterator = Swift.IndexingIterator<[any AppIntents.Resolver]>
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0>(_ r0: R0) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver
  
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ResultsCollection<Result> {
  associatedtype Result : AppIntents._IntentValue
  var promptLabel: Foundation.LocalizedStringResource? { get }
  var usesIndexedCollation: Swift.Bool { get }
  var items: [Self.Result.ValueType] { get }
  static var empty: Self { get }
}
#else
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ResultsCollection {
  associatedtype Result : AppIntents._IntentValue
  var promptLabel: Foundation.LocalizedStringResource? { get }
  var usesIndexedCollation: Swift.Bool { get }
  var items: [Self.Result.ValueType] { get }
  static var empty: Self { get }
}
#endif
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Array : AppIntents.ResultsCollection where Element : AppIntents._IntentValue {
  public typealias Result = Element
  public var promptLabel: Foundation.LocalizedStringResource? {
    get
  }
  public var usesIndexedCollation: Swift.Bool {
    get
  }
  public var items: [Element.ValueType] {
    get
  }
  public static var empty: Swift.Array<Element> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppEnum : AppIntents.AppValue, AppIntents.StaticDisplayRepresentable, Swift.RawRepresentable where Self.RawValue : Swift.LosslessStringConvertible {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType : AppIntents.AppEnum {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEnum {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol RangeCheckingResolver : AppIntents.Resolver {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol RangeComparableProperty : AppIntents._IntentValue, Swift.Comparable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.RangeCheckingResolver {
  public func checkParameterRangeContains<Value>(value: Value, context: AppIntents.IntentParameterContext<Self.Output>) throws where Value : AppIntents.RangeComparableProperty, Value == Self.Output.ValueType, Self.Output : Swift.Sendable
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ConfirmationActionName {
  public static var add: AppIntents.ConfirmationActionName {
    get
  }
  public static var addData: AppIntents.ConfirmationActionName {
    get
  }
  public static var book: AppIntents.ConfirmationActionName {
    get
  }
  public static var buy: AppIntents.ConfirmationActionName {
    get
  }
  public static var call: AppIntents.ConfirmationActionName {
    get
  }
  public static var checkIn: AppIntents.ConfirmationActionName {
    get
  }
  public static var `continue`: AppIntents.ConfirmationActionName {
    get
  }
  public static var create: AppIntents.ConfirmationActionName {
    get
  }
  public static var `do`: AppIntents.ConfirmationActionName {
    get
  }
  public static var download: AppIntents.ConfirmationActionName {
    get
  }
  public static var filter: AppIntents.ConfirmationActionName {
    get
  }
  public static var find: AppIntents.ConfirmationActionName {
    get
  }
  public static var get: AppIntents.ConfirmationActionName {
    get
  }
  public static var go: AppIntents.ConfirmationActionName {
    get
  }
  public static var log: AppIntents.ConfirmationActionName {
    get
  }
  public static var open: AppIntents.ConfirmationActionName {
    get
  }
  public static var order: AppIntents.ConfirmationActionName {
    get
  }
  public static var pay: AppIntents.ConfirmationActionName {
    get
  }
  public static var play: AppIntents.ConfirmationActionName {
    get
  }
  public static var playSound: AppIntents.ConfirmationActionName {
    get
  }
  public static var post: AppIntents.ConfirmationActionName {
    get
  }
  public static var request: AppIntents.ConfirmationActionName {
    get
  }
  public static var run: AppIntents.ConfirmationActionName {
    get
  }
  public static var search: AppIntents.ConfirmationActionName {
    get
  }
  public static var send: AppIntents.ConfirmationActionName {
    get
  }
  public static var set: AppIntents.ConfirmationActionName {
    get
  }
  public static var share: AppIntents.ConfirmationActionName {
    get
  }
  public static var start: AppIntents.ConfirmationActionName {
    get
  }
  public static var startNavigation: AppIntents.ConfirmationActionName {
    get
  }
  public static var toggle: AppIntents.ConfirmationActionName {
    get
  }
  public static var turnOff: AppIntents.ConfirmationActionName {
    get
  }
  public static var turnOn: AppIntents.ConfirmationActionName {
    get
  }
  public static var view: AppIntents.ConfirmationActionName {
    get
  }
  public static func custom(acceptLabel: Foundation.LocalizedStringResource, acceptAlternatives: [Foundation.LocalizedStringResource], denyLabel: Foundation.LocalizedStringResource, denyAlternatives: [Foundation.LocalizedStringResource], destructive: Swift.Bool = false) -> AppIntents.ConfirmationActionName
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol OpenIntent : AppIntents.SystemIntent {
  associatedtype Value : AppIntents.AppValue
  var target: Self.Value { get set }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.OpenIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func perform() async throws -> some AppIntents.IntentResult
  
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  public typealias Specification = @_opaqueReturnTypeOf("$sSS10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  public typealias UnwrappedType = Swift.String
  public typealias ValueType = Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct StringFromIntResolver<Input, Output> : AppIntents.Resolver where Input : AppIntents._IntentValue, Output : AppIntents._IntentValue, Output.ValueType == Swift.String {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Input, context: AppIntents.IntentParameterContext<Output>) async throws -> Output?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.StringFromIntResolver<Input, Output>, b: AppIntents.StringFromIntResolver<Input, Output>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct StringFromDoubleResolver : AppIntents.Resolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.Double, context: AppIntents.IntentParameterContext<Swift.String>) async throws -> Swift.String?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.StringFromDoubleResolver, b: AppIntents.StringFromDoubleResolver) -> Swift.Bool
  public typealias Input = Swift.Double
  public typealias Output = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String {
  public struct IntentInputOptions {
    public enum KeyboardType {
      @available(macOS 13.0, iOS 16.1, watchOS 9.1, tvOS 16.1, *)
      case `default`
      case asciiCapable
      case numbersAndPunctuation
      case URL
      case numberPad
      public static func == (a: Swift.String.IntentInputOptions.KeyboardType, b: Swift.String.IntentInputOptions.KeyboardType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum CapitalizationType {
      case none
      case words
      case sentences
      case allCharacters
      public static func == (a: Swift.String.IntentInputOptions.CapitalizationType, b: Swift.String.IntentInputOptions.CapitalizationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var keyboardType: Swift.String.IntentInputOptions.KeyboardType
    public var capitalizationType: Swift.String.IntentInputOptions.CapitalizationType
    public var multiline: Swift.Bool
    public var autocorrect: Swift.Bool
    public var smartQuotes: Swift.Bool
    public var smartDashes: Swift.Bool
    public init(keyboardType: _const Swift.String.IntentInputOptions.KeyboardType = .asciiCapable, capitalizationType: _const Swift.String.IntentInputOptions.CapitalizationType = .sentences, multiline: _const Swift.Bool = false, autocorrect: _const Swift.Bool = true, smartQuotes: _const Swift.Bool = true, smartDashes: _const Swift.Bool = true)
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.String {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.String {
  final public var inputOptions: Swift.String.IntentInputOptions? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity where Self : AppIntents.AppEnum {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity where Self : AppIntents.CaseDisplayRepresentable {
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity where Self : Swift.RawRepresentable, Self.ID == Self.RawValue {
  public static var defaultQuery: AppIntents._RawRepresentableStringQuery<Self> {
    get
  }
  public var id: Self.ID {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _RawRepresentableStringQuery<Entity> : AppIntents.EntityStringQuery where Entity : AppIntents.AppEntity, Entity : Swift.RawRepresentable, Entity.ID == Entity.RawValue {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func entities(for identifiers: [Entity.ID]) async throws -> [Entity]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func entities(matching string: Swift.String) async throws -> [Entity]
  #endif
  public typealias DefaultValue = Swift.Array<Entity>.Result
  public typealias Result = [Entity]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents._RawRepresentableStringQuery where Entity : Swift.CaseIterable {
  #if compiler(>=5.3) && $AsyncAwait
  public func suggestedEntities() async throws -> [Entity]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func entities(matching string: Swift.String) async throws -> [Entity]
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol SetFocusFilterIntent : AppIntents.AppIntent, AppIntents.InstanceDisplayRepresentable {
  var appContext: AppIntents.FocusFilterAppContext { get }
  #if compiler(>=5.3) && $AsyncAwait
  static func suggestedFocusFilters(for context: AppIntents.FocusFilterSuggestionContext) async -> [Self]
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.SetFocusFilterIntent {
  public var appContext: AppIntents.FocusFilterAppContext {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public static func suggestedFocusFilters(for context: AppIntents.FocusFilterSuggestionContext) async -> [Self]
  #endif
  public static func invalidateFocusFilterAppContext()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum SetFocusFilterIntentError : Foundation.LocalizedError, Swift.Equatable {
  case notFound
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  case missingParameterValue
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.SetFocusFilterIntentError, b: AppIntents.SetFocusFilterIntentError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.SetFocusFilterIntent {
  #if compiler(>=5.3) && $EffectfulProp
  public static var current: Self {
    get async throws
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType : AppIntents.AppEntity {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQuerySortingOptions<Entity> where Entity : AppIntents.AppEntity {
  public init()
  public init(@AppIntents.EntityQuerySortingOptionsBuilder<Entity> content: () -> [AppIntents.EntityQuerySortableByProperty<Entity>])
  public subscript(index: Swift.Int) -> AppIntents.EntityQuerySortableByProperty<Entity> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum EntityQuerySortingOptionsBuilder<Entity> where Entity : AppIntents.AppEntity {
  public static func buildExpression(_ expression: AppIntents.EntityQuerySortableByProperty<Entity>) -> AppIntents.EntityQuerySortableByProperty<Entity>
  public static func buildBlock(_ components: AppIntents.EntityQuerySortableByProperty<Entity>...) -> [AppIntents.EntityQuerySortableByProperty<Entity>]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDonationIdentifier : Swift.Hashable, Swift.Codable, Swift.Sendable {
  public static func == (lhs: AppIntents.IntentDonationIdentifier, rhs: AppIntents.IntentDonationIdentifier) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AppShortcut {
  public init<Intent>(intent: Intent, phrases: [AppIntents.AppShortcutPhrase<Intent>], shortTitle: Foundation.LocalizedStringResource? = nil, systemImageName: _const Swift.String? = nil) where Intent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.Measurement : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Foundation.Measurement<UnitType>> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<Foundation.Measurement<UnitType>>
  public typealias UnwrappedType = Foundation.Measurement<UnitType>
  public typealias ValueType = Foundation.Measurement<UnitType>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol PredictableIntent : AppIntents.AppIntent {
  associatedtype Prediction : AppIntents.IntentPredictionConfiguration
  @AppIntents.IntentPredictionsBuilder<Self> static var predictionConfiguration: Self.Prediction { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol IntentPredictionConfiguration {
  associatedtype Intent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentPerson : Swift.Sendable {
  public var name: AppIntents.IntentPerson.Name
  public var isMe: Swift.Bool
  public var identifier: AppIntents.IntentPerson.Identifier
  public var handle: AppIntents.IntentPerson.Handle?
  public var aliases: [AppIntents.IntentPerson.Handle]
  public var image: AppIntents.DisplayRepresentation.Image?
  public init(identifier: AppIntents.IntentPerson.Identifier, name: AppIntents.IntentPerson.Name, handle: AppIntents.IntentPerson.Handle?, aliases: [AppIntents.IntentPerson.Handle] = [], isMe: Swift.Bool = false, image: AppIntents.DisplayRepresentation.Image? = nil)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson {
  public enum ParameterMode : Swift.String {
    case contact
    case email
    case phone
    case emailOrPhone
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Identifier : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    case contact(Swift.String)
    case applicationDefined(Swift.String)
    public static func == (a: AppIntents.IntentPerson.Identifier, b: AppIntents.IntentPerson.Identifier) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Name : Swift.Sendable {
    case displayName(Swift.String)
    case components(Foundation.PersonNameComponents)
  }
  public struct Handle : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    public enum Value : Swift.Sendable, Swift.Equatable, Swift.Hashable {
      case phoneNumber(Swift.String)
      case emailAddress(Swift.String)
      case applicationDefined(Swift.String)
      public static func == (a: AppIntents.IntentPerson.Handle.Value, b: AppIntents.IntentPerson.Handle.Value) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Label : Swift.Sendable, Swift.Equatable, Swift.Hashable {
      case home
      case work
      case iPhone
      case mobile
      case main
      case homeFax
      case workFax
      case pager
      case other
      case school
      case custom(Swift.String)
      public static func == (a: AppIntents.IntentPerson.Handle.Label, b: AppIntents.IntentPerson.Handle.Label) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var value: AppIntents.IntentPerson.Handle.Value
    public var label: AppIntents.IntentPerson.Handle.Label
    public init(_ value: AppIntents.IntentPerson.Handle.Value, label: AppIntents.IntentPerson.Handle.Label = .other)
    public init(phoneNumber phoneNumberString: Swift.String, label: AppIntents.IntentPerson.Handle.Label = .other)
    public init(emailAddress emailAddressString: Swift.String, label: AppIntents.IntentPerson.Handle.Label = .other)
    public init(applicationDefined stringValue: Swift.String, label labelString: Swift.String? = nil)
    public static func == (a: AppIntents.IntentPerson.Handle, b: AppIntents.IntentPerson.Handle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentPerson> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentPerson>
  public typealias UnwrappedType = AppIntents.IntentPerson
  public typealias ValueType = AppIntents.IntentPerson
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentPerson {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPerson {
  final public var parameterMode: AppIntents.IntentPerson.ParameterMode? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == AppIntents.IntentPerson {
  public var parameterMode: AppIntents.IntentPerson.ParameterMode? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentParameterContext<Value> : AppIntents.AnyIntentValue, @unchecked Swift.Sendable where Value : AppIntents._IntentValue, Value : Swift.Sendable {
  public var isOptional: Swift.Bool {
    get
  }
  public var title: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol Resolver : Swift.Hashable, Swift.Sendable {
  associatedtype Input : AppIntents._IntentValue
  associatedtype Output : AppIntents._IntentValue
  #if compiler(>=5.3) && $AsyncAwait
  func resolve(from input: Self.Input, context: AppIntents.IntentParameterContext<Self.Output>) async throws -> Self.Output?
  #endif
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.Resolver {
  public typealias Context = AppIntents.IntentParameterContext
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryString<Intent> : Swift.ExpressibleByStringInterpolation where Intent : AppIntents.AppIntent {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.ParameterSummaryString<Intent>.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation<ValueType, Subject>(_ subject: Subject) where ValueType : AppIntents._IntentValue, ValueType : Swift.Sendable, Subject : Swift.KeyPath<Intent, AppIntents.IntentParameter<ValueType>>
    public typealias StringLiteralType = Swift.String
  }
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.DateComponents : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Foundation.DateComponents> {
    get
  }
  public typealias Specification = AppIntents.EmptyResolverSpecification<Foundation.DateComponents>
  public typealias UnwrappedType = Foundation.DateComponents
  public typealias ValueType = Foundation.DateComponents
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.DateComponents {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.DateComponents {
  final public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.DateComponents {
  public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DisplayRepresentation {
  public struct Image : Swift.Equatable, Swift.Sendable {
    public init(named name: Swift.String, isTemplate: Swift.Bool? = nil)
    public init(systemName name: Swift.String, isTemplate: Swift.Bool? = nil)
    public init(data: Foundation.Data, isTemplate: Swift.Bool? = nil)
    public init(url: Foundation.URL, isTemplate: Swift.Bool? = nil)
    public init(url: Foundation.URL, width: Swift.Double, height: Swift.Double, isTemplate: Swift.Bool? = nil)
    public static func == (a: AppIntents.DisplayRepresentation.Image, b: AppIntents.DisplayRepresentation.Image) -> Swift.Bool
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Bool : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  public typealias Specification = @_opaqueReturnTypeOf("$sSb10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  public typealias UnwrappedType = Swift.Bool
  public typealias ValueType = Swift.Bool
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct BoolFromStringResolver : AppIntents.Resolver {
  #if compiler(>=5.3) && $AsyncAwait
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Swift.Bool>) async throws -> Swift.Bool?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AppIntents.BoolFromStringResolver, b: AppIntents.BoolFromStringResolver) -> Swift.Bool
  public typealias Input = Swift.String
  public typealias Output = Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Bool {
  public struct IntentDisplayName {
    public let `true`: Foundation.LocalizedStringResource
    public let `false`: Foundation.LocalizedStringResource
    public init(true: Foundation.LocalizedStringResource, false: Foundation.LocalizedStringResource)
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Bool {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Bool {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, displayName: Swift.Bool.IntentDisplayName? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, displayName: Swift.Bool.IntentDisplayName? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  final public var displayName: Swift.Bool.IntentDisplayName? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Swift.Bool {
  public var displayName: Swift.Bool.IntentDisplayName? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol PersistentlyIdentifiable {
  static var persistentIdentifier: Swift.String { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.PersistentlyIdentifiable {
  public static var persistentIdentifier: Swift.String {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Double {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Double
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Double
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Int {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Int
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Int
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.DateComponents {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Date {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.AttributedString {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.AttributedString
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.AttributedString
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == CoreLocation.CLPlacemark {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.URL {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.URL
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.URL
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.String {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.String
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEntity {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentFile {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPerson {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPaymentMethod {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentCurrencyAmount {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, DefaultSummary>(_ c0: C0, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, DefaultSummary>(_ c0: C0, _ c1: C1, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, C12 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent, C11.Intent == C12.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ c13: C13, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, C12 : AppIntents._ParameterSummarySwitchCase, C13 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent, C11.Intent == C12.Intent, C12.Intent == C13.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ c13: C13, _ c14: C14, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, C12 : AppIntents._ParameterSummarySwitchCase, C13 : AppIntents._ParameterSummarySwitchCase, C14 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent, C11.Intent == C12.Intent, C12.Intent == C13.Intent, C13.Intent == C14.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1>(_ a0: A0, _ a1: A1) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2>(_ a0: A0, _ a1: A1, _ a2: A2) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11, _ a12: A12) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A12 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent, A11.Intent == A12.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11, _ a12: A12, _ a13: A13) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A12 : AppIntents.IntentPredictionConfiguration, A13 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent, A11.Intent == A12.Intent, A12.Intent == A13.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11, _ a12: A12, _ a13: A13, _ a14: A14) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A12 : AppIntents.IntentPredictionConfiguration, A13 : AppIntents.IntentPredictionConfiguration, A14 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent, A11.Intent == A12.Intent, A12.Intent == A13.Intent, A13.Intent == A14.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEnum {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases))
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEntity, Value.ValueType : AppIntents.AppEnum {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases))
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1>(_ r0: R0, _ r1: R1) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2>(_ r0: R0, _ r1: R1, _ r2: R2) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11, _ r12: R12) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver, R12 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11, _ r12: R12, _ r13: R13) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver, R12 : AppIntents.Resolver, R13 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11, _ r12: R12, _ r13: R13, _ r14: R14) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver, R12 : AppIntents.Resolver, R13 : AppIntents.Resolver, R14 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Duration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Duration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Duration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Duration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDuration>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDuration>
  final public var unit: AppIntents.IntentParameter<Value>.Duration? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Duration? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitDuration>>.Duration? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitDuration>>.Duration? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Energy? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Energy, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Energy? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Energy, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitEnergy>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitEnergy>
  final public var unit: AppIntents.IntentParameter<Value>.Energy? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Energy? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitEnergy>>.Energy? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitEnergy>>.Energy? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Length? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Length, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Length? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Length, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitLength>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitLength>
  final public var unit: AppIntents.IntentParameter<Value>.Length? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Length? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitLength>>.Length? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitLength>>.Length? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Mass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Mass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Mass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Mass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitMass>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitMass>
  final public var unit: AppIntents.IntentParameter<Value>.Mass? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Mass? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitMass>>.Mass? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitMass>>.Mass? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Speed? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Speed, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Speed? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Speed, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitSpeed>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitSpeed>
  final public var unit: AppIntents.IntentParameter<Value>.Speed? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Speed? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitSpeed>>.Speed? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitSpeed>>.Speed? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Temperature? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Temperature, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Temperature? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Temperature, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitTemperature>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitTemperature>
  final public var unit: AppIntents.IntentParameter<Value>.Temperature? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Temperature? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitTemperature>>.Temperature? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitTemperature>>.Temperature? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Volume? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Volume, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Volume? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Volume, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitVolume>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitVolume>
  final public var unit: AppIntents.IntentParameter<Value>.Volume? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Volume? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitVolume>>.Volume? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitVolume>>.Volume? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, P0>(parameters: T, displayRepresentation: @escaping (_ value0: V0) -> AppIntents.DisplayRepresentation) where T == Swift.KeyPath<Intent, P0>, V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, P0, P1, K0, K1>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1) -> AppIntents.DisplayRepresentation) where T == (K0, K1), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, P0, P1, P2, K0, K1, K2>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, P0, P1, P2, P3, K0, K1, K2, K3>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, P0, P1, P2, P3, P4, K0, K1, K2, K3, K4>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, P0, P1, P2, P3, P4, P5, K0, K1, K2, K3, K4, K5>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, P0, P1, P2, P3, P4, P5, P6, K0, K1, K2, K3, K4, K5, K6>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, P0, P1, P2, P3, P4, P5, P6, P7, K0, K1, K2, K3, K4, K5, K6, K7>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, P0, P1, P2, P3, P4, P5, P6, P7, P8, K0, K1, K2, K3, K4, K5, K6, K7, K8>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11, _ value12: V12) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, P12 : AppIntents.IntentParameter<V12>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>, K12 : Swift.KeyPath<Intent, P12>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11, _ value12: V12, _ value13: V13) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, V13 : AppIntents._IntentValue, V13 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, P12 : AppIntents.IntentParameter<V12>, P13 : AppIntents.IntentParameter<V13>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>, K12 : Swift.KeyPath<Intent, P12>, K13 : Swift.KeyPath<Intent, P13>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13, K14>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11, _ value12: V12, _ value13: V13, _ value14: V14) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13, K14), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, V13 : AppIntents._IntentValue, V13 : Swift.Sendable, V14 : AppIntents._IntentValue, V14 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, P12 : AppIntents.IntentParameter<V12>, P13 : AppIntents.IntentParameter<V13>, P14 : AppIntents.IntentParameter<V14>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>, K12 : Swift.KeyPath<Intent, P12>, K13 : Swift.KeyPath<Intent, P13>, K14 : Swift.KeyPath<Intent, P14>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter : AppIntents.AnyIntentValue {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentAuthenticationPolicy : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentAuthenticationPolicy : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.InputConnectionBehavior : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.InputConnectionBehavior : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppShortcutPhraseToken : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppShortcutPhraseToken : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ShortcutTileColor : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ShortcutTileColor : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.IntControlStyle : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.IntControlStyle : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.HasValueComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.HasValueComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EquatableComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EquatableComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.OneOfComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.OneOfComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ComparableComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ComparableComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.StringComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.StringComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuerySort.Ordering : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuerySort.Ordering : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuerySort.Ordering : Swift.Sendable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.PlacemarkDisplayStyle : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.PlacemarkDisplayStyle : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DoubleControlStyle : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DoubleControlStyle : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod.PaymentType : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod.PaymentType : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DateKind : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DateKind : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQueryComparatorMode : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQueryComparatorMode : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQueryComparatorMode : Swift.Sendable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.KeyboardType : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.KeyboardType : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.CapitalizationType : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.CapitalizationType : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.SetFocusFilterIntentError : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson.ParameterMode : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson.ParameterMode : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson.ParameterMode : Swift.RawRepresentable {}
