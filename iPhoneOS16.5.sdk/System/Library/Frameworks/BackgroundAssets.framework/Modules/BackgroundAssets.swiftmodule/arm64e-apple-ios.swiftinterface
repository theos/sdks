// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64e-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name BackgroundAssets
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 144.100.1
@_exported import BackgroundAssets
import ExtensionFoundation
import Foundation
import Swift
import _Concurrency
import _StringProcessing
@available(iOS 16.1, macOS 13.0, *)
public protocol BADownloaderExtension : ExtensionFoundation.AppExtension {
  func downloads(for request: BackgroundAssets.BAContentRequest, manifestURL: Foundation.URL, extensionInfo: BackgroundAssets.BAAppExtensionInfo) -> Swift.Set<BackgroundAssets.BADownload>
  #if compiler(>=5.3) && $AsyncAwait
  func backgroundDownload(_ download: BackgroundAssets.BADownload, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  #endif
  func backgroundDownload(_ failedDownload: BackgroundAssets.BADownload, failedWithError error: any Swift.Error)
  func backgroundDownload(_ finishedDownload: BackgroundAssets.BADownload, finishedWithFileURL fileURL: Foundation.URL)
  @available(iOS, introduced: 16.1, deprecated: 16.4, message: "extensionWillTerminate will not be invoked in all applicable circumstances and should not be relied upon.")
  @available(macOS, introduced: 13.0, deprecated: 13.3, message: "extensionWillTerminate will not be invoked in all applicable circumstances and should not be relied upon.")
  func extensionWillTerminate()
}
@available(iOS 16.1, macOS 13.0, *)
public protocol BADownloaderExtensionConfiguration : ExtensionFoundation.AppExtensionConfiguration {
}
@available(iOS 16.1, macOS 13.0, *)
extension BackgroundAssets.BADownloaderExtension {
  public func downloads(for request: BackgroundAssets.BAContentRequest, manifestURL: Foundation.URL, extensionInfo: BackgroundAssets.BAAppExtensionInfo) -> Swift.Set<BackgroundAssets.BADownload>
  #if compiler(>=5.3) && $AsyncAwait
  public func backgroundDownload(_ download: BackgroundAssets.BADownload, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  #endif
  public func backgroundDownload(_ failedDownload: BackgroundAssets.BADownload, failedWithError error: any Swift.Error)
  public func backgroundDownload(_ finishedDownload: BackgroundAssets.BADownload, finishedWithFileURL fileURL: Foundation.URL)
  public func extensionWillTerminate()
}
@available(iOS 16.1, macOS 13.0, *)
extension BackgroundAssets.BADownloaderExtension {
  public var configuration: some BackgroundAssets.BADownloaderExtensionConfiguration {
    get
  }
}
@available(iOS 16.1, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension BackgroundAssets.BAAppExtensionInfo {
  @available(iOS 16.4, macOS 13.3, *)
  public var restrictedEssentialDownloadSizeRemaining: Swift.Int? {
    get
  }
  public var restrictedDownloadSizeRemaining: Swift.Int? {
    get
  }
}
