// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64e-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name _PassKit_SwiftUI
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 1505.15
import Foundation
@_exported import PassKit
import Swift
@_exported import SwiftUI
import _Concurrency
@_exported import _PassKit_SwiftUI
import _StringProcessing
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  public init(carKeyPassword: Swift.String, supportedRadioTechnologies: PassKit.PKRadioTechnology, issuerIdentifier: Swift.String, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
  public init(_ configuration: PassKit.PKAddSecureElementPassConfiguration, onCompletion: @escaping (Swift.Result<[PassKit.PKSecureElementPass], any Swift.Error>) -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUI.EmptyView {
  public init(carKeyPassword: Swift.String, supportedRadioTechnologies: PassKit.PKRadioTechnology, issuerIdentifier: Swift.String, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
  public init(_ configuration: PassKit.PKAddSecureElementPassConfiguration, onCompletion: @escaping (Swift.Result<[PassKit.PKSecureElementPass], any Swift.Error>) -> Swift.Void)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PayWithApplePayButton<Fallback> : SwiftUI.View where Fallback : SwiftUI.View {
  public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, action: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI012PayWithAppleE6ButtonV4bodyQrvp", 0) __<Fallback>
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PassKit_SwiftUI.PayWithApplePayButton where Fallback == SwiftUI.EmptyView {
  public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, action: @escaping () -> Swift.Void)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AddPassToWalletButton<Fallback> : SwiftUI.View where Fallback : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI03AddA14ToWalletButtonV4bodyQrvp", 0) __<Fallback>
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUI.EmptyView {
  public init(action: @escaping () -> Swift.Void)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VerifyIdentityWithWalletButton<Fallback> : SwiftUI.View where Fallback : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI30VerifyIdentityWithWalletButtonV4bodyQrvp", 0) __<Fallback>
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AddPassToWalletButtonStyle {
  public static let black: _PassKit_SwiftUI.AddPassToWalletButtonStyle
  public static let blackOutline: _PassKit_SwiftUI.AddPassToWalletButtonStyle
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func addPassToWalletButtonStyle(_ style: _PassKit_SwiftUI.AddPassToWalletButtonStyle) -> some SwiftUI.View
  
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AsyncShareablePassConfiguration<Content> : SwiftUI.View where Content : SwiftUI.View {
  public enum Result : Swift.Sendable {
    case success(PassKit.PKAddShareablePassConfiguration)
    case failure(any Swift.Error)
    case loading
  }
  public init(metadata: [PassKit.PKShareablePassMetadata], action: PassKit.PKAddShareablePassConfigurationPrimaryAction, @SwiftUI.ViewBuilder content: @escaping (_PassKit_SwiftUI.AsyncShareablePassConfiguration<Content>.Result) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI014AsyncShareableA13ConfigurationV4bodyQrvp", 0) __<Content>
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  public init(_ passes: [PassKit.PKPass], onCompletion: @escaping (_ didAdd: Swift.Bool) -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUI.EmptyView {
  public init(_ passes: [PassKit.PKPass], onCompletion: @escaping (_ didAdd: Swift.Bool) -> Swift.Void)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public enum PayWithApplePayButtonPaymentAuthorizationPhase {
  case willAuthorize
  case didAuthorize(payment: PassKit.PKPayment, resultHandler: (PassKit.PKPaymentAuthorizationResult) -> Swift.Void)
  case didFinish
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PassKit_SwiftUI.PayWithApplePayButton {
  @available(macCatalyst, unavailable)
  @available(macOS, unavailable)
  public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void, onMerchantSessionRequested: @escaping () async -> PassKit.PKPaymentRequestMerchantSessionUpdate, @SwiftUI.ViewBuilder fallback: () -> Fallback)
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PassKit_SwiftUI.PayWithApplePayButton where Fallback == SwiftUI.EmptyView {
  @available(macCatalyst, unavailable)
  @available(macOS, unavailable)
  public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void, onMerchantSessionRequested: @escaping () async -> PassKit.PKPaymentRequestMerchantSessionUpdate)
  #endif
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.VerifyIdentityWithWalletButton {
  public init(_ label: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel = .verifyIdentity, request: PassKit.PKIdentityRequest, onCompletion: @escaping ((Swift.Result<PassKit.PKIdentityDocument, any Swift.Error>) -> Swift.Void), @SwiftUI.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.VerifyIdentityWithWalletButton where Fallback == SwiftUI.EmptyView {
  public init(_ label: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel = .verifyIdentity, action: @escaping () -> Swift.Void)
  public init(_ label: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel = .verifyIdentity, request: PassKit.PKIdentityRequest, onCompletion: @escaping ((Swift.Result<PassKit.PKIdentityDocument, any Swift.Error>) -> Swift.Void))
}
@available(iOS 15.5, macOS 12.5, watchOS 8.5, *)
@available(tvOS, unavailable)
extension SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait
  public func onApplePayPaymentMethodChange(perform action: @escaping (PassKit.PKPaymentMethod) async -> PassKit.PKPaymentRequestPaymentMethodUpdate) -> some SwiftUI.View
  
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func onApplePayShippingContactChange(perform action: @escaping (PassKit.PKContact) async -> PassKit.PKPaymentRequestShippingContactUpdate) -> some SwiftUI.View
  
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func onApplePayShippingMethodChange(perform action: @escaping (PassKit.PKShippingMethod) async -> PassKit.PKPaymentRequestShippingMethodUpdate) -> some SwiftUI.View
  
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(watchOS, unavailable)
  public func onApplePayCouponCodeChange(perform action: @escaping (Swift.String) async -> PassKit.PKPaymentRequestCouponCodeUpdate) -> some SwiftUI.View
  
  #endif
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ configuration: PassKit.PKAddPaymentPassRequestConfiguration, onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
  #endif
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AddPassToWalletButtonResponse {
  public var certificates: [Foundation.Data]
  public var nonce: Foundation.Data
  public var nonceSignature: Foundation.Data
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUI.EmptyView {
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ configuration: PassKit.PKAddPaymentPassRequestConfiguration, onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PayWithApplePayButtonLabel {
  public static let plain: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let buy: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let addMoney: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let book: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let checkout: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let `continue`: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let contribute: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let donate: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let inStore: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let order: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let reload: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let rent: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let setUp: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let subscribe: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let support: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let tip: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let topUp: _PassKit_SwiftUI.PayWithApplePayButtonLabel
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PayWithApplePayButtonStyle {
  public static let white: _PassKit_SwiftUI.PayWithApplePayButtonStyle
  public static let whiteOutline: _PassKit_SwiftUI.PayWithApplePayButtonStyle
  public static let black: _PassKit_SwiftUI.PayWithApplePayButtonStyle
  public static let automatic: _PassKit_SwiftUI.PayWithApplePayButtonStyle
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.View {
  public func payWithApplePayButtonStyle(_ style: _PassKit_SwiftUI.PayWithApplePayButtonStyle) -> some SwiftUI.View
  
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VerifyIdentityWithWalletButtonLabel {
  public static let verifyIdentity: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
  public static let `continue`: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
  public static let verify: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
  public static let verifyAge: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VerifyIdentityWithWalletButtonStyle {
  public static let black: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonStyle
  public static var blackOutline: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonStyle
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func verifyIdentityWithWalletButtonStyle(_ style: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonStyle) -> some SwiftUI.View
  
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AddPassToWalletButtonFilter {
  public static func paymentNetwork(_ paymentNetwork: PassKit.PKPaymentNetwork) -> _PassKit_SwiftUI.AddPassToWalletButtonFilter
  public static func productIdentifier(_ productIdentifier: Swift.String) -> _PassKit_SwiftUI.AddPassToWalletButtonFilter
  public static func primaryAccountIdentifier(_ primaryAccountIdentifier: Swift.String) -> _PassKit_SwiftUI.AddPassToWalletButtonFilter
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ encryptionScheme: PassKit.PKEncryptionScheme, cardholderName: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, primaryAccountSuffix: Swift.String? = nil, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ encryptionScheme: PassKit.PKEncryptionScheme, primaryAccountSuffix: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUI.ViewBuilder fallback: () -> Fallback)
  #endif
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUI.EmptyView {
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ encryptionScheme: PassKit.PKEncryptionScheme, cardholderName: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, primaryAccountSuffix: Swift.String? = nil, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ encryptionScheme: PassKit.PKEncryptionScheme, primaryAccountSuffix: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
  #endif
}
