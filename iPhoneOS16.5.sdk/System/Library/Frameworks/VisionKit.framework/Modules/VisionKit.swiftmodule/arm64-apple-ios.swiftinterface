// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name VisionKit
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 201.7
import CoreGraphics
import Foundation
import Swift
import UIKit
import Vision
@_exported import VisionKit
import _Concurrency
import _StringProcessing
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
public enum RecognizedItem : Swift.Identifiable {
  @available(iOS 16.0, *)
  @available(macCatalyst, unavailable)
  public struct Bounds : @unchecked Swift.Sendable {
    public var topLeft: CoreFoundation.CGPoint
    public var topRight: CoreFoundation.CGPoint
    public var bottomRight: CoreFoundation.CGPoint
    public var bottomLeft: CoreFoundation.CGPoint
  }
  @available(iOS 16.0, *)
  @available(macCatalyst, unavailable)
  public struct Text : Swift.Identifiable {
    public var id: Foundation.UUID {
      get
    }
    public var bounds: VisionKit.RecognizedItem.Bounds {
      get
    }
    public var transcript: Swift.String {
      get
    }
    public var observation: Vision.VNRecognizedTextObservation {
      get
    }
    public typealias ID = Foundation.UUID
  }
  @available(iOS 16.0, *)
  @available(macCatalyst, unavailable)
  public struct Barcode : Swift.Identifiable {
    public var id: Foundation.UUID {
      get
    }
    public var bounds: VisionKit.RecognizedItem.Bounds {
      get
    }
    public var payloadStringValue: Swift.String? {
      get
    }
    public var observation: Vision.VNBarcodeObservation {
      get
    }
    public typealias ID = Foundation.UUID
  }
  case text(VisionKit.RecognizedItem.Text)
  case barcode(VisionKit.RecognizedItem.Barcode)
  public var id: Foundation.UUID {
    get
  }
  public var bounds: VisionKit.RecognizedItem.Bounds {
    get
  }
  public typealias ID = Foundation.UUID
}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
public protocol ImageAnalysisInteractionDelegate : AnyObject {
  func interaction(_ interaction: VisionKit.ImageAnalysisInteraction, shouldBeginAt point: CoreFoundation.CGPoint, for interactionType: VisionKit.ImageAnalysisInteraction.InteractionTypes) -> Swift.Bool
  func contentsRect(for interaction: VisionKit.ImageAnalysisInteraction) -> CoreFoundation.CGRect
  func contentView(for interaction: VisionKit.ImageAnalysisInteraction) -> UIKit.UIView?
  func presentingViewController(for interaction: VisionKit.ImageAnalysisInteraction) -> UIKit.UIViewController?
  func interaction(_ interaction: VisionKit.ImageAnalysisInteraction, liveTextButtonDidChangeToVisible visible: Swift.Bool)
  func interaction(_ interaction: VisionKit.ImageAnalysisInteraction, highlightSelectedItemsDidChange highlightSelectedItems: Swift.Bool)
}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.ImageAnalysisInteractionDelegate {
  @_Concurrency.MainActor public func interaction(_ interaction: VisionKit.ImageAnalysisInteraction, shouldBeginAt point: CoreFoundation.CGPoint, for interactionType: VisionKit.ImageAnalysisInteraction.InteractionTypes) -> Swift.Bool
  @_Concurrency.MainActor public func contentsRect(for interaction: VisionKit.ImageAnalysisInteraction) -> CoreFoundation.CGRect
  @_Concurrency.MainActor public func contentView(for interaction: VisionKit.ImageAnalysisInteraction) -> UIKit.UIView?
  @_Concurrency.MainActor public func presentingViewController(for interaction: VisionKit.ImageAnalysisInteraction) -> UIKit.UIViewController?
  @_Concurrency.MainActor public func interaction(_ interaction: VisionKit.ImageAnalysisInteraction, liveTextButtonDidChangeToVisible visible: Swift.Bool)
  @_Concurrency.MainActor public func interaction(_ interaction: VisionKit.ImageAnalysisInteraction, highlightSelectedItemsDidChange highlightSelectedItems: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @available(iOS 16.0, *)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor final public class ImageAnalysisInteraction : ObjectiveC.NSObject, UIKit.UIInteraction {
  @_Concurrency.MainActor(unsafe) @objc weak final public var view: UIKit.UIView? {
    @objc get
  }
  public struct InteractionTypes : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let automatic: VisionKit.ImageAnalysisInteraction.InteractionTypes
    public static let textSelection: VisionKit.ImageAnalysisInteraction.InteractionTypes
    public static let dataDetectors: VisionKit.ImageAnalysisInteraction.InteractionTypes
    public typealias ArrayLiteralElement = VisionKit.ImageAnalysisInteraction.InteractionTypes
    public typealias Element = VisionKit.ImageAnalysisInteraction.InteractionTypes
    public typealias RawValue = Swift.UInt
  }
  @_Concurrency.MainActor @objc override dynamic public init()
  @_Concurrency.MainActor weak final public var delegate: (any VisionKit.ImageAnalysisInteractionDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor convenience public init(_ delegate: any VisionKit.ImageAnalysisInteractionDelegate)
  @_Concurrency.MainActor final public var analysis: VisionKit.ImageAnalysis? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc final public func willMove(to view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc final public func didMove(to view: UIKit.UIView?)
  @_Concurrency.MainActor final public var preferredInteractionTypes: VisionKit.ImageAnalysisInteraction.InteractionTypes {
    get
    set
  }
  @_Concurrency.MainActor final public var activeInteractionTypes: VisionKit.ImageAnalysisInteraction.InteractionTypes {
    get
  }
  @_Concurrency.MainActor final public var selectableItemsHighlighted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public var allowLongPressForDataDetectorsInTextMode: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public var hasActiveTextSelection: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public func resetTextSelection()
  @_Concurrency.MainActor final public func setContentsRectNeedsUpdate()
  @_Concurrency.MainActor final public var contentsRect: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor final public func hasInteractiveItem(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasText(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasDataDetector(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasSupplementaryInterface(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func analysisHasText(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public var liveTextButtonVisible: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public var isSupplementaryInterfaceHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public func setSupplementaryInterfaceHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor final public var supplementaryInterfaceContentInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor final public var supplementaryInterfaceFont: UIKit.UIFont? {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, *)
@available(macCatalyst, unavailable)
final public class ImageAnalysis {
  final public var transcript: Swift.String {
    get
  }
  final public func hasResults(for analysisTypes: VisionKit.ImageAnalyzer.AnalysisTypes) -> Swift.Bool
  @objc deinit
}
@available(iOS 16.0, macOS 13.0, *)
@available(macCatalyst, unavailable)
final public class ImageAnalyzer : @unchecked Swift.Sendable {
  public struct Configuration {
    public let analysisTypes: VisionKit.ImageAnalyzer.AnalysisTypes
    public var locales: [Swift.String]
    public init(_ types: VisionKit.ImageAnalyzer.AnalysisTypes)
  }
  public struct AnalysisTypes : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let text: VisionKit.ImageAnalyzer.AnalysisTypes
    public static let machineReadableCode: VisionKit.ImageAnalyzer.AnalysisTypes
    public typealias ArrayLiteralElement = VisionKit.ImageAnalyzer.AnalysisTypes
    public typealias Element = VisionKit.ImageAnalyzer.AnalysisTypes
    public typealias RawValue = Swift.UInt
  }
  public init()
  final public class var isSupported: Swift.Bool {
    get
  }
  final public class var supportedTextRecognitionLanguages: [Swift.String] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ image: UIKit.UIImage, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ image: UIKit.UIImage, orientation: UIKit.UIImage.Orientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ cgImage: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ ciImage: CoreImage.CIImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ pixelBuffer: CoreVideo.CVPixelBuffer, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(imageAt url: Foundation.URL, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  @objc deinit
}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor public protocol DataScannerViewControllerDelegate : AnyObject {
  @_Concurrency.MainActor func dataScannerDidZoom(_ dataScanner: VisionKit.DataScannerViewController)
  @_Concurrency.MainActor func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didTapOn item: VisionKit.RecognizedItem)
  @_Concurrency.MainActor func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didAdd addedItems: [VisionKit.RecognizedItem], allItems: [VisionKit.RecognizedItem])
  @_Concurrency.MainActor func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didUpdate updatedItems: [VisionKit.RecognizedItem], allItems: [VisionKit.RecognizedItem])
  @_Concurrency.MainActor func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didRemove removedItems: [VisionKit.RecognizedItem], allItems: [VisionKit.RecognizedItem])
  @_Concurrency.MainActor func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, becameUnavailableWithError error: VisionKit.DataScannerViewController.ScanningUnavailable)
}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.DataScannerViewControllerDelegate {
  @_Concurrency.MainActor public func dataScannerDidZoom(_ dataScanner: VisionKit.DataScannerViewController)
  @_Concurrency.MainActor public func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didTapOn item: VisionKit.RecognizedItem)
  @_Concurrency.MainActor public func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didAdd addedItems: [VisionKit.RecognizedItem], allItems: [VisionKit.RecognizedItem])
  @_Concurrency.MainActor public func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didUpdate updatedItems: [VisionKit.RecognizedItem], allItems: [VisionKit.RecognizedItem])
  @_Concurrency.MainActor public func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, didRemove removedItems: [VisionKit.RecognizedItem], allItems: [VisionKit.RecognizedItem])
  @_Concurrency.MainActor public func dataScanner(_ dataScanner: VisionKit.DataScannerViewController, becameUnavailableWithError error: VisionKit.DataScannerViewController.ScanningUnavailable)
}
@objc @_inheritsConvenienceInitializers @available(iOS 16.0, *)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor public class DataScannerViewController : UIKit.UIViewController {
  public struct RecognizedDataType : Swift.Hashable {
    public static func text(languages: [Swift.String] = [], textContentType: VisionKit.DataScannerViewController.TextContentType? = nil) -> VisionKit.DataScannerViewController.RecognizedDataType
    public static func barcode(symbologies: [Vision.VNBarcodeSymbology] = []) -> VisionKit.DataScannerViewController.RecognizedDataType
    public static func == (lhs: VisionKit.DataScannerViewController.RecognizedDataType, rhs: VisionKit.DataScannerViewController.RecognizedDataType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum QualityLevel : Swift.Sendable {
    case balanced
    case fast
    case accurate
    public static func == (a: VisionKit.DataScannerViewController.QualityLevel, b: VisionKit.DataScannerViewController.QualityLevel) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum TextContentType : Swift.Sendable {
    case dateTimeDuration
    case emailAddress
    case flightNumber
    case fullStreetAddress
    case shipmentTrackingNumber
    case telephoneNumber
    case URL
    public static func == (a: VisionKit.DataScannerViewController.TextContentType, b: VisionKit.DataScannerViewController.TextContentType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ScanningUnavailable : Swift.Error {
    case unsupported
    case cameraRestricted
    public static func == (a: VisionKit.DataScannerViewController.ScanningUnavailable, b: VisionKit.DataScannerViewController.ScanningUnavailable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor public class var isSupported: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public class var isAvailable: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public class var supportedTextRecognitionLanguages: [Swift.String] {
    get
  }
  @_Concurrency.MainActor weak public var delegate: (any VisionKit.DataScannerViewControllerDelegate)?
  @_Concurrency.MainActor public var overlayContainerView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor final public let recognizedDataTypes: Swift.Set<VisionKit.DataScannerViewController.RecognizedDataType>
  @_Concurrency.MainActor final public let qualityLevel: VisionKit.DataScannerViewController.QualityLevel
  @_Concurrency.MainActor final public let recognizesMultipleItems: Swift.Bool
  @_Concurrency.MainActor final public let isHighFrameRateTrackingEnabled: Swift.Bool
  @_Concurrency.MainActor final public let isPinchToZoomEnabled: Swift.Bool
  @_Concurrency.MainActor final public let isGuidanceEnabled: Swift.Bool
  @_Concurrency.MainActor final public let isHighlightingEnabled: Swift.Bool
  @_Concurrency.MainActor public var regionOfInterest: CoreFoundation.CGRect? {
    get
    set
  }
  @_Concurrency.MainActor public var isScanning: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public var recognizedItems: _Concurrency.AsyncStream<[VisionKit.RecognizedItem]> {
    get
  }
  @_Concurrency.MainActor public var minZoomFactor: Swift.Double {
    get
  }
  @_Concurrency.MainActor public var maxZoomFactor: Swift.Double {
    get
  }
  @_Concurrency.MainActor public var zoomFactor: Swift.Double {
    get
    set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable)
  @_Concurrency.MainActor @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor public init(recognizedDataTypes: Swift.Set<VisionKit.DataScannerViewController.RecognizedDataType>, qualityLevel: VisionKit.DataScannerViewController.QualityLevel = .balanced, recognizesMultipleItems: Swift.Bool = false, isHighFrameRateTrackingEnabled: Swift.Bool = true, isPinchToZoomEnabled: Swift.Bool = true, isGuidanceEnabled: Swift.Bool = true, isHighlightingEnabled: Swift.Bool = false)
  @objc deinit
  @_Concurrency.MainActor @objc override dynamic public func loadView()
  @_Concurrency.MainActor @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func capturePhoto() async throws -> UIKit.UIImage
  #endif
  @_Concurrency.MainActor public func startScanning() throws
  @_Concurrency.MainActor public func stopScanning()
}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.ImageAnalysisInteraction : Swift.Sendable {}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.DataScannerViewController.QualityLevel : Swift.Equatable {}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.DataScannerViewController.QualityLevel : Swift.Hashable {}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.DataScannerViewController.TextContentType : Swift.Equatable {}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.DataScannerViewController.TextContentType : Swift.Hashable {}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.DataScannerViewController.ScanningUnavailable : Swift.Equatable {}
@available(iOS 16.0, *)
@available(macCatalyst, unavailable)
extension VisionKit.DataScannerViewController.ScanningUnavailable : Swift.Hashable {}
