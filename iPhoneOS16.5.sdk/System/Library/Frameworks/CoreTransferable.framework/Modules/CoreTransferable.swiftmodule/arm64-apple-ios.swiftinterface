// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -library-level api -library-level api -module-name CoreTransferable
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 1.1.3
import Combine
@_exported import CoreTransferable
import Swift
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import os.log
import os
@available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
extension Foundation.AttributedString : CoreTransferable.Transferable {
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  public typealias Representation = @_opaqueReturnTypeOf("$s10Foundation16AttributedStringV16CoreTransferableE22transferRepresentationQrvpZ", 0) __
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension CoreTransferable.TransferRepresentation {
  public func visibility(_ visibility: CoreTransferable.TransferRepresentationVisibility) -> some CoreTransferable.TransferRepresentation<Self.Item>
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Foundation.Data : CoreTransferable.Transferable, @unchecked Swift.Sendable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  public typealias Representation = @_opaqueReturnTypeOf("$s10Foundation4DataV16CoreTransferableE22transferRepresentationQrvpZ", 0) __
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.String : CoreTransferable.Transferable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  public typealias Representation = @_opaqueReturnTypeOf("$sSS16CoreTransferableE22transferRepresentationQrvpZ", 0) __
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Foundation.URL : CoreTransferable.Transferable, @unchecked Swift.Sendable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  public typealias Representation = @_opaqueReturnTypeOf("$s10Foundation3URLV16CoreTransferableE22transferRepresentationQrvpZ", 0) __
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol TransferRepresentation<Item> : Swift.Sendable {
  associatedtype Item : CoreTransferable.Transferable
  associatedtype Body : CoreTransferable.TransferRepresentation
  @CoreTransferable.TransferRepresentationBuilder<Self.Item> var body: Self.Body { get }
}
#else
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol TransferRepresentation : Swift.Sendable {
  associatedtype Item : CoreTransferable.Transferable
  associatedtype Body : CoreTransferable.TransferRepresentation
  @CoreTransferable.TransferRepresentationBuilder<Self.Item> var body: Self.Body { get }
}
#endif
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_functionBuilder public struct TransferRepresentationBuilder<Item> where Item : CoreTransferable.Transferable {
  public static func buildExpression<Encoder, Decoder>(_ content: CoreTransferable.CodableRepresentation<Item, Encoder, Decoder>) -> CoreTransferable.CodableRepresentation<Item, Encoder, Decoder> where Item : Swift.Decodable, Item : Swift.Encodable, Encoder : Combine.TopLevelEncoder, Decoder : Combine.TopLevelDecoder, Encoder.Output == Foundation.Data, Decoder.Input == Foundation.Data
  @_alwaysEmitIntoClient public static func buildExpression<R>(_ content: R) -> R where Item == R.Item, R : CoreTransferable.TransferRepresentation {
         content
     }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Item == Content.Item, Content : CoreTransferable.TransferRepresentation {
         (content)
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2>(_ content1: C1, _ content2: C2) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item {
         TupleTransferRepresentation<Item, (C1, C2)>((content1, content2))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3>(_ content1: C1, _ content2: C2, _ content3: C3) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3)>((content1, content2, content3))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3, C4>(_ content1: C1, _ content2: C2, _ content3: C3, _ content4: C4) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3, C4)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C4 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item, C3.Item == C4.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3, C4)>((
             content1, content2, content3, content4
         ))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3, C4, C5>(_ content1: C1, _ content2: C2, _ content3: C3, _ content4: C4, _ content5: C5) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C4 : CoreTransferable.TransferRepresentation, C5 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item, C3.Item == C4.Item, C4.Item == C5.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>((
             content1, content2, content3, content4, content5
         ))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3, C4, C5, C6>(_ content1: C1, _ content2: C2, _ content3: C3, _ content4: C4, _ content5: C5, _ content6: C6) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C4 : CoreTransferable.TransferRepresentation, C5 : CoreTransferable.TransferRepresentation, C6 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item, C3.Item == C4.Item, C4.Item == C5.Item, C5.Item == C6.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>((
             content1, content2, content3, content4, content5,
             content6
         ))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3, C4, C5, C6, C7>(_ content1: C1, _ content2: C2, _ content3: C3, _ content4: C4, _ content5: C5, _ content6: C6, _ content7: C7) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C4 : CoreTransferable.TransferRepresentation, C5 : CoreTransferable.TransferRepresentation, C6 : CoreTransferable.TransferRepresentation, C7 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item, C3.Item == C4.Item, C4.Item == C5.Item, C5.Item == C6.Item, C6.Item == C7.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>((
             content1, content2, content3, content4, content5,
             content6, content7
         ))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(_ content1: C1, _ content2: C2, _ content3: C3, _ content4: C4, _ content5: C5, _ content6: C6, _ content7: C7, _ content8: C8) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C4 : CoreTransferable.TransferRepresentation, C5 : CoreTransferable.TransferRepresentation, C6 : CoreTransferable.TransferRepresentation, C7 : CoreTransferable.TransferRepresentation, C8 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item, C3.Item == C4.Item, C4.Item == C5.Item, C5.Item == C6.Item, C6.Item == C7.Item, C7.Item == C8.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>((
             content1, content2, content3, content4, content5,
             content6, content7, content8
         ))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ content1: C1, _ content2: C2, _ content3: C3, _ content4: C4, _ content5: C5, _ content6: C6, _ content7: C7, _ content8: C8, _ content9: C9) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C4 : CoreTransferable.TransferRepresentation, C5 : CoreTransferable.TransferRepresentation, C6 : CoreTransferable.TransferRepresentation, C7 : CoreTransferable.TransferRepresentation, C8 : CoreTransferable.TransferRepresentation, C9 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item, C3.Item == C4.Item, C4.Item == C5.Item, C5.Item == C6.Item, C6.Item == C7.Item, C7.Item == C8.Item, C8.Item == C9.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>((
             content1, content2, content3, content4, content5,
             content6, content7, content8, content9
         ))
     }
  @_alwaysEmitIntoClient public static func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(_ content1: C1, _ content2: C2, _ content3: C3, _ content4: C4, _ content5: C5, _ content6: C6, _ content7: C7, _ content8: C8, _ content9: C9, _ content10: C10) -> CoreTransferable.TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)> where Item == C1.Item, C1 : CoreTransferable.TransferRepresentation, C2 : CoreTransferable.TransferRepresentation, C3 : CoreTransferable.TransferRepresentation, C4 : CoreTransferable.TransferRepresentation, C5 : CoreTransferable.TransferRepresentation, C6 : CoreTransferable.TransferRepresentation, C7 : CoreTransferable.TransferRepresentation, C8 : CoreTransferable.TransferRepresentation, C9 : CoreTransferable.TransferRepresentation, C10 : CoreTransferable.TransferRepresentation, C1.Item == C2.Item, C2.Item == C3.Item, C3.Item == C4.Item, C4.Item == C5.Item, C5.Item == C6.Item, C6.Item == C7.Item, C7.Item == C8.Item, C8.Item == C9.Item, C9.Item == C10.Item {
         TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>((
             content1, content2, content3, content4, content5,
             content6, content7, content8, content9, content10
         ))
     }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension CoreTransferable.TransferRepresentation {
  #if compiler(>=5.3) && $Sendable
  public func exportingCondition(_ condition: @escaping @Sendable (Self.Item) -> Swift.Bool) -> CoreTransferable._ConditionalTransferRepresentation<Self>
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _ConditionalTransferRepresentation<Base> : CoreTransferable.TransferRepresentation where Base : CoreTransferable.TransferRepresentation {
  public typealias Item = Base.Item
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension CoreTransferable.TransferRepresentation {
  public func suggestedFileName(_ fileName: Swift.String) -> some CoreTransferable.TransferRepresentation<Self.Item>
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct CodableRepresentation<Item, Encoder, Decoder> : CoreTransferable.TransferRepresentation, Swift.Sendable where Item : CoreTransferable.Transferable, Item : Swift.Decodable, Item : Swift.Encodable, Encoder : Combine.TopLevelEncoder, Decoder : Combine.TopLevelDecoder, Encoder.Output == Foundation.Data, Decoder.Input == Foundation.Data {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init(for itemType: Item.Type = Item.self, contentType: UniformTypeIdentifiers.UTType) where Encoder == Foundation.JSONEncoder, Decoder == Foundation.JSONDecoder
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init(for itemType: Item.Type = Item.self, contentType: UniformTypeIdentifiers.UTType, encoder: Encoder, decoder: Decoder)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ProxyRepresentation<Item, ProxyRepresentation> : CoreTransferable.TransferRepresentation where Item : CoreTransferable.Transferable, ProxyRepresentation : CoreTransferable.Transferable {
  #if compiler(>=5.3) && $Sendable
  public init(importing: @escaping @Sendable (ProxyRepresentation) throws -> Item)
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public init(importing: @escaping @Sendable (ProxyRepresentation) async throws -> Item)
  #endif
  #if compiler(>=5.3) && $Sendable
  public init(exporting: @escaping @Sendable (Item) throws -> ProxyRepresentation)
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public init(exporting: @escaping @Sendable (Item) async throws -> ProxyRepresentation)
  #endif
  #if compiler(>=5.3) && $Sendable
  public init(exporting: @escaping @Sendable (Item) throws -> ProxyRepresentation, importing: @escaping @Sendable (ProxyRepresentation) throws -> Item)
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public init(exporting: @escaping @Sendable (Item) async throws -> ProxyRepresentation, importing: @escaping @Sendable (ProxyRepresentation) async throws -> Item)
  #endif
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct DataRepresentation<Item> : CoreTransferable.TransferRepresentation where Item : CoreTransferable.Transferable {
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  public init(contentType: UniformTypeIdentifiers.UTType, exporting: @escaping @Sendable (Item) async throws -> Foundation.Data, importing: @escaping @Sendable (Foundation.Data) async throws -> Item)
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  public init(exportedContentType: UniformTypeIdentifiers.UTType, exporting: @escaping @Sendable (Item) async throws -> Foundation.Data)
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  public init(importedContentType: UniformTypeIdentifiers.UTType, importing: @escaping @Sendable (Foundation.Data) async throws -> Item)
  #endif
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct SentTransferredFile : Swift.Sendable {
  public let file: Foundation.URL
  public let allowAccessingOriginalFile: Swift.Bool
  public init(_ file: Foundation.URL, allowAccessingOriginalFile: Swift.Bool = false)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ReceivedTransferredFile : Swift.Sendable {
  public let file: Foundation.URL
  public let isOriginalFile: Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct FileRepresentation<Item> : CoreTransferable.TransferRepresentation where Item : CoreTransferable.Transferable {
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  public init(contentType: UniformTypeIdentifiers.UTType, shouldAttemptToOpenInPlace: Swift.Bool = false, exporting: @escaping @Sendable (Item) async throws -> CoreTransferable.SentTransferredFile, importing: @escaping @Sendable (CoreTransferable.ReceivedTransferredFile) async throws -> Item)
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  public init(exportedContentType: UniformTypeIdentifiers.UTType, shouldAllowToOpenInPlace: Swift.Bool = false, exporting: @escaping @Sendable (Item) async throws -> CoreTransferable.SentTransferredFile)
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  public init(importedContentType: UniformTypeIdentifiers.UTType, shouldAttemptToOpenInPlace: Swift.Bool = false, importing: @escaping @Sendable (CoreTransferable.ReceivedTransferredFile) async throws -> Item)
  #endif
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct TupleTransferRepresentation<Item, Value> : CoreTransferable.TransferRepresentation where Item : CoreTransferable.Transferable, Value : Swift.Sendable {
  public var body: some CoreTransferable.TransferRepresentation {
    get
  }
  @usableFromInline
  internal var value: Value
  @usableFromInline
  internal init(_ value: Value)
  public typealias Body = @_opaqueReturnTypeOf("$s16CoreTransferable27TupleTransferRepresentationV4bodyQrvp", 0) __<Item, Value>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Never : CoreTransferable.TransferRepresentation {
  public typealias Item = Swift.Never
  public typealias Body = Swift.Never
  public var body: Swift.Never {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Never : CoreTransferable.Transferable {
  public typealias Representation = Swift.Never
  public static var transferRepresentation: Swift.Never {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol Transferable {
  associatedtype Representation : CoreTransferable.TransferRepresentation
  @CoreTransferable.TransferRepresentationBuilder<Self> static var transferRepresentation: Self.Representation { get }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct TransferRepresentationVisibility : Swift.Sendable, Swift.Equatable {
  public static let all: CoreTransferable.TransferRepresentationVisibility
  @available(macOS, unavailable)
  public static let team: CoreTransferable.TransferRepresentationVisibility
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let group: CoreTransferable.TransferRepresentationVisibility
  public static let ownProcess: CoreTransferable.TransferRepresentationVisibility
  public static func == (a: CoreTransferable.TransferRepresentationVisibility, b: CoreTransferable.TransferRepresentationVisibility) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Foundation.NSItemProvider {
  #if compiler(>=5.3) && $Sendable
  public func register<T>(_ transferable: @autoclosure @escaping @Sendable () -> T) where T : CoreTransferable.Transferable
  #endif
  #if compiler(>=5.3) && $Sendable
  public func loadTransferable<T>(type transferableType: T.Type, completionHandler: @escaping @Sendable (Swift.Result<T, any Swift.Error>) -> Swift.Void) -> Foundation.Progress where T : CoreTransferable.Transferable
  #endif
}
