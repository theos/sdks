// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name DeviceActivity
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 280
import Foundation
import ManagedSettings
import Swift
import _Concurrency
import _StringProcessing
import os.log
import os
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityName : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public var rawValue: Swift.String
  public init(_ rawValue: Swift.String)
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivitySchedule : Swift.Equatable {
  public init(intervalStart: Foundation.DateComponents, intervalEnd: Foundation.DateComponents, repeats: Swift.Bool, warningTime: Foundation.DateComponents? = nil)
  public var intervalStart: Foundation.DateComponents {
    get
  }
  public var intervalEnd: Foundation.DateComponents {
    get
  }
  public var nextInterval: Foundation.DateInterval? {
    get
  }
  public var repeats: Swift.Bool {
    get
  }
  public var warningTime: Foundation.DateComponents? {
    get
  }
  public static func == (a: DeviceActivity.DeviceActivitySchedule, b: DeviceActivity.DeviceActivitySchedule) -> Swift.Bool
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityEvent : Swift.Equatable {
  public struct Name : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public var rawValue: Swift.String
    public init(_ rawValue: Swift.String)
    public init(rawValue: Swift.String)
    public typealias RawValue = Swift.String
  }
  public init(applications: Swift.Set<ManagedSettings.ApplicationToken> = [], categories: Swift.Set<ManagedSettings.ActivityCategoryToken> = [], webDomains: Swift.Set<ManagedSettings.WebDomainToken> = [], threshold: Foundation.DateComponents)
  public var applications: Swift.Set<ManagedSettings.ApplicationToken> {
    get
  }
  public var categories: Swift.Set<ManagedSettings.ActivityCategoryToken> {
    get
  }
  public var webDomains: Swift.Set<ManagedSettings.WebDomainToken> {
    get
  }
  public var includesAllActivity: Swift.Bool {
    get
  }
  public var threshold: Foundation.DateComponents {
    get
  }
  public static func == (a: DeviceActivity.DeviceActivityEvent, b: DeviceActivity.DeviceActivityEvent) -> Swift.Bool
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityCenter {
  public init()
  public var activities: [DeviceActivity.DeviceActivityName] {
    get
  }
  public func schedule(for activity: DeviceActivity.DeviceActivityName) -> DeviceActivity.DeviceActivitySchedule?
  public func events(for activity: DeviceActivity.DeviceActivityName) -> [DeviceActivity.DeviceActivityEvent.Name : DeviceActivity.DeviceActivityEvent]
  public enum MonitoringError : Foundation.LocalizedError {
    case excessiveActivities
    case intervalTooLong
    case intervalTooShort
    case invalidDateComponents
    case unauthorized
    public var errorDescription: Swift.String? {
      get
    }
    public var recoverySuggestion: Swift.String? {
      get
    }
    public static func == (a: DeviceActivity.DeviceActivityCenter.MonitoringError, b: DeviceActivity.DeviceActivityCenter.MonitoringError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func startMonitoring(_ activity: DeviceActivity.DeviceActivityName, during schedule: DeviceActivity.DeviceActivitySchedule, events: [DeviceActivity.DeviceActivityEvent.Name : DeviceActivity.DeviceActivityEvent] = [:]) throws
  public func stopMonitoring(_ activities: [DeviceActivity.DeviceActivityName] = [])
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityData : Swift.Hashable {
  public var user: DeviceActivity.DeviceActivityData.User
  public var device: DeviceActivity.DeviceActivityData.Device
  public var segmentInterval: DeviceActivity.DeviceActivityFilter.SegmentInterval
  public var lastUpdatedDate: Foundation.Date
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DeviceActivity.DeviceActivityData, b: DeviceActivity.DeviceActivityData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData {
  public struct ActivitySegment : Swift.Hashable {
    public var dateInterval: Foundation.DateInterval
    public var totalActivityDuration: Foundation.TimeInterval
    public var longestActivity: Foundation.DateInterval?
    public var firstPickup: Foundation.Date?
    public var totalPickupsWithoutApplicationActivity: Swift.Int
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityData.ActivitySegment, b: DeviceActivity.DeviceActivityData.ActivitySegment) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData {
  public struct ApplicationActivity : Swift.Hashable {
    public var application: ManagedSettings.Application
    public var totalActivityDuration: Foundation.TimeInterval
    public var numberOfPickups: Swift.Int
    public var numberOfNotifications: Swift.Int
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityData.ApplicationActivity, b: DeviceActivity.DeviceActivityData.ApplicationActivity) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData {
  public struct CategoryActivity : Swift.Hashable {
    public var category: ManagedSettings.ActivityCategory
    public var totalActivityDuration: Foundation.TimeInterval
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityData.CategoryActivity, b: DeviceActivity.DeviceActivityData.CategoryActivity) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData {
  public struct Device : Swift.Hashable {
    public enum Model : Swift.Int, Swift.Hashable {
      case iPhone
      case iPod
      case iPad
      case mac
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public var name: Swift.String?
    public var model: DeviceActivity.DeviceActivityData.Device.Model
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityData.Device, b: DeviceActivity.DeviceActivityData.Device) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData {
  public struct User : Swift.Hashable {
    public enum FamilyRole : Swift.Int, Swift.Hashable {
      case individual
      case child
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public var appleID: Swift.String?
    public var nameComponents: Foundation.PersonNameComponents?
    public var role: DeviceActivity.DeviceActivityData.User.FamilyRole
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityData.User, b: DeviceActivity.DeviceActivityData.User) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData {
  public struct WebDomainActivity : Swift.Hashable {
    public var webDomain: ManagedSettings.WebDomain
    public var totalActivityDuration: Foundation.TimeInterval
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityData.WebDomainActivity, b: DeviceActivity.DeviceActivityData.WebDomainActivity) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityFilter : Swift.Equatable {
  public enum SegmentInterval : Swift.Hashable {
    case hourly(during: Foundation.DateInterval = DateInterval(
                start: Calendar.current.startOfDay(for: .now),
                end: .now
            ))
    case daily(during: Foundation.DateInterval)
    case weekly(during: Foundation.DateInterval)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityFilter.SegmentInterval, b: DeviceActivity.DeviceActivityFilter.SegmentInterval) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Users : Swift.Hashable {
    public static let children: DeviceActivity.DeviceActivityFilter.Users
    public static let all: DeviceActivity.DeviceActivityFilter.Users
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityFilter.Users, b: DeviceActivity.DeviceActivityFilter.Users) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Devices : Swift.Hashable {
    public static let all: DeviceActivity.DeviceActivityFilter.Devices
    public init(_ models: Swift.Set<DeviceActivity.DeviceActivityData.Device.Model>)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DeviceActivity.DeviceActivityFilter.Devices, b: DeviceActivity.DeviceActivityFilter.Devices) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var segmentInterval: DeviceActivity.DeviceActivityFilter.SegmentInterval
  public let users: DeviceActivity.DeviceActivityFilter.Users?
  public let devices: DeviceActivity.DeviceActivityFilter.Devices?
  public var applications: Swift.Set<ManagedSettings.ApplicationToken>
  public var categories: Swift.Set<ManagedSettings.ActivityCategoryToken>
  public var webDomains: Swift.Set<ManagedSettings.WebDomainToken>
  public init(segment segmentInterval: DeviceActivity.DeviceActivityFilter.SegmentInterval = .hourly(), users: DeviceActivity.DeviceActivityFilter.Users, devices: DeviceActivity.DeviceActivityFilter.Devices, applications: Swift.Set<ManagedSettings.ApplicationToken> = [], categories: Swift.Set<ManagedSettings.ActivityCategoryToken> = [], webDomains: Swift.Set<ManagedSettings.WebDomainToken> = [])
  public init(segment segmentInterval: DeviceActivity.DeviceActivityFilter.SegmentInterval = .hourly(), devices: DeviceActivity.DeviceActivityFilter.Devices? = nil, applications: Swift.Set<ManagedSettings.ApplicationToken> = [], categories: Swift.Set<ManagedSettings.ActivityCategoryToken> = [], webDomains: Swift.Set<ManagedSettings.WebDomainToken> = [])
  public static func == (a: DeviceActivity.DeviceActivityFilter, b: DeviceActivity.DeviceActivityFilter) -> Swift.Bool
}
@_inheritsConvenienceInitializers @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@objc open class DeviceActivityMonitor : ObjectiveC.NSObject {
  open func intervalDidStart(for activity: DeviceActivity.DeviceActivityName)
  open func intervalDidEnd(for activity: DeviceActivity.DeviceActivityName)
  open func eventDidReachThreshold(_ event: DeviceActivity.DeviceActivityEvent.Name, activity: DeviceActivity.DeviceActivityName)
  open func intervalWillStartWarning(for activity: DeviceActivity.DeviceActivityName)
  open func intervalWillEndWarning(for activity: DeviceActivity.DeviceActivityName)
  open func eventWillReachThresholdWarning(_ event: DeviceActivity.DeviceActivityEvent.Name, activity: DeviceActivity.DeviceActivityName)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityCenter.MonitoringError : Swift.Equatable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityCenter.MonitoringError : Swift.Hashable {}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData.Device.Model : Swift.RawRepresentable {}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityData.User.FamilyRole : Swift.RawRepresentable {}
